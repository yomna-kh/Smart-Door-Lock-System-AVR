
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ebe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  00002ebe  00002f52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080013c  0080013c  0000302e  2**0
                  ALLOC
  3 .stab         00002cc4  00000000  00000000  00003030  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011be  00000000  00000000  00005cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007162  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009c96  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aa44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000aba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ae31  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b5ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 34       	cpi	r26, 0x42	; 66
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <main>
      8a:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e1       	ldi	r26, 0x1A	; 26
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e1       	ldi	r24, 0x1A	; 26
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_7>:
	}
}
*/

ISR(TIMER1_COMPA_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_ptr != NULL_PTR)
     b70:	80 91 3c 01 	lds	r24, 0x013C
     b74:	90 91 3d 01 	lds	r25, 0x013D
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the event is detected */
		(*Timer1_ptr)();
     b7c:	e0 91 3c 01 	lds	r30, 0x013C
     b80:	f0 91 3d 01 	lds	r31, 0x013D
     b84:	09 95       	icall
	}
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <Timer1_init+0x6>
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	9a 83       	std	Y+2, r25	; 0x02
     bb8:	89 83       	std	Y+1, r24	; 0x01


	TCCR1A = (1<<FOC1A) | (((Config_Ptr->mode)& 0b0011)<< WGM10);
     bba:	af e4       	ldi	r26, 0x4F	; 79
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e9 81       	ldd	r30, Y+1	; 0x01
     bc0:	fa 81       	ldd	r31, Y+2	; 0x02
     bc2:	85 81       	ldd	r24, Z+5	; 0x05
     bc4:	83 70       	andi	r24, 0x03	; 3
     bc6:	88 60       	ori	r24, 0x08	; 8
     bc8:	8c 93       	st	X, r24
	TCCR1B = ((((Config_Ptr->mode)& 0b1100)>>2)<< WGM12) | ((Config_Ptr->prescaler)<<CS10);
     bca:	ae e4       	ldi	r26, 0x4E	; 78
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e9 81       	ldd	r30, Y+1	; 0x01
     bd0:	fa 81       	ldd	r31, Y+2	; 0x02
     bd2:	85 81       	ldd	r24, Z+5	; 0x05
     bd4:	88 2f       	mov	r24, r24
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	8c 70       	andi	r24, 0x0C	; 12
     bda:	90 70       	andi	r25, 0x00	; 0
     bdc:	95 95       	asr	r25
     bde:	87 95       	ror	r24
     be0:	95 95       	asr	r25
     be2:	87 95       	ror	r24
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	98 2f       	mov	r25, r24
     bf2:	e9 81       	ldd	r30, Y+1	; 0x01
     bf4:	fa 81       	ldd	r31, Y+2	; 0x02
     bf6:	84 81       	ldd	r24, Z+4	; 0x04
     bf8:	89 2b       	or	r24, r25
     bfa:	8c 93       	st	X, r24
	SREG |=(1<<7);
     bfc:	af e5       	ldi	r26, 0x5F	; 95
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	ef e5       	ldi	r30, 0x5F	; 95
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	80 68       	ori	r24, 0x80	; 128
     c08:	8c 93       	st	X, r24
	TIMSK|=(1<<OCIE1A);
     c0a:	a9 e5       	ldi	r26, 0x59	; 89
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e9 e5       	ldi	r30, 0x59	; 89
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	80 61       	ori	r24, 0x10	; 16
     c16:	8c 93       	st	X, r24
	OCR1A = Config_Ptr -> compare_value;
     c18:	aa e4       	ldi	r26, 0x4A	; 74
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e9 81       	ldd	r30, Y+1	; 0x01
     c1e:	fa 81       	ldd	r31, Y+2	; 0x02
     c20:	82 81       	ldd	r24, Z+2	; 0x02
     c22:	93 81       	ldd	r25, Z+3	; 0x03
     c24:	11 96       	adiw	r26, 0x01	; 1
     c26:	9c 93       	st	X, r25
     c28:	8e 93       	st	-X, r24
	TCNT1 = Config_Ptr->initial_value;  /* Insert the required initial value in TCNT1 register */
     c2a:	ac e4       	ldi	r26, 0x4C	; 76
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e9 81       	ldd	r30, Y+1	; 0x01
     c30:	fa 81       	ldd	r31, Y+2	; 0x02
     c32:	80 81       	ld	r24, Z
     c34:	91 81       	ldd	r25, Z+1	; 0x01
     c36:	11 96       	adiw	r26, 0x01	; 1
     c38:	9c 93       	st	X, r25
     c3a:	8e 93       	st	-X, r24
	if ( Config_Ptr->mode == COMPARE )
     c3c:	e9 81       	ldd	r30, Y+1	; 0x01
     c3e:	fa 81       	ldd	r31, Y+2	; 0x02
     c40:	85 81       	ldd	r24, Z+5	; 0x05
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	41 f4       	brne	.+16     	; 0xc56 <Timer1_init+0xaa>
	{
		TIMSK |= (1<<OCIE1B);
     c46:	a9 e5       	ldi	r26, 0x59	; 89
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e9 e5       	ldi	r30, 0x59	; 89
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	88 60       	ori	r24, 0x08	; 8
     c52:	8c 93       	st	X, r24
     c54:	0c c0       	rjmp	.+24     	; 0xc6e <Timer1_init+0xc2>
	}
	else if ( Config_Ptr->mode == OVERFLOW )
     c56:	e9 81       	ldd	r30, Y+1	; 0x01
     c58:	fa 81       	ldd	r31, Y+2	; 0x02
     c5a:	85 81       	ldd	r24, Z+5	; 0x05
     c5c:	88 23       	and	r24, r24
     c5e:	39 f4       	brne	.+14     	; 0xc6e <Timer1_init+0xc2>
	{
		TIMSK |= (1<<TOIE1);
     c60:	a9 e5       	ldi	r26, 0x59	; 89
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	e9 e5       	ldi	r30, 0x59	; 89
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	84 60       	ori	r24, 0x04	; 4
     c6c:	8c 93       	st	X, r24
	}

}
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	cf 91       	pop	r28
     c74:	df 91       	pop	r29
     c76:	08 95       	ret

00000c78 <Timer1_deInit>:

void Timer1_deInit(void)
{
     c78:	df 93       	push	r29
     c7a:	cf 93       	push	r28
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
     c80:	ef e4       	ldi	r30, 0x4F	; 79
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	10 82       	st	Z, r1
	TCCR1B = 0;
     c86:	ee e4       	ldi	r30, 0x4E	; 78
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	10 82       	st	Z, r1
	TCNT1 = 0;
     c8c:	ec e4       	ldi	r30, 0x4C	; 76
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	11 82       	std	Z+1, r1	; 0x01
     c92:	10 82       	st	Z, r1
	OCR1A = 0;
     c94:	ea e4       	ldi	r30, 0x4A	; 74
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	11 82       	std	Z+1, r1	; 0x01
     c9a:	10 82       	st	Z, r1

	/* Disable the Timer1 Compare interrupt */
	TIMSK &= ~(1<<OCIE1A);
     c9c:	a9 e5       	ldi	r26, 0x59	; 89
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e9 e5       	ldi	r30, 0x59	; 89
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8f 7e       	andi	r24, 0xEF	; 239
     ca8:	8c 93       	st	X, r24
}
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <Timer1_setCallBack>:


void Timer1_setCallBack(void(*a_ptr)(void))
{
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <Timer1_setCallBack+0x6>
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	9a 83       	std	Y+2, r25	; 0x02
     cbc:	89 83       	std	Y+1, r24	; 0x01
	Timer1_ptr = a_ptr;
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	90 93 3d 01 	sts	0x013D, r25
     cc6:	80 93 3c 01 	sts	0x013C, r24
}
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	00 d0       	rcall	.+0      	; 0xcda <GPIO_setupPinDirection+0x6>
     cda:	00 d0       	rcall	.+0      	; 0xcdc <GPIO_setupPinDirection+0x8>
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	89 83       	std	Y+1, r24	; 0x01
     ce4:	6a 83       	std	Y+2, r22	; 0x02
     ce6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	88 30       	cpi	r24, 0x08	; 8
     cec:	08 f0       	brcs	.+2      	; 0xcf0 <GPIO_setupPinDirection+0x1c>
     cee:	d5 c0       	rjmp	.+426    	; 0xe9a <GPIO_setupPinDirection+0x1c6>
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	84 30       	cpi	r24, 0x04	; 4
     cf4:	08 f0       	brcs	.+2      	; 0xcf8 <GPIO_setupPinDirection+0x24>
     cf6:	d1 c0       	rjmp	.+418    	; 0xe9a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	3d 83       	std	Y+5, r19	; 0x05
     d00:	2c 83       	std	Y+4, r18	; 0x04
     d02:	8c 81       	ldd	r24, Y+4	; 0x04
     d04:	9d 81       	ldd	r25, Y+5	; 0x05
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	91 05       	cpc	r25, r1
     d0a:	09 f4       	brne	.+2      	; 0xd0e <GPIO_setupPinDirection+0x3a>
     d0c:	43 c0       	rjmp	.+134    	; 0xd94 <GPIO_setupPinDirection+0xc0>
     d0e:	2c 81       	ldd	r18, Y+4	; 0x04
     d10:	3d 81       	ldd	r19, Y+5	; 0x05
     d12:	22 30       	cpi	r18, 0x02	; 2
     d14:	31 05       	cpc	r19, r1
     d16:	2c f4       	brge	.+10     	; 0xd22 <GPIO_setupPinDirection+0x4e>
     d18:	8c 81       	ldd	r24, Y+4	; 0x04
     d1a:	9d 81       	ldd	r25, Y+5	; 0x05
     d1c:	00 97       	sbiw	r24, 0x00	; 0
     d1e:	71 f0       	breq	.+28     	; 0xd3c <GPIO_setupPinDirection+0x68>
     d20:	bc c0       	rjmp	.+376    	; 0xe9a <GPIO_setupPinDirection+0x1c6>
     d22:	2c 81       	ldd	r18, Y+4	; 0x04
     d24:	3d 81       	ldd	r19, Y+5	; 0x05
     d26:	22 30       	cpi	r18, 0x02	; 2
     d28:	31 05       	cpc	r19, r1
     d2a:	09 f4       	brne	.+2      	; 0xd2e <GPIO_setupPinDirection+0x5a>
     d2c:	5f c0       	rjmp	.+190    	; 0xdec <GPIO_setupPinDirection+0x118>
     d2e:	8c 81       	ldd	r24, Y+4	; 0x04
     d30:	9d 81       	ldd	r25, Y+5	; 0x05
     d32:	83 30       	cpi	r24, 0x03	; 3
     d34:	91 05       	cpc	r25, r1
     d36:	09 f4       	brne	.+2      	; 0xd3a <GPIO_setupPinDirection+0x66>
     d38:	85 c0       	rjmp	.+266    	; 0xe44 <GPIO_setupPinDirection+0x170>
     d3a:	af c0       	rjmp	.+350    	; 0xe9a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     d3c:	8b 81       	ldd	r24, Y+3	; 0x03
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	a1 f4       	brne	.+40     	; 0xd6a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     d42:	aa e3       	ldi	r26, 0x3A	; 58
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	ea e3       	ldi	r30, 0x3A	; 58
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	48 2f       	mov	r20, r24
     d4e:	8a 81       	ldd	r24, Y+2	; 0x02
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	02 2e       	mov	r0, r18
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <GPIO_setupPinDirection+0x8c>
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	0a 94       	dec	r0
     d62:	e2 f7       	brpl	.-8      	; 0xd5c <GPIO_setupPinDirection+0x88>
     d64:	84 2b       	or	r24, r20
     d66:	8c 93       	st	X, r24
     d68:	98 c0       	rjmp	.+304    	; 0xe9a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     d6a:	aa e3       	ldi	r26, 0x3A	; 58
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	ea e3       	ldi	r30, 0x3A	; 58
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	48 2f       	mov	r20, r24
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 2e       	mov	r0, r18
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <GPIO_setupPinDirection+0xb4>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <GPIO_setupPinDirection+0xb0>
     d8c:	80 95       	com	r24
     d8e:	84 23       	and	r24, r20
     d90:	8c 93       	st	X, r24
     d92:	83 c0       	rjmp	.+262    	; 0xe9a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	81 30       	cpi	r24, 0x01	; 1
     d98:	a1 f4       	brne	.+40     	; 0xdc2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     d9a:	a7 e3       	ldi	r26, 0x37	; 55
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e7 e3       	ldi	r30, 0x37	; 55
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	48 2f       	mov	r20, r24
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	02 2e       	mov	r0, r18
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <GPIO_setupPinDirection+0xe4>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	0a 94       	dec	r0
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <GPIO_setupPinDirection+0xe0>
     dbc:	84 2b       	or	r24, r20
     dbe:	8c 93       	st	X, r24
     dc0:	6c c0       	rjmp	.+216    	; 0xe9a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     dc2:	a7 e3       	ldi	r26, 0x37	; 55
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e7 e3       	ldi	r30, 0x37	; 55
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	48 2f       	mov	r20, r24
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 2e       	mov	r0, r18
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <GPIO_setupPinDirection+0x10c>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	0a 94       	dec	r0
     de2:	e2 f7       	brpl	.-8      	; 0xddc <GPIO_setupPinDirection+0x108>
     de4:	80 95       	com	r24
     de6:	84 23       	and	r24, r20
     de8:	8c 93       	st	X, r24
     dea:	57 c0       	rjmp	.+174    	; 0xe9a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	a1 f4       	brne	.+40     	; 0xe1a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     df2:	a4 e3       	ldi	r26, 0x34	; 52
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e4 e3       	ldi	r30, 0x34	; 52
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	48 2f       	mov	r20, r24
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	02 2e       	mov	r0, r18
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <GPIO_setupPinDirection+0x13c>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	0a 94       	dec	r0
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <GPIO_setupPinDirection+0x138>
     e14:	84 2b       	or	r24, r20
     e16:	8c 93       	st	X, r24
     e18:	40 c0       	rjmp	.+128    	; 0xe9a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     e1a:	a4 e3       	ldi	r26, 0x34	; 52
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e4 e3       	ldi	r30, 0x34	; 52
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <GPIO_setupPinDirection+0x164>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <GPIO_setupPinDirection+0x160>
     e3c:	80 95       	com	r24
     e3e:	84 23       	and	r24, r20
     e40:	8c 93       	st	X, r24
     e42:	2b c0       	rjmp	.+86     	; 0xe9a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	a1 f4       	brne	.+40     	; 0xe72 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     e4a:	a1 e3       	ldi	r26, 0x31	; 49
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e1 e3       	ldi	r30, 0x31	; 49
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <GPIO_setupPinDirection+0x194>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <GPIO_setupPinDirection+0x190>
     e6c:	84 2b       	or	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	14 c0       	rjmp	.+40     	; 0xe9a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     e72:	a1 e3       	ldi	r26, 0x31	; 49
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e1 e3       	ldi	r30, 0x31	; 49
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 2e       	mov	r0, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <GPIO_setupPinDirection+0x1bc>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <GPIO_setupPinDirection+0x1b8>
     e94:	80 95       	com	r24
     e96:	84 23       	and	r24, r20
     e98:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <GPIO_writePin+0x6>
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <GPIO_writePin+0x8>
     eb2:	0f 92       	push	r0
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	89 83       	std	Y+1, r24	; 0x01
     eba:	6a 83       	std	Y+2, r22	; 0x02
     ebc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	88 30       	cpi	r24, 0x08	; 8
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <GPIO_writePin+0x1c>
     ec4:	d5 c0       	rjmp	.+426    	; 0x1070 <GPIO_writePin+0x1c6>
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	84 30       	cpi	r24, 0x04	; 4
     eca:	08 f0       	brcs	.+2      	; 0xece <GPIO_writePin+0x24>
     ecc:	d1 c0       	rjmp	.+418    	; 0x1070 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	3d 83       	std	Y+5, r19	; 0x05
     ed6:	2c 83       	std	Y+4, r18	; 0x04
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	9d 81       	ldd	r25, Y+5	; 0x05
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	91 05       	cpc	r25, r1
     ee0:	09 f4       	brne	.+2      	; 0xee4 <GPIO_writePin+0x3a>
     ee2:	43 c0       	rjmp	.+134    	; 0xf6a <GPIO_writePin+0xc0>
     ee4:	2c 81       	ldd	r18, Y+4	; 0x04
     ee6:	3d 81       	ldd	r19, Y+5	; 0x05
     ee8:	22 30       	cpi	r18, 0x02	; 2
     eea:	31 05       	cpc	r19, r1
     eec:	2c f4       	brge	.+10     	; 0xef8 <GPIO_writePin+0x4e>
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	9d 81       	ldd	r25, Y+5	; 0x05
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	71 f0       	breq	.+28     	; 0xf12 <GPIO_writePin+0x68>
     ef6:	bc c0       	rjmp	.+376    	; 0x1070 <GPIO_writePin+0x1c6>
     ef8:	2c 81       	ldd	r18, Y+4	; 0x04
     efa:	3d 81       	ldd	r19, Y+5	; 0x05
     efc:	22 30       	cpi	r18, 0x02	; 2
     efe:	31 05       	cpc	r19, r1
     f00:	09 f4       	brne	.+2      	; 0xf04 <GPIO_writePin+0x5a>
     f02:	5f c0       	rjmp	.+190    	; 0xfc2 <GPIO_writePin+0x118>
     f04:	8c 81       	ldd	r24, Y+4	; 0x04
     f06:	9d 81       	ldd	r25, Y+5	; 0x05
     f08:	83 30       	cpi	r24, 0x03	; 3
     f0a:	91 05       	cpc	r25, r1
     f0c:	09 f4       	brne	.+2      	; 0xf10 <GPIO_writePin+0x66>
     f0e:	85 c0       	rjmp	.+266    	; 0x101a <GPIO_writePin+0x170>
     f10:	af c0       	rjmp	.+350    	; 0x1070 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	a1 f4       	brne	.+40     	; 0xf40 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     f18:	ab e3       	ldi	r26, 0x3B	; 59
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	eb e3       	ldi	r30, 0x3B	; 59
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	48 2f       	mov	r20, r24
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 2e       	mov	r0, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <GPIO_writePin+0x8c>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	0a 94       	dec	r0
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <GPIO_writePin+0x88>
     f3a:	84 2b       	or	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	98 c0       	rjmp	.+304    	; 0x1070 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     f40:	ab e3       	ldi	r26, 0x3B	; 59
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	eb e3       	ldi	r30, 0x3B	; 59
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <GPIO_writePin+0xb4>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <GPIO_writePin+0xb0>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	83 c0       	rjmp	.+262    	; 0x1070 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	a1 f4       	brne	.+40     	; 0xf98 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     f70:	a8 e3       	ldi	r26, 0x38	; 56
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e8 e3       	ldi	r30, 0x38	; 56
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <GPIO_writePin+0xe4>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <GPIO_writePin+0xe0>
     f92:	84 2b       	or	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	6c c0       	rjmp	.+216    	; 0x1070 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     f98:	a8 e3       	ldi	r26, 0x38	; 56
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e8 e3       	ldi	r30, 0x38	; 56
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <GPIO_writePin+0x10c>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <GPIO_writePin+0x108>
     fba:	80 95       	com	r24
     fbc:	84 23       	and	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	57 c0       	rjmp	.+174    	; 0x1070 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	a1 f4       	brne	.+40     	; 0xff0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     fc8:	a5 e3       	ldi	r26, 0x35	; 53
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e5 e3       	ldi	r30, 0x35	; 53
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <GPIO_writePin+0x13c>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <GPIO_writePin+0x138>
     fea:	84 2b       	or	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	40 c0       	rjmp	.+128    	; 0x1070 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     ff0:	a5 e3       	ldi	r26, 0x35	; 53
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e5 e3       	ldi	r30, 0x35	; 53
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <GPIO_writePin+0x164>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <GPIO_writePin+0x160>
    1012:	80 95       	com	r24
    1014:	84 23       	and	r24, r20
    1016:	8c 93       	st	X, r24
    1018:	2b c0       	rjmp	.+86     	; 0x1070 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	a1 f4       	brne	.+40     	; 0x1048 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1020:	a2 e3       	ldi	r26, 0x32	; 50
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e2 e3       	ldi	r30, 0x32	; 50
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <GPIO_writePin+0x194>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <GPIO_writePin+0x190>
    1042:	84 2b       	or	r24, r20
    1044:	8c 93       	st	X, r24
    1046:	14 c0       	rjmp	.+40     	; 0x1070 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1048:	a2 e3       	ldi	r26, 0x32	; 50
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e2 e3       	ldi	r30, 0x32	; 50
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 2e       	mov	r0, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <GPIO_writePin+0x1bc>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <GPIO_writePin+0x1b8>
    106a:	80 95       	com	r24
    106c:	84 23       	and	r24, r20
    106e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	00 d0       	rcall	.+0      	; 0x1086 <GPIO_readPin+0x6>
    1086:	00 d0       	rcall	.+0      	; 0x1088 <GPIO_readPin+0x8>
    1088:	0f 92       	push	r0
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	8a 83       	std	Y+2, r24	; 0x02
    1090:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1092:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	88 30       	cpi	r24, 0x08	; 8
    1098:	08 f0       	brcs	.+2      	; 0x109c <GPIO_readPin+0x1c>
    109a:	84 c0       	rjmp	.+264    	; 0x11a4 <GPIO_readPin+0x124>
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	84 30       	cpi	r24, 0x04	; 4
    10a0:	08 f0       	brcs	.+2      	; 0x10a4 <GPIO_readPin+0x24>
    10a2:	80 c0       	rjmp	.+256    	; 0x11a4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	3d 83       	std	Y+5, r19	; 0x05
    10ac:	2c 83       	std	Y+4, r18	; 0x04
    10ae:	4c 81       	ldd	r20, Y+4	; 0x04
    10b0:	5d 81       	ldd	r21, Y+5	; 0x05
    10b2:	41 30       	cpi	r20, 0x01	; 1
    10b4:	51 05       	cpc	r21, r1
    10b6:	79 f1       	breq	.+94     	; 0x1116 <GPIO_readPin+0x96>
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	9d 81       	ldd	r25, Y+5	; 0x05
    10bc:	82 30       	cpi	r24, 0x02	; 2
    10be:	91 05       	cpc	r25, r1
    10c0:	34 f4       	brge	.+12     	; 0x10ce <GPIO_readPin+0x4e>
    10c2:	2c 81       	ldd	r18, Y+4	; 0x04
    10c4:	3d 81       	ldd	r19, Y+5	; 0x05
    10c6:	21 15       	cp	r18, r1
    10c8:	31 05       	cpc	r19, r1
    10ca:	69 f0       	breq	.+26     	; 0x10e6 <GPIO_readPin+0x66>
    10cc:	6b c0       	rjmp	.+214    	; 0x11a4 <GPIO_readPin+0x124>
    10ce:	4c 81       	ldd	r20, Y+4	; 0x04
    10d0:	5d 81       	ldd	r21, Y+5	; 0x05
    10d2:	42 30       	cpi	r20, 0x02	; 2
    10d4:	51 05       	cpc	r21, r1
    10d6:	b9 f1       	breq	.+110    	; 0x1146 <GPIO_readPin+0xc6>
    10d8:	8c 81       	ldd	r24, Y+4	; 0x04
    10da:	9d 81       	ldd	r25, Y+5	; 0x05
    10dc:	83 30       	cpi	r24, 0x03	; 3
    10de:	91 05       	cpc	r25, r1
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <GPIO_readPin+0x64>
    10e2:	49 c0       	rjmp	.+146    	; 0x1176 <GPIO_readPin+0xf6>
    10e4:	5f c0       	rjmp	.+190    	; 0x11a4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    10e6:	e9 e3       	ldi	r30, 0x39	; 57
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	88 2f       	mov	r24, r24
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	a9 01       	movw	r20, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <GPIO_readPin+0x7e>
    10fa:	55 95       	asr	r21
    10fc:	47 95       	ror	r20
    10fe:	8a 95       	dec	r24
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <GPIO_readPin+0x7a>
    1102:	ca 01       	movw	r24, r20
    1104:	81 70       	andi	r24, 0x01	; 1
    1106:	90 70       	andi	r25, 0x00	; 0
    1108:	88 23       	and	r24, r24
    110a:	19 f0       	breq	.+6      	; 0x1112 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	49 c0       	rjmp	.+146    	; 0x11a4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1112:	19 82       	std	Y+1, r1	; 0x01
    1114:	47 c0       	rjmp	.+142    	; 0x11a4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1116:	e6 e3       	ldi	r30, 0x36	; 54
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	88 2f       	mov	r24, r24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	a9 01       	movw	r20, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <GPIO_readPin+0xae>
    112a:	55 95       	asr	r21
    112c:	47 95       	ror	r20
    112e:	8a 95       	dec	r24
    1130:	e2 f7       	brpl	.-8      	; 0x112a <GPIO_readPin+0xaa>
    1132:	ca 01       	movw	r24, r20
    1134:	81 70       	andi	r24, 0x01	; 1
    1136:	90 70       	andi	r25, 0x00	; 0
    1138:	88 23       	and	r24, r24
    113a:	19 f0       	breq	.+6      	; 0x1142 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	31 c0       	rjmp	.+98     	; 0x11a4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1142:	19 82       	std	Y+1, r1	; 0x01
    1144:	2f c0       	rjmp	.+94     	; 0x11a4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1146:	e3 e3       	ldi	r30, 0x33	; 51
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	88 2f       	mov	r24, r24
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a9 01       	movw	r20, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <GPIO_readPin+0xde>
    115a:	55 95       	asr	r21
    115c:	47 95       	ror	r20
    115e:	8a 95       	dec	r24
    1160:	e2 f7       	brpl	.-8      	; 0x115a <GPIO_readPin+0xda>
    1162:	ca 01       	movw	r24, r20
    1164:	81 70       	andi	r24, 0x01	; 1
    1166:	90 70       	andi	r25, 0x00	; 0
    1168:	88 23       	and	r24, r24
    116a:	19 f0       	breq	.+6      	; 0x1172 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	19 c0       	rjmp	.+50     	; 0x11a4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1172:	19 82       	std	Y+1, r1	; 0x01
    1174:	17 c0       	rjmp	.+46     	; 0x11a4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1176:	e0 e3       	ldi	r30, 0x30	; 48
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	88 2f       	mov	r24, r24
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	a9 01       	movw	r20, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <GPIO_readPin+0x10e>
    118a:	55 95       	asr	r21
    118c:	47 95       	ror	r20
    118e:	8a 95       	dec	r24
    1190:	e2 f7       	brpl	.-8      	; 0x118a <GPIO_readPin+0x10a>
    1192:	ca 01       	movw	r24, r20
    1194:	81 70       	andi	r24, 0x01	; 1
    1196:	90 70       	andi	r25, 0x00	; 0
    1198:	88 23       	and	r24, r24
    119a:	19 f0       	breq	.+6      	; 0x11a2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11a2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <GPIO_setupPortDirection+0x6>
    11bc:	00 d0       	rcall	.+0      	; 0x11be <GPIO_setupPortDirection+0x8>
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	84 30       	cpi	r24, 0x04	; 4
    11ca:	90 f5       	brcc	.+100    	; 0x1230 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	3c 83       	std	Y+4, r19	; 0x04
    11d4:	2b 83       	std	Y+3, r18	; 0x03
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	91 05       	cpc	r25, r1
    11de:	d1 f0       	breq	.+52     	; 0x1214 <GPIO_setupPortDirection+0x5e>
    11e0:	2b 81       	ldd	r18, Y+3	; 0x03
    11e2:	3c 81       	ldd	r19, Y+4	; 0x04
    11e4:	22 30       	cpi	r18, 0x02	; 2
    11e6:	31 05       	cpc	r19, r1
    11e8:	2c f4       	brge	.+10     	; 0x11f4 <GPIO_setupPortDirection+0x3e>
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	9c 81       	ldd	r25, Y+4	; 0x04
    11ee:	00 97       	sbiw	r24, 0x00	; 0
    11f0:	61 f0       	breq	.+24     	; 0x120a <GPIO_setupPortDirection+0x54>
    11f2:	1e c0       	rjmp	.+60     	; 0x1230 <GPIO_setupPortDirection+0x7a>
    11f4:	2b 81       	ldd	r18, Y+3	; 0x03
    11f6:	3c 81       	ldd	r19, Y+4	; 0x04
    11f8:	22 30       	cpi	r18, 0x02	; 2
    11fa:	31 05       	cpc	r19, r1
    11fc:	81 f0       	breq	.+32     	; 0x121e <GPIO_setupPortDirection+0x68>
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	9c 81       	ldd	r25, Y+4	; 0x04
    1202:	83 30       	cpi	r24, 0x03	; 3
    1204:	91 05       	cpc	r25, r1
    1206:	81 f0       	breq	.+32     	; 0x1228 <GPIO_setupPortDirection+0x72>
    1208:	13 c0       	rjmp	.+38     	; 0x1230 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    120a:	ea e3       	ldi	r30, 0x3A	; 58
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	80 83       	st	Z, r24
    1212:	0e c0       	rjmp	.+28     	; 0x1230 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1214:	e7 e3       	ldi	r30, 0x37	; 55
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	80 83       	st	Z, r24
    121c:	09 c0       	rjmp	.+18     	; 0x1230 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    121e:	e4 e3       	ldi	r30, 0x34	; 52
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	80 83       	st	Z, r24
    1226:	04 c0       	rjmp	.+8      	; 0x1230 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1228:	e1 e3       	ldi	r30, 0x31	; 49
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <GPIO_writePort+0x6>
    1244:	00 d0       	rcall	.+0      	; 0x1246 <GPIO_writePort+0x8>
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	84 30       	cpi	r24, 0x04	; 4
    1252:	90 f5       	brcc	.+100    	; 0x12b8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	3c 83       	std	Y+4, r19	; 0x04
    125c:	2b 83       	std	Y+3, r18	; 0x03
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	91 05       	cpc	r25, r1
    1266:	d1 f0       	breq	.+52     	; 0x129c <GPIO_writePort+0x5e>
    1268:	2b 81       	ldd	r18, Y+3	; 0x03
    126a:	3c 81       	ldd	r19, Y+4	; 0x04
    126c:	22 30       	cpi	r18, 0x02	; 2
    126e:	31 05       	cpc	r19, r1
    1270:	2c f4       	brge	.+10     	; 0x127c <GPIO_writePort+0x3e>
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	61 f0       	breq	.+24     	; 0x1292 <GPIO_writePort+0x54>
    127a:	1e c0       	rjmp	.+60     	; 0x12b8 <GPIO_writePort+0x7a>
    127c:	2b 81       	ldd	r18, Y+3	; 0x03
    127e:	3c 81       	ldd	r19, Y+4	; 0x04
    1280:	22 30       	cpi	r18, 0x02	; 2
    1282:	31 05       	cpc	r19, r1
    1284:	81 f0       	breq	.+32     	; 0x12a6 <GPIO_writePort+0x68>
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	9c 81       	ldd	r25, Y+4	; 0x04
    128a:	83 30       	cpi	r24, 0x03	; 3
    128c:	91 05       	cpc	r25, r1
    128e:	81 f0       	breq	.+32     	; 0x12b0 <GPIO_writePort+0x72>
    1290:	13 c0       	rjmp	.+38     	; 0x12b8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1292:	eb e3       	ldi	r30, 0x3B	; 59
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	80 83       	st	Z, r24
    129a:	0e c0       	rjmp	.+28     	; 0x12b8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    129c:	e8 e3       	ldi	r30, 0x38	; 56
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	80 83       	st	Z, r24
    12a4:	09 c0       	rjmp	.+18     	; 0x12b8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    12a6:	e5 e3       	ldi	r30, 0x35	; 53
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	80 83       	st	Z, r24
    12ae:	04 c0       	rjmp	.+8      	; 0x12b8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    12b0:	e2 e3       	ldi	r30, 0x32	; 50
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	80 83       	st	Z, r24
			break;
		}
	}
}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <GPIO_readPort+0x6>
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <GPIO_readPort+0x8>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    12d4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	84 30       	cpi	r24, 0x04	; 4
    12da:	90 f5       	brcc	.+100    	; 0x1340 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	3c 83       	std	Y+4, r19	; 0x04
    12e4:	2b 83       	std	Y+3, r18	; 0x03
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	91 05       	cpc	r25, r1
    12ee:	d1 f0       	breq	.+52     	; 0x1324 <GPIO_readPort+0x5e>
    12f0:	2b 81       	ldd	r18, Y+3	; 0x03
    12f2:	3c 81       	ldd	r19, Y+4	; 0x04
    12f4:	22 30       	cpi	r18, 0x02	; 2
    12f6:	31 05       	cpc	r19, r1
    12f8:	2c f4       	brge	.+10     	; 0x1304 <GPIO_readPort+0x3e>
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	61 f0       	breq	.+24     	; 0x131a <GPIO_readPort+0x54>
    1302:	1e c0       	rjmp	.+60     	; 0x1340 <GPIO_readPort+0x7a>
    1304:	2b 81       	ldd	r18, Y+3	; 0x03
    1306:	3c 81       	ldd	r19, Y+4	; 0x04
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	81 f0       	breq	.+32     	; 0x132e <GPIO_readPort+0x68>
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	83 30       	cpi	r24, 0x03	; 3
    1314:	91 05       	cpc	r25, r1
    1316:	81 f0       	breq	.+32     	; 0x1338 <GPIO_readPort+0x72>
    1318:	13 c0       	rjmp	.+38     	; 0x1340 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    131a:	e9 e3       	ldi	r30, 0x39	; 57
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	89 83       	std	Y+1, r24	; 0x01
    1322:	0e c0       	rjmp	.+28     	; 0x1340 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1324:	e6 e3       	ldi	r30, 0x36	; 54
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	09 c0       	rjmp	.+18     	; 0x1340 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    132e:	e3 e3       	ldi	r30, 0x33	; 51
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	04 c0       	rjmp	.+8      	; 0x1340 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1338:	e0 e3       	ldi	r30, 0x30	; 48
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1340:	89 81       	ldd	r24, Y+1	; 0x01
}
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	00 d0       	rcall	.+0      	; 0x1356 <KEYPAD_getPressedKey+0x6>
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	40 e0       	ldi	r20, 0x00	; 0
    1360:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	61 e0       	ldi	r22, 0x01	; 1
    1368:	40 e0       	ldi	r20, 0x00	; 0
    136a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	62 e0       	ldi	r22, 0x02	; 2
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	63 e0       	ldi	r22, 0x03	; 3
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	64 e0       	ldi	r22, 0x04	; 4
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	65 e0       	ldi	r22, 0x05	; 5
    1390:	40 e0       	ldi	r20, 0x00	; 0
    1392:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	66 e0       	ldi	r22, 0x06	; 6
    139a:	40 e0       	ldi	r20, 0x00	; 0
    139c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    13a0:	19 82       	std	Y+1, r1	; 0x01
    13a2:	36 c0       	rjmp	.+108    	; 0x1410 <KEYPAD_getPressedKey+0xc0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	69 81       	ldd	r22, Y+1	; 0x01
    13a8:	41 e0       	ldi	r20, 0x01	; 1
    13aa:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	69 81       	ldd	r22, Y+1	; 0x01
    13b2:	40 e0       	ldi	r20, 0x00	; 0
    13b4:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    13b8:	1a 82       	std	Y+2, r1	; 0x02
    13ba:	1f c0       	rjmp	.+62     	; 0x13fa <KEYPAD_getPressedKey+0xaa>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	98 2f       	mov	r25, r24
    13c0:	9c 5f       	subi	r25, 0xFC	; 252
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	69 2f       	mov	r22, r25
    13c6:	0e 94 40 08 	call	0x1080	; 0x1080 <GPIO_readPin>
    13ca:	88 23       	and	r24, r24
    13cc:	99 f4       	brne	.+38     	; 0x13f4 <KEYPAD_getPressedKey+0xa4>
				{
					#if (KEYPAD_NUM_COLS == 3)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	c9 01       	movw	r24, r18
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	82 0f       	add	r24, r18
    13dc:	93 1f       	adc	r25, r19
    13de:	98 2f       	mov	r25, r24
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	89 0f       	add	r24, r25
    13e4:	8f 5f       	subi	r24, 0xFF	; 255
    13e6:	0e 94 0c 0a 	call	0x1418	; 0x1418 <KEYPAD_4x3_adjustKeyNumber>
#if 0
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
#endif
		}
	}	
}
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	8f 5f       	subi	r24, 0xFF	; 255
    13f8:	8a 83       	std	Y+2, r24	; 0x02
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	83 30       	cpi	r24, 0x03	; 3
    13fe:	f0 f2       	brcs	.-68     	; 0x13bc <KEYPAD_getPressedKey+0x6c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row, LOGIC_HIGH);
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	69 81       	ldd	r22, Y+1	; 0x01
    1404:	41 e0       	ldi	r20, 0x01	; 1
    1406:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_writePin>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	8f 5f       	subi	r24, 0xFF	; 255
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	84 30       	cpi	r24, 0x04	; 4
    1414:	38 f2       	brcs	.-114    	; 0x13a4 <KEYPAD_getPressedKey+0x54>
    1416:	c4 cf       	rjmp	.-120    	; 0x13a0 <KEYPAD_getPressedKey+0x50>

00001418 <KEYPAD_4x3_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x3 shape
 */
static uint8 KEYPAD_4x3_adjustKeyNumber(uint8 button_number)
{
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	00 d0       	rcall	.+0      	; 0x141e <KEYPAD_4x3_adjustKeyNumber+0x6>
    141e:	00 d0       	rcall	.+0      	; 0x1420 <KEYPAD_4x3_adjustKeyNumber+0x8>
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1426:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	3c 83       	std	Y+4, r19	; 0x04
    1430:	2b 83       	std	Y+3, r18	; 0x03
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	8a 30       	cpi	r24, 0x0A	; 10
    1438:	91 05       	cpc	r25, r1
    143a:	81 f0       	breq	.+32     	; 0x145c <KEYPAD_4x3_adjustKeyNumber+0x44>
    143c:	2b 81       	ldd	r18, Y+3	; 0x03
    143e:	3c 81       	ldd	r19, Y+4	; 0x04
    1440:	2a 30       	cpi	r18, 0x0A	; 10
    1442:	31 05       	cpc	r19, r1
    1444:	9c f0       	brlt	.+38     	; 0x146c <KEYPAD_4x3_adjustKeyNumber+0x54>
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	8b 30       	cpi	r24, 0x0B	; 11
    144c:	91 05       	cpc	r25, r1
    144e:	49 f0       	breq	.+18     	; 0x1462 <KEYPAD_4x3_adjustKeyNumber+0x4a>
    1450:	2b 81       	ldd	r18, Y+3	; 0x03
    1452:	3c 81       	ldd	r19, Y+4	; 0x04
    1454:	2c 30       	cpi	r18, 0x0C	; 12
    1456:	31 05       	cpc	r19, r1
    1458:	31 f0       	breq	.+12     	; 0x1466 <KEYPAD_4x3_adjustKeyNumber+0x4e>
    145a:	08 c0       	rjmp	.+16     	; 0x146c <KEYPAD_4x3_adjustKeyNumber+0x54>
	{
		case 10: keypad_button = '*'; // ASCII Code of *
    145c:	8a e2       	ldi	r24, 0x2A	; 42
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	07 c0       	rjmp	.+14     	; 0x1470 <KEYPAD_4x3_adjustKeyNumber+0x58>
				 break;
		case 11: keypad_button = 0;
    1462:	19 82       	std	Y+1, r1	; 0x01
    1464:	05 c0       	rjmp	.+10     	; 0x1470 <KEYPAD_4x3_adjustKeyNumber+0x58>
				 break;		
		case 12: keypad_button = '#'; // ASCII Code of #
    1466:	83 e2       	ldi	r24, 0x23	; 35
    1468:	89 83       	std	Y+1, r24	; 0x01
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <KEYPAD_4x3_adjustKeyNumber+0x58>
				 break;
		default: keypad_button = button_number;
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1470:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	2e 97       	sbiw	r28, 0x0e	; 14
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	61 e0       	ldi	r22, 0x01	; 1
    1498:	41 e0       	ldi	r20, 0x01	; 1
    149a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	62 e0       	ldi	r22, 0x02	; 2
    14a2:	41 e0       	ldi	r20, 0x01	; 1
    14a4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <GPIO_setupPinDirection>
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	a0 ea       	ldi	r26, 0xA0	; 160
    14ae:	b1 e4       	ldi	r27, 0x41	; 65
    14b0:	8b 87       	std	Y+11, r24	; 0x0b
    14b2:	9c 87       	std	Y+12, r25	; 0x0c
    14b4:	ad 87       	std	Y+13, r26	; 0x0d
    14b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    14bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    14be:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	4a e7       	ldi	r20, 0x7A	; 122
    14c6:	53 e4       	ldi	r21, 0x43	; 67
    14c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	8f 83       	std	Y+7, r24	; 0x07
    14d2:	98 87       	std	Y+8, r25	; 0x08
    14d4:	a9 87       	std	Y+9, r26	; 0x09
    14d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14d8:	6f 81       	ldd	r22, Y+7	; 0x07
    14da:	78 85       	ldd	r23, Y+8	; 0x08
    14dc:	89 85       	ldd	r24, Y+9	; 0x09
    14de:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 e8       	ldi	r20, 0x80	; 128
    14e6:	5f e3       	ldi	r21, 0x3F	; 63
    14e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ec:	88 23       	and	r24, r24
    14ee:	2c f4       	brge	.+10     	; 0x14fa <LCD_init+0x7a>
		__ticks = 1;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	9e 83       	std	Y+6, r25	; 0x06
    14f6:	8d 83       	std	Y+5, r24	; 0x05
    14f8:	3f c0       	rjmp	.+126    	; 0x1578 <LCD_init+0xf8>
	else if (__tmp > 65535)
    14fa:	6f 81       	ldd	r22, Y+7	; 0x07
    14fc:	78 85       	ldd	r23, Y+8	; 0x08
    14fe:	89 85       	ldd	r24, Y+9	; 0x09
    1500:	9a 85       	ldd	r25, Y+10	; 0x0a
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	3f ef       	ldi	r19, 0xFF	; 255
    1506:	4f e7       	ldi	r20, 0x7F	; 127
    1508:	57 e4       	ldi	r21, 0x47	; 71
    150a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    150e:	18 16       	cp	r1, r24
    1510:	4c f5       	brge	.+82     	; 0x1564 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1512:	6b 85       	ldd	r22, Y+11	; 0x0b
    1514:	7c 85       	ldd	r23, Y+12	; 0x0c
    1516:	8d 85       	ldd	r24, Y+13	; 0x0d
    1518:	9e 85       	ldd	r25, Y+14	; 0x0e
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e2       	ldi	r20, 0x20	; 32
    1520:	51 e4       	ldi	r21, 0x41	; 65
    1522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	bc 01       	movw	r22, r24
    152c:	cd 01       	movw	r24, r26
    152e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	9e 83       	std	Y+6, r25	; 0x06
    1538:	8d 83       	std	Y+5, r24	; 0x05
    153a:	0f c0       	rjmp	.+30     	; 0x155a <LCD_init+0xda>
    153c:	89 e1       	ldi	r24, 0x19	; 25
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	9c 83       	std	Y+4, r25	; 0x04
    1542:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	9c 81       	ldd	r25, Y+4	; 0x04
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	f1 f7       	brne	.-4      	; 0x1548 <LCD_init+0xc8>
    154c:	9c 83       	std	Y+4, r25	; 0x04
    154e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1550:	8d 81       	ldd	r24, Y+5	; 0x05
    1552:	9e 81       	ldd	r25, Y+6	; 0x06
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	9e 83       	std	Y+6, r25	; 0x06
    1558:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155a:	8d 81       	ldd	r24, Y+5	; 0x05
    155c:	9e 81       	ldd	r25, Y+6	; 0x06
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	69 f7       	brne	.-38     	; 0x153c <LCD_init+0xbc>
    1562:	14 c0       	rjmp	.+40     	; 0x158c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1564:	6f 81       	ldd	r22, Y+7	; 0x07
    1566:	78 85       	ldd	r23, Y+8	; 0x08
    1568:	89 85       	ldd	r24, Y+9	; 0x09
    156a:	9a 85       	ldd	r25, Y+10	; 0x0a
    156c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	9e 83       	std	Y+6, r25	; 0x06
    1576:	8d 83       	std	Y+5, r24	; 0x05
    1578:	8d 81       	ldd	r24, Y+5	; 0x05
    157a:	9e 81       	ldd	r25, Y+6	; 0x06
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	9a 81       	ldd	r25, Y+2	; 0x02
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	f1 f7       	brne	.-4      	; 0x1584 <LCD_init+0x104>
    1588:	9a 83       	std	Y+2, r25	; 0x02
    158a:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    158c:	82 e0       	ldi	r24, 0x02	; 2
    158e:	6f ef       	ldi	r22, 0xFF	; 255
    1590:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1594:	88 e3       	ldi	r24, 0x38	; 56
    1596:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    159a:	8c e0       	ldi	r24, 0x0C	; 12
    159c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <LCD_sendCommand>
}
    15a6:	2e 96       	adiw	r28, 0x0e	; 14
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	e9 97       	sbiw	r28, 0x39	; 57
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	61 e0       	ldi	r22, 0x01	; 1
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_writePin>
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a0 e8       	ldi	r26, 0x80	; 128
    15de:	bf e3       	ldi	r27, 0x3F	; 63
    15e0:	8d ab       	std	Y+53, r24	; 0x35
    15e2:	9e ab       	std	Y+54, r25	; 0x36
    15e4:	af ab       	std	Y+55, r26	; 0x37
    15e6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e8:	6d a9       	ldd	r22, Y+53	; 0x35
    15ea:	7e a9       	ldd	r23, Y+54	; 0x36
    15ec:	8f a9       	ldd	r24, Y+55	; 0x37
    15ee:	98 ad       	ldd	r25, Y+56	; 0x38
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	4a e7       	ldi	r20, 0x7A	; 122
    15f6:	53 e4       	ldi	r21, 0x43	; 67
    15f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	89 ab       	std	Y+49, r24	; 0x31
    1602:	9a ab       	std	Y+50, r25	; 0x32
    1604:	ab ab       	std	Y+51, r26	; 0x33
    1606:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1608:	69 a9       	ldd	r22, Y+49	; 0x31
    160a:	7a a9       	ldd	r23, Y+50	; 0x32
    160c:	8b a9       	ldd	r24, Y+51	; 0x33
    160e:	9c a9       	ldd	r25, Y+52	; 0x34
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e8       	ldi	r20, 0x80	; 128
    1616:	5f e3       	ldi	r21, 0x3F	; 63
    1618:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    161c:	88 23       	and	r24, r24
    161e:	2c f4       	brge	.+10     	; 0x162a <LCD_sendCommand+0x72>
		__ticks = 1;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	98 ab       	std	Y+48, r25	; 0x30
    1626:	8f a7       	std	Y+47, r24	; 0x2f
    1628:	3f c0       	rjmp	.+126    	; 0x16a8 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    162a:	69 a9       	ldd	r22, Y+49	; 0x31
    162c:	7a a9       	ldd	r23, Y+50	; 0x32
    162e:	8b a9       	ldd	r24, Y+51	; 0x33
    1630:	9c a9       	ldd	r25, Y+52	; 0x34
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	3f ef       	ldi	r19, 0xFF	; 255
    1636:	4f e7       	ldi	r20, 0x7F	; 127
    1638:	57 e4       	ldi	r21, 0x47	; 71
    163a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    163e:	18 16       	cp	r1, r24
    1640:	4c f5       	brge	.+82     	; 0x1694 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1642:	6d a9       	ldd	r22, Y+53	; 0x35
    1644:	7e a9       	ldd	r23, Y+54	; 0x36
    1646:	8f a9       	ldd	r24, Y+55	; 0x37
    1648:	98 ad       	ldd	r25, Y+56	; 0x38
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e2       	ldi	r20, 0x20	; 32
    1650:	51 e4       	ldi	r21, 0x41	; 65
    1652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	bc 01       	movw	r22, r24
    165c:	cd 01       	movw	r24, r26
    165e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	98 ab       	std	Y+48, r25	; 0x30
    1668:	8f a7       	std	Y+47, r24	; 0x2f
    166a:	0f c0       	rjmp	.+30     	; 0x168a <LCD_sendCommand+0xd2>
    166c:	89 e1       	ldi	r24, 0x19	; 25
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	9e a7       	std	Y+46, r25	; 0x2e
    1672:	8d a7       	std	Y+45, r24	; 0x2d
    1674:	8d a5       	ldd	r24, Y+45	; 0x2d
    1676:	9e a5       	ldd	r25, Y+46	; 0x2e
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	f1 f7       	brne	.-4      	; 0x1678 <LCD_sendCommand+0xc0>
    167c:	9e a7       	std	Y+46, r25	; 0x2e
    167e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1680:	8f a5       	ldd	r24, Y+47	; 0x2f
    1682:	98 a9       	ldd	r25, Y+48	; 0x30
    1684:	01 97       	sbiw	r24, 0x01	; 1
    1686:	98 ab       	std	Y+48, r25	; 0x30
    1688:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    168a:	8f a5       	ldd	r24, Y+47	; 0x2f
    168c:	98 a9       	ldd	r25, Y+48	; 0x30
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	69 f7       	brne	.-38     	; 0x166c <LCD_sendCommand+0xb4>
    1692:	14 c0       	rjmp	.+40     	; 0x16bc <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1694:	69 a9       	ldd	r22, Y+49	; 0x31
    1696:	7a a9       	ldd	r23, Y+50	; 0x32
    1698:	8b a9       	ldd	r24, Y+51	; 0x33
    169a:	9c a9       	ldd	r25, Y+52	; 0x34
    169c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	98 ab       	std	Y+48, r25	; 0x30
    16a6:	8f a7       	std	Y+47, r24	; 0x2f
    16a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16aa:	98 a9       	ldd	r25, Y+48	; 0x30
    16ac:	9c a7       	std	Y+44, r25	; 0x2c
    16ae:	8b a7       	std	Y+43, r24	; 0x2b
    16b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    16b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <LCD_sendCommand+0xfc>
    16b8:	9c a7       	std	Y+44, r25	; 0x2c
    16ba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	62 e0       	ldi	r22, 0x02	; 2
    16c0:	41 e0       	ldi	r20, 0x01	; 1
    16c2:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_writePin>
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	a0 e8       	ldi	r26, 0x80	; 128
    16cc:	bf e3       	ldi	r27, 0x3F	; 63
    16ce:	8f a3       	std	Y+39, r24	; 0x27
    16d0:	98 a7       	std	Y+40, r25	; 0x28
    16d2:	a9 a7       	std	Y+41, r26	; 0x29
    16d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d6:	6f a1       	ldd	r22, Y+39	; 0x27
    16d8:	78 a5       	ldd	r23, Y+40	; 0x28
    16da:	89 a5       	ldd	r24, Y+41	; 0x29
    16dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	4a e7       	ldi	r20, 0x7A	; 122
    16e4:	53 e4       	ldi	r21, 0x43	; 67
    16e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	8b a3       	std	Y+35, r24	; 0x23
    16f0:	9c a3       	std	Y+36, r25	; 0x24
    16f2:	ad a3       	std	Y+37, r26	; 0x25
    16f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16f6:	6b a1       	ldd	r22, Y+35	; 0x23
    16f8:	7c a1       	ldd	r23, Y+36	; 0x24
    16fa:	8d a1       	ldd	r24, Y+37	; 0x25
    16fc:	9e a1       	ldd	r25, Y+38	; 0x26
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e8       	ldi	r20, 0x80	; 128
    1704:	5f e3       	ldi	r21, 0x3F	; 63
    1706:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    170a:	88 23       	and	r24, r24
    170c:	2c f4       	brge	.+10     	; 0x1718 <LCD_sendCommand+0x160>
		__ticks = 1;
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	9a a3       	std	Y+34, r25	; 0x22
    1714:	89 a3       	std	Y+33, r24	; 0x21
    1716:	3f c0       	rjmp	.+126    	; 0x1796 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1718:	6b a1       	ldd	r22, Y+35	; 0x23
    171a:	7c a1       	ldd	r23, Y+36	; 0x24
    171c:	8d a1       	ldd	r24, Y+37	; 0x25
    171e:	9e a1       	ldd	r25, Y+38	; 0x26
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	3f ef       	ldi	r19, 0xFF	; 255
    1724:	4f e7       	ldi	r20, 0x7F	; 127
    1726:	57 e4       	ldi	r21, 0x47	; 71
    1728:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    172c:	18 16       	cp	r1, r24
    172e:	4c f5       	brge	.+82     	; 0x1782 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1730:	6f a1       	ldd	r22, Y+39	; 0x27
    1732:	78 a5       	ldd	r23, Y+40	; 0x28
    1734:	89 a5       	ldd	r24, Y+41	; 0x29
    1736:	9a a5       	ldd	r25, Y+42	; 0x2a
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	40 e2       	ldi	r20, 0x20	; 32
    173e:	51 e4       	ldi	r21, 0x41	; 65
    1740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	bc 01       	movw	r22, r24
    174a:	cd 01       	movw	r24, r26
    174c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	9a a3       	std	Y+34, r25	; 0x22
    1756:	89 a3       	std	Y+33, r24	; 0x21
    1758:	0f c0       	rjmp	.+30     	; 0x1778 <LCD_sendCommand+0x1c0>
    175a:	89 e1       	ldi	r24, 0x19	; 25
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	98 a3       	std	Y+32, r25	; 0x20
    1760:	8f 8f       	std	Y+31, r24	; 0x1f
    1762:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1764:	98 a1       	ldd	r25, Y+32	; 0x20
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	f1 f7       	brne	.-4      	; 0x1766 <LCD_sendCommand+0x1ae>
    176a:	98 a3       	std	Y+32, r25	; 0x20
    176c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    176e:	89 a1       	ldd	r24, Y+33	; 0x21
    1770:	9a a1       	ldd	r25, Y+34	; 0x22
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	9a a3       	std	Y+34, r25	; 0x22
    1776:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1778:	89 a1       	ldd	r24, Y+33	; 0x21
    177a:	9a a1       	ldd	r25, Y+34	; 0x22
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	69 f7       	brne	.-38     	; 0x175a <LCD_sendCommand+0x1a2>
    1780:	14 c0       	rjmp	.+40     	; 0x17aa <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1782:	6b a1       	ldd	r22, Y+35	; 0x23
    1784:	7c a1       	ldd	r23, Y+36	; 0x24
    1786:	8d a1       	ldd	r24, Y+37	; 0x25
    1788:	9e a1       	ldd	r25, Y+38	; 0x26
    178a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	9a a3       	std	Y+34, r25	; 0x22
    1794:	89 a3       	std	Y+33, r24	; 0x21
    1796:	89 a1       	ldd	r24, Y+33	; 0x21
    1798:	9a a1       	ldd	r25, Y+34	; 0x22
    179a:	9e 8f       	std	Y+30, r25	; 0x1e
    179c:	8d 8f       	std	Y+29, r24	; 0x1d
    179e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <LCD_sendCommand+0x1ea>
    17a6:	9e 8f       	std	Y+30, r25	; 0x1e
    17a8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    17aa:	82 e0       	ldi	r24, 0x02	; 2
    17ac:	69 ad       	ldd	r22, Y+57	; 0x39
    17ae:	0e 94 1f 09 	call	0x123e	; 0x123e <GPIO_writePort>
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	a0 e8       	ldi	r26, 0x80	; 128
    17b8:	bf e3       	ldi	r27, 0x3F	; 63
    17ba:	89 8f       	std	Y+25, r24	; 0x19
    17bc:	9a 8f       	std	Y+26, r25	; 0x1a
    17be:	ab 8f       	std	Y+27, r26	; 0x1b
    17c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c2:	69 8d       	ldd	r22, Y+25	; 0x19
    17c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	4a e7       	ldi	r20, 0x7A	; 122
    17d0:	53 e4       	ldi	r21, 0x43	; 67
    17d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	8d 8b       	std	Y+21, r24	; 0x15
    17dc:	9e 8b       	std	Y+22, r25	; 0x16
    17de:	af 8b       	std	Y+23, r26	; 0x17
    17e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17e2:	6d 89       	ldd	r22, Y+21	; 0x15
    17e4:	7e 89       	ldd	r23, Y+22	; 0x16
    17e6:	8f 89       	ldd	r24, Y+23	; 0x17
    17e8:	98 8d       	ldd	r25, Y+24	; 0x18
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	40 e8       	ldi	r20, 0x80	; 128
    17f0:	5f e3       	ldi	r21, 0x3F	; 63
    17f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17f6:	88 23       	and	r24, r24
    17f8:	2c f4       	brge	.+10     	; 0x1804 <LCD_sendCommand+0x24c>
		__ticks = 1;
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	9c 8b       	std	Y+20, r25	; 0x14
    1800:	8b 8b       	std	Y+19, r24	; 0x13
    1802:	3f c0       	rjmp	.+126    	; 0x1882 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1804:	6d 89       	ldd	r22, Y+21	; 0x15
    1806:	7e 89       	ldd	r23, Y+22	; 0x16
    1808:	8f 89       	ldd	r24, Y+23	; 0x17
    180a:	98 8d       	ldd	r25, Y+24	; 0x18
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	3f ef       	ldi	r19, 0xFF	; 255
    1810:	4f e7       	ldi	r20, 0x7F	; 127
    1812:	57 e4       	ldi	r21, 0x47	; 71
    1814:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1818:	18 16       	cp	r1, r24
    181a:	4c f5       	brge	.+82     	; 0x186e <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181c:	69 8d       	ldd	r22, Y+25	; 0x19
    181e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1820:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1822:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	40 e2       	ldi	r20, 0x20	; 32
    182a:	51 e4       	ldi	r21, 0x41	; 65
    182c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	bc 01       	movw	r22, r24
    1836:	cd 01       	movw	r24, r26
    1838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	9c 8b       	std	Y+20, r25	; 0x14
    1842:	8b 8b       	std	Y+19, r24	; 0x13
    1844:	0f c0       	rjmp	.+30     	; 0x1864 <LCD_sendCommand+0x2ac>
    1846:	89 e1       	ldi	r24, 0x19	; 25
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	9a 8b       	std	Y+18, r25	; 0x12
    184c:	89 8b       	std	Y+17, r24	; 0x11
    184e:	89 89       	ldd	r24, Y+17	; 0x11
    1850:	9a 89       	ldd	r25, Y+18	; 0x12
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <LCD_sendCommand+0x29a>
    1856:	9a 8b       	std	Y+18, r25	; 0x12
    1858:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185a:	8b 89       	ldd	r24, Y+19	; 0x13
    185c:	9c 89       	ldd	r25, Y+20	; 0x14
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	9c 8b       	std	Y+20, r25	; 0x14
    1862:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1864:	8b 89       	ldd	r24, Y+19	; 0x13
    1866:	9c 89       	ldd	r25, Y+20	; 0x14
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	69 f7       	brne	.-38     	; 0x1846 <LCD_sendCommand+0x28e>
    186c:	14 c0       	rjmp	.+40     	; 0x1896 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186e:	6d 89       	ldd	r22, Y+21	; 0x15
    1870:	7e 89       	ldd	r23, Y+22	; 0x16
    1872:	8f 89       	ldd	r24, Y+23	; 0x17
    1874:	98 8d       	ldd	r25, Y+24	; 0x18
    1876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	9c 8b       	std	Y+20, r25	; 0x14
    1880:	8b 8b       	std	Y+19, r24	; 0x13
    1882:	8b 89       	ldd	r24, Y+19	; 0x13
    1884:	9c 89       	ldd	r25, Y+20	; 0x14
    1886:	98 8b       	std	Y+16, r25	; 0x10
    1888:	8f 87       	std	Y+15, r24	; 0x0f
    188a:	8f 85       	ldd	r24, Y+15	; 0x0f
    188c:	98 89       	ldd	r25, Y+16	; 0x10
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	f1 f7       	brne	.-4      	; 0x188e <LCD_sendCommand+0x2d6>
    1892:	98 8b       	std	Y+16, r25	; 0x10
    1894:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	62 e0       	ldi	r22, 0x02	; 2
    189a:	40 e0       	ldi	r20, 0x00	; 0
    189c:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_writePin>
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	a0 e8       	ldi	r26, 0x80	; 128
    18a6:	bf e3       	ldi	r27, 0x3F	; 63
    18a8:	8b 87       	std	Y+11, r24	; 0x0b
    18aa:	9c 87       	std	Y+12, r25	; 0x0c
    18ac:	ad 87       	std	Y+13, r26	; 0x0d
    18ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	4a e7       	ldi	r20, 0x7A	; 122
    18be:	53 e4       	ldi	r21, 0x43	; 67
    18c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	8f 83       	std	Y+7, r24	; 0x07
    18ca:	98 87       	std	Y+8, r25	; 0x08
    18cc:	a9 87       	std	Y+9, r26	; 0x09
    18ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18d0:	6f 81       	ldd	r22, Y+7	; 0x07
    18d2:	78 85       	ldd	r23, Y+8	; 0x08
    18d4:	89 85       	ldd	r24, Y+9	; 0x09
    18d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e8       	ldi	r20, 0x80	; 128
    18de:	5f e3       	ldi	r21, 0x3F	; 63
    18e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18e4:	88 23       	and	r24, r24
    18e6:	2c f4       	brge	.+10     	; 0x18f2 <LCD_sendCommand+0x33a>
		__ticks = 1;
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	9e 83       	std	Y+6, r25	; 0x06
    18ee:	8d 83       	std	Y+5, r24	; 0x05
    18f0:	3f c0       	rjmp	.+126    	; 0x1970 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    18f2:	6f 81       	ldd	r22, Y+7	; 0x07
    18f4:	78 85       	ldd	r23, Y+8	; 0x08
    18f6:	89 85       	ldd	r24, Y+9	; 0x09
    18f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	3f ef       	ldi	r19, 0xFF	; 255
    18fe:	4f e7       	ldi	r20, 0x7F	; 127
    1900:	57 e4       	ldi	r21, 0x47	; 71
    1902:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1906:	18 16       	cp	r1, r24
    1908:	4c f5       	brge	.+82     	; 0x195c <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190a:	6b 85       	ldd	r22, Y+11	; 0x0b
    190c:	7c 85       	ldd	r23, Y+12	; 0x0c
    190e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1910:	9e 85       	ldd	r25, Y+14	; 0x0e
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e2       	ldi	r20, 0x20	; 32
    1918:	51 e4       	ldi	r21, 0x41	; 65
    191a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	bc 01       	movw	r22, r24
    1924:	cd 01       	movw	r24, r26
    1926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	9e 83       	std	Y+6, r25	; 0x06
    1930:	8d 83       	std	Y+5, r24	; 0x05
    1932:	0f c0       	rjmp	.+30     	; 0x1952 <LCD_sendCommand+0x39a>
    1934:	89 e1       	ldi	r24, 0x19	; 25
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	9c 83       	std	Y+4, r25	; 0x04
    193a:	8b 83       	std	Y+3, r24	; 0x03
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	9c 81       	ldd	r25, Y+4	; 0x04
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	f1 f7       	brne	.-4      	; 0x1940 <LCD_sendCommand+0x388>
    1944:	9c 83       	std	Y+4, r25	; 0x04
    1946:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1948:	8d 81       	ldd	r24, Y+5	; 0x05
    194a:	9e 81       	ldd	r25, Y+6	; 0x06
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	9e 83       	std	Y+6, r25	; 0x06
    1950:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1952:	8d 81       	ldd	r24, Y+5	; 0x05
    1954:	9e 81       	ldd	r25, Y+6	; 0x06
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	69 f7       	brne	.-38     	; 0x1934 <LCD_sendCommand+0x37c>
    195a:	14 c0       	rjmp	.+40     	; 0x1984 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195c:	6f 81       	ldd	r22, Y+7	; 0x07
    195e:	78 85       	ldd	r23, Y+8	; 0x08
    1960:	89 85       	ldd	r24, Y+9	; 0x09
    1962:	9a 85       	ldd	r25, Y+10	; 0x0a
    1964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	9e 83       	std	Y+6, r25	; 0x06
    196e:	8d 83       	std	Y+5, r24	; 0x05
    1970:	8d 81       	ldd	r24, Y+5	; 0x05
    1972:	9e 81       	ldd	r25, Y+6	; 0x06
    1974:	9a 83       	std	Y+2, r25	; 0x02
    1976:	89 83       	std	Y+1, r24	; 0x01
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	9a 81       	ldd	r25, Y+2	; 0x02
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	f1 f7       	brne	.-4      	; 0x197c <LCD_sendCommand+0x3c4>
    1980:	9a 83       	std	Y+2, r25	; 0x02
    1982:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1984:	e9 96       	adiw	r28, 0x39	; 57
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	e9 97       	sbiw	r28, 0x39	; 57
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	f8 94       	cli
    19a4:	de bf       	out	0x3e, r29	; 62
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	cd bf       	out	0x3d, r28	; 61
    19aa:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	61 e0       	ldi	r22, 0x01	; 1
    19b0:	41 e0       	ldi	r20, 0x01	; 1
    19b2:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_writePin>
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	a0 e8       	ldi	r26, 0x80	; 128
    19bc:	bf e3       	ldi	r27, 0x3F	; 63
    19be:	8d ab       	std	Y+53, r24	; 0x35
    19c0:	9e ab       	std	Y+54, r25	; 0x36
    19c2:	af ab       	std	Y+55, r26	; 0x37
    19c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c6:	6d a9       	ldd	r22, Y+53	; 0x35
    19c8:	7e a9       	ldd	r23, Y+54	; 0x36
    19ca:	8f a9       	ldd	r24, Y+55	; 0x37
    19cc:	98 ad       	ldd	r25, Y+56	; 0x38
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	4a e7       	ldi	r20, 0x7A	; 122
    19d4:	53 e4       	ldi	r21, 0x43	; 67
    19d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	89 ab       	std	Y+49, r24	; 0x31
    19e0:	9a ab       	std	Y+50, r25	; 0x32
    19e2:	ab ab       	std	Y+51, r26	; 0x33
    19e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19e6:	69 a9       	ldd	r22, Y+49	; 0x31
    19e8:	7a a9       	ldd	r23, Y+50	; 0x32
    19ea:	8b a9       	ldd	r24, Y+51	; 0x33
    19ec:	9c a9       	ldd	r25, Y+52	; 0x34
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e8       	ldi	r20, 0x80	; 128
    19f4:	5f e3       	ldi	r21, 0x3F	; 63
    19f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19fa:	88 23       	and	r24, r24
    19fc:	2c f4       	brge	.+10     	; 0x1a08 <LCD_displayCharacter+0x72>
		__ticks = 1;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	98 ab       	std	Y+48, r25	; 0x30
    1a04:	8f a7       	std	Y+47, r24	; 0x2f
    1a06:	3f c0       	rjmp	.+126    	; 0x1a86 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1a08:	69 a9       	ldd	r22, Y+49	; 0x31
    1a0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	3f ef       	ldi	r19, 0xFF	; 255
    1a14:	4f e7       	ldi	r20, 0x7F	; 127
    1a16:	57 e4       	ldi	r21, 0x47	; 71
    1a18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a1c:	18 16       	cp	r1, r24
    1a1e:	4c f5       	brge	.+82     	; 0x1a72 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a20:	6d a9       	ldd	r22, Y+53	; 0x35
    1a22:	7e a9       	ldd	r23, Y+54	; 0x36
    1a24:	8f a9       	ldd	r24, Y+55	; 0x37
    1a26:	98 ad       	ldd	r25, Y+56	; 0x38
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	40 e2       	ldi	r20, 0x20	; 32
    1a2e:	51 e4       	ldi	r21, 0x41	; 65
    1a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	bc 01       	movw	r22, r24
    1a3a:	cd 01       	movw	r24, r26
    1a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	98 ab       	std	Y+48, r25	; 0x30
    1a46:	8f a7       	std	Y+47, r24	; 0x2f
    1a48:	0f c0       	rjmp	.+30     	; 0x1a68 <LCD_displayCharacter+0xd2>
    1a4a:	89 e1       	ldi	r24, 0x19	; 25
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	9e a7       	std	Y+46, r25	; 0x2e
    1a50:	8d a7       	std	Y+45, r24	; 0x2d
    1a52:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a54:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <LCD_displayCharacter+0xc0>
    1a5a:	9e a7       	std	Y+46, r25	; 0x2e
    1a5c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a60:	98 a9       	ldd	r25, Y+48	; 0x30
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	98 ab       	std	Y+48, r25	; 0x30
    1a66:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	69 f7       	brne	.-38     	; 0x1a4a <LCD_displayCharacter+0xb4>
    1a70:	14 c0       	rjmp	.+40     	; 0x1a9a <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a72:	69 a9       	ldd	r22, Y+49	; 0x31
    1a74:	7a a9       	ldd	r23, Y+50	; 0x32
    1a76:	8b a9       	ldd	r24, Y+51	; 0x33
    1a78:	9c a9       	ldd	r25, Y+52	; 0x34
    1a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	98 ab       	std	Y+48, r25	; 0x30
    1a84:	8f a7       	std	Y+47, r24	; 0x2f
    1a86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a88:	98 a9       	ldd	r25, Y+48	; 0x30
    1a8a:	9c a7       	std	Y+44, r25	; 0x2c
    1a8c:	8b a7       	std	Y+43, r24	; 0x2b
    1a8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a90:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <LCD_displayCharacter+0xfc>
    1a96:	9c a7       	std	Y+44, r25	; 0x2c
    1a98:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	62 e0       	ldi	r22, 0x02	; 2
    1a9e:	41 e0       	ldi	r20, 0x01	; 1
    1aa0:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_writePin>
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	a0 e8       	ldi	r26, 0x80	; 128
    1aaa:	bf e3       	ldi	r27, 0x3F	; 63
    1aac:	8f a3       	std	Y+39, r24	; 0x27
    1aae:	98 a7       	std	Y+40, r25	; 0x28
    1ab0:	a9 a7       	std	Y+41, r26	; 0x29
    1ab2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ab6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ab8:	89 a5       	ldd	r24, Y+41	; 0x29
    1aba:	9a a5       	ldd	r25, Y+42	; 0x2a
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	4a e7       	ldi	r20, 0x7A	; 122
    1ac2:	53 e4       	ldi	r21, 0x43	; 67
    1ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	8b a3       	std	Y+35, r24	; 0x23
    1ace:	9c a3       	std	Y+36, r25	; 0x24
    1ad0:	ad a3       	std	Y+37, r26	; 0x25
    1ad2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ad4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad8:	8d a1       	ldd	r24, Y+37	; 0x25
    1ada:	9e a1       	ldd	r25, Y+38	; 0x26
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 e8       	ldi	r20, 0x80	; 128
    1ae2:	5f e3       	ldi	r21, 0x3F	; 63
    1ae4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ae8:	88 23       	and	r24, r24
    1aea:	2c f4       	brge	.+10     	; 0x1af6 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	9a a3       	std	Y+34, r25	; 0x22
    1af2:	89 a3       	std	Y+33, r24	; 0x21
    1af4:	3f c0       	rjmp	.+126    	; 0x1b74 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1af6:	6b a1       	ldd	r22, Y+35	; 0x23
    1af8:	7c a1       	ldd	r23, Y+36	; 0x24
    1afa:	8d a1       	ldd	r24, Y+37	; 0x25
    1afc:	9e a1       	ldd	r25, Y+38	; 0x26
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	3f ef       	ldi	r19, 0xFF	; 255
    1b02:	4f e7       	ldi	r20, 0x7F	; 127
    1b04:	57 e4       	ldi	r21, 0x47	; 71
    1b06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b0a:	18 16       	cp	r1, r24
    1b0c:	4c f5       	brge	.+82     	; 0x1b60 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b10:	78 a5       	ldd	r23, Y+40	; 0x28
    1b12:	89 a5       	ldd	r24, Y+41	; 0x29
    1b14:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e2       	ldi	r20, 0x20	; 32
    1b1c:	51 e4       	ldi	r21, 0x41	; 65
    1b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	bc 01       	movw	r22, r24
    1b28:	cd 01       	movw	r24, r26
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9a a3       	std	Y+34, r25	; 0x22
    1b34:	89 a3       	std	Y+33, r24	; 0x21
    1b36:	0f c0       	rjmp	.+30     	; 0x1b56 <LCD_displayCharacter+0x1c0>
    1b38:	89 e1       	ldi	r24, 0x19	; 25
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	98 a3       	std	Y+32, r25	; 0x20
    1b3e:	8f 8f       	std	Y+31, r24	; 0x1f
    1b40:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b42:	98 a1       	ldd	r25, Y+32	; 0x20
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <LCD_displayCharacter+0x1ae>
    1b48:	98 a3       	std	Y+32, r25	; 0x20
    1b4a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b4e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	9a a3       	std	Y+34, r25	; 0x22
    1b54:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b56:	89 a1       	ldd	r24, Y+33	; 0x21
    1b58:	9a a1       	ldd	r25, Y+34	; 0x22
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	69 f7       	brne	.-38     	; 0x1b38 <LCD_displayCharacter+0x1a2>
    1b5e:	14 c0       	rjmp	.+40     	; 0x1b88 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b60:	6b a1       	ldd	r22, Y+35	; 0x23
    1b62:	7c a1       	ldd	r23, Y+36	; 0x24
    1b64:	8d a1       	ldd	r24, Y+37	; 0x25
    1b66:	9e a1       	ldd	r25, Y+38	; 0x26
    1b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	9a a3       	std	Y+34, r25	; 0x22
    1b72:	89 a3       	std	Y+33, r24	; 0x21
    1b74:	89 a1       	ldd	r24, Y+33	; 0x21
    1b76:	9a a1       	ldd	r25, Y+34	; 0x22
    1b78:	9e 8f       	std	Y+30, r25	; 0x1e
    1b7a:	8d 8f       	std	Y+29, r24	; 0x1d
    1b7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b7e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	f1 f7       	brne	.-4      	; 0x1b80 <LCD_displayCharacter+0x1ea>
    1b84:	9e 8f       	std	Y+30, r25	; 0x1e
    1b86:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1b88:	82 e0       	ldi	r24, 0x02	; 2
    1b8a:	69 ad       	ldd	r22, Y+57	; 0x39
    1b8c:	0e 94 1f 09 	call	0x123e	; 0x123e <GPIO_writePort>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	a0 e8       	ldi	r26, 0x80	; 128
    1b96:	bf e3       	ldi	r27, 0x3F	; 63
    1b98:	89 8f       	std	Y+25, r24	; 0x19
    1b9a:	9a 8f       	std	Y+26, r25	; 0x1a
    1b9c:	ab 8f       	std	Y+27, r26	; 0x1b
    1b9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ba2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ba4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ba6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4a e7       	ldi	r20, 0x7A	; 122
    1bae:	53 e4       	ldi	r21, 0x43	; 67
    1bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	8d 8b       	std	Y+21, r24	; 0x15
    1bba:	9e 8b       	std	Y+22, r25	; 0x16
    1bbc:	af 8b       	std	Y+23, r26	; 0x17
    1bbe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bc0:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc2:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc6:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	2c f4       	brge	.+10     	; 0x1be2 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	9c 8b       	std	Y+20, r25	; 0x14
    1bde:	8b 8b       	std	Y+19, r24	; 0x13
    1be0:	3f c0       	rjmp	.+126    	; 0x1c60 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1be2:	6d 89       	ldd	r22, Y+21	; 0x15
    1be4:	7e 89       	ldd	r23, Y+22	; 0x16
    1be6:	8f 89       	ldd	r24, Y+23	; 0x17
    1be8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	3f ef       	ldi	r19, 0xFF	; 255
    1bee:	4f e7       	ldi	r20, 0x7F	; 127
    1bf0:	57 e4       	ldi	r21, 0x47	; 71
    1bf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bf6:	18 16       	cp	r1, r24
    1bf8:	4c f5       	brge	.+82     	; 0x1c4c <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfa:	69 8d       	ldd	r22, Y+25	; 0x19
    1bfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e2       	ldi	r20, 0x20	; 32
    1c08:	51 e4       	ldi	r21, 0x41	; 65
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	bc 01       	movw	r22, r24
    1c14:	cd 01       	movw	r24, r26
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9c 8b       	std	Y+20, r25	; 0x14
    1c20:	8b 8b       	std	Y+19, r24	; 0x13
    1c22:	0f c0       	rjmp	.+30     	; 0x1c42 <LCD_displayCharacter+0x2ac>
    1c24:	89 e1       	ldi	r24, 0x19	; 25
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	9a 8b       	std	Y+18, r25	; 0x12
    1c2a:	89 8b       	std	Y+17, r24	; 0x11
    1c2c:	89 89       	ldd	r24, Y+17	; 0x11
    1c2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <LCD_displayCharacter+0x29a>
    1c34:	9a 8b       	std	Y+18, r25	; 0x12
    1c36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c38:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	9c 8b       	std	Y+20, r25	; 0x14
    1c40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c42:	8b 89       	ldd	r24, Y+19	; 0x13
    1c44:	9c 89       	ldd	r25, Y+20	; 0x14
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	69 f7       	brne	.-38     	; 0x1c24 <LCD_displayCharacter+0x28e>
    1c4a:	14 c0       	rjmp	.+40     	; 0x1c74 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c50:	8f 89       	ldd	r24, Y+23	; 0x17
    1c52:	98 8d       	ldd	r25, Y+24	; 0x18
    1c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	9c 8b       	std	Y+20, r25	; 0x14
    1c5e:	8b 8b       	std	Y+19, r24	; 0x13
    1c60:	8b 89       	ldd	r24, Y+19	; 0x13
    1c62:	9c 89       	ldd	r25, Y+20	; 0x14
    1c64:	98 8b       	std	Y+16, r25	; 0x10
    1c66:	8f 87       	std	Y+15, r24	; 0x0f
    1c68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c6a:	98 89       	ldd	r25, Y+16	; 0x10
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <LCD_displayCharacter+0x2d6>
    1c70:	98 8b       	std	Y+16, r25	; 0x10
    1c72:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	62 e0       	ldi	r22, 0x02	; 2
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	0e 94 55 07 	call	0xeaa	; 0xeaa <GPIO_writePin>
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	a0 e8       	ldi	r26, 0x80	; 128
    1c84:	bf e3       	ldi	r27, 0x3F	; 63
    1c86:	8b 87       	std	Y+11, r24	; 0x0b
    1c88:	9c 87       	std	Y+12, r25	; 0x0c
    1c8a:	ad 87       	std	Y+13, r26	; 0x0d
    1c8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	4a e7       	ldi	r20, 0x7A	; 122
    1c9c:	53 e4       	ldi	r21, 0x43	; 67
    1c9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	8f 83       	std	Y+7, r24	; 0x07
    1ca8:	98 87       	std	Y+8, r25	; 0x08
    1caa:	a9 87       	std	Y+9, r26	; 0x09
    1cac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cae:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb0:	78 85       	ldd	r23, Y+8	; 0x08
    1cb2:	89 85       	ldd	r24, Y+9	; 0x09
    1cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e8       	ldi	r20, 0x80	; 128
    1cbc:	5f e3       	ldi	r21, 0x3F	; 63
    1cbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc2:	88 23       	and	r24, r24
    1cc4:	2c f4       	brge	.+10     	; 0x1cd0 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	9e 83       	std	Y+6, r25	; 0x06
    1ccc:	8d 83       	std	Y+5, r24	; 0x05
    1cce:	3f c0       	rjmp	.+126    	; 0x1d4e <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd2:	78 85       	ldd	r23, Y+8	; 0x08
    1cd4:	89 85       	ldd	r24, Y+9	; 0x09
    1cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	3f ef       	ldi	r19, 0xFF	; 255
    1cdc:	4f e7       	ldi	r20, 0x7F	; 127
    1cde:	57 e4       	ldi	r21, 0x47	; 71
    1ce0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce4:	18 16       	cp	r1, r24
    1ce6:	4c f5       	brge	.+82     	; 0x1d3a <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e2       	ldi	r20, 0x20	; 32
    1cf6:	51 e4       	ldi	r21, 0x41	; 65
    1cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	bc 01       	movw	r22, r24
    1d02:	cd 01       	movw	r24, r26
    1d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	9e 83       	std	Y+6, r25	; 0x06
    1d0e:	8d 83       	std	Y+5, r24	; 0x05
    1d10:	0f c0       	rjmp	.+30     	; 0x1d30 <LCD_displayCharacter+0x39a>
    1d12:	89 e1       	ldi	r24, 0x19	; 25
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9c 83       	std	Y+4, r25	; 0x04
    1d18:	8b 83       	std	Y+3, r24	; 0x03
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <LCD_displayCharacter+0x388>
    1d22:	9c 83       	std	Y+4, r25	; 0x04
    1d24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	9e 83       	std	Y+6, r25	; 0x06
    1d2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d30:	8d 81       	ldd	r24, Y+5	; 0x05
    1d32:	9e 81       	ldd	r25, Y+6	; 0x06
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	69 f7       	brne	.-38     	; 0x1d12 <LCD_displayCharacter+0x37c>
    1d38:	14 c0       	rjmp	.+40     	; 0x1d62 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3c:	78 85       	ldd	r23, Y+8	; 0x08
    1d3e:	89 85       	ldd	r24, Y+9	; 0x09
    1d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
    1d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d50:	9e 81       	ldd	r25, Y+6	; 0x06
    1d52:	9a 83       	std	Y+2, r25	; 0x02
    1d54:	89 83       	std	Y+1, r24	; 0x01
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	f1 f7       	brne	.-4      	; 0x1d5a <LCD_displayCharacter+0x3c4>
    1d5e:	9a 83       	std	Y+2, r25	; 0x02
    1d60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1d62:	e9 96       	adiw	r28, 0x39	; 57
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	f8 94       	cli
    1d68:	de bf       	out	0x3e, r29	; 62
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	cd bf       	out	0x3d, r28	; 61
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <LCD_displayString+0x6>
    1d7a:	0f 92       	push	r0
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	9b 83       	std	Y+3, r25	; 0x03
    1d82:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d84:	19 82       	std	Y+1, r1	; 0x01
    1d86:	0e c0       	rjmp	.+28     	; 0x1da4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	9b 81       	ldd	r25, Y+3	; 0x03
    1d92:	fc 01       	movw	r30, r24
    1d94:	e2 0f       	add	r30, r18
    1d96:	f3 1f       	adc	r31, r19
    1d98:	80 81       	ld	r24, Z
    1d9a:	0e 94 cb 0c 	call	0x1996	; 0x1996 <LCD_displayCharacter>
		i++;
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	8f 5f       	subi	r24, 0xFF	; 255
    1da2:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	9b 81       	ldd	r25, Y+3	; 0x03
    1dae:	fc 01       	movw	r30, r24
    1db0:	e2 0f       	add	r30, r18
    1db2:	f3 1f       	adc	r31, r19
    1db4:	80 81       	ld	r24, Z
    1db6:	88 23       	and	r24, r24
    1db8:	39 f7       	brne	.-50     	; 0x1d88 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	00 d0       	rcall	.+0      	; 0x1dcc <LCD_moveCursor+0x6>
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <LCD_moveCursor+0x8>
    1dce:	0f 92       	push	r0
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	8a 83       	std	Y+2, r24	; 0x02
    1dd6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	3d 83       	std	Y+5, r19	; 0x05
    1de0:	2c 83       	std	Y+4, r18	; 0x04
    1de2:	8c 81       	ldd	r24, Y+4	; 0x04
    1de4:	9d 81       	ldd	r25, Y+5	; 0x05
    1de6:	81 30       	cpi	r24, 0x01	; 1
    1de8:	91 05       	cpc	r25, r1
    1dea:	c1 f0       	breq	.+48     	; 0x1e1c <LCD_moveCursor+0x56>
    1dec:	2c 81       	ldd	r18, Y+4	; 0x04
    1dee:	3d 81       	ldd	r19, Y+5	; 0x05
    1df0:	22 30       	cpi	r18, 0x02	; 2
    1df2:	31 05       	cpc	r19, r1
    1df4:	2c f4       	brge	.+10     	; 0x1e00 <LCD_moveCursor+0x3a>
    1df6:	8c 81       	ldd	r24, Y+4	; 0x04
    1df8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	61 f0       	breq	.+24     	; 0x1e16 <LCD_moveCursor+0x50>
    1dfe:	19 c0       	rjmp	.+50     	; 0x1e32 <LCD_moveCursor+0x6c>
    1e00:	2c 81       	ldd	r18, Y+4	; 0x04
    1e02:	3d 81       	ldd	r19, Y+5	; 0x05
    1e04:	22 30       	cpi	r18, 0x02	; 2
    1e06:	31 05       	cpc	r19, r1
    1e08:	69 f0       	breq	.+26     	; 0x1e24 <LCD_moveCursor+0x5e>
    1e0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e0e:	83 30       	cpi	r24, 0x03	; 3
    1e10:	91 05       	cpc	r25, r1
    1e12:	61 f0       	breq	.+24     	; 0x1e2c <LCD_moveCursor+0x66>
    1e14:	0e c0       	rjmp	.+28     	; 0x1e32 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	89 83       	std	Y+1, r24	; 0x01
    1e1a:	0b c0       	rjmp	.+22     	; 0x1e32 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	80 5c       	subi	r24, 0xC0	; 192
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	07 c0       	rjmp	.+14     	; 0x1e32 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	80 5f       	subi	r24, 0xF0	; 240
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	03 c0       	rjmp	.+6      	; 0x1e32 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	80 5b       	subi	r24, 0xB0	; 176
    1e30:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	80 68       	ori	r24, 0x80	; 128
    1e36:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <LCD_sendCommand>
}
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	cf 91       	pop	r28
    1e46:	df 91       	pop	r29
    1e48:	08 95       	ret

00001e4a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1e4a:	df 93       	push	r29
    1e4c:	cf 93       	push	r28
    1e4e:	00 d0       	rcall	.+0      	; 0x1e50 <LCD_displayStringRowColumn+0x6>
    1e50:	00 d0       	rcall	.+0      	; 0x1e52 <LCD_displayStringRowColumn+0x8>
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	89 83       	std	Y+1, r24	; 0x01
    1e58:	6a 83       	std	Y+2, r22	; 0x02
    1e5a:	5c 83       	std	Y+4, r21	; 0x04
    1e5c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	6a 81       	ldd	r22, Y+2	; 0x02
    1e62:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_displayString>
}
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	62 97       	sbiw	r28, 0x12	; 18
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	f8 94       	cli
    1e8a:	de bf       	out	0x3e, r29	; 62
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	cd bf       	out	0x3d, r28	; 61
    1e90:	9a 8b       	std	Y+18, r25	; 0x12
    1e92:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1e94:	89 89       	ldd	r24, Y+17	; 0x11
    1e96:	9a 89       	ldd	r25, Y+18	; 0x12
    1e98:	9e 01       	movw	r18, r28
    1e9a:	2f 5f       	subi	r18, 0xFF	; 255
    1e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9e:	b9 01       	movw	r22, r18
    1ea0:	4a e0       	ldi	r20, 0x0A	; 10
    1ea2:	50 e0       	ldi	r21, 0x00	; 0
    1ea4:	0e 94 18 17 	call	0x2e30	; 0x2e30 <itoa>
   LCD_displayString(buff); /* Display the string */
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	01 96       	adiw	r24, 0x01	; 1
    1eac:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_displayString>
}
    1eb0:	62 96       	adiw	r28, 0x12	; 18
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <LCD_sendCommand>
}
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <main>:
;


Timer1_ConfigType Timer1_Configuration = {0, 8000, F_CPU_1024, COMPARE};

int main() {
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	2c 97       	sbiw	r28, 0x0c	; 12
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61




	/* Initializes UART Driver */
	UART_ConfigType UART_Config = {EIGHT_DATA_BITS, DISABLED_PARITY, ONE_STOP_BIT, 9600};
    1eea:	ce 01       	movw	r24, r28
    1eec:	01 96       	adiw	r24, 0x01	; 1
    1eee:	99 87       	std	Y+9, r25	; 0x09
    1ef0:	88 87       	std	Y+8, r24	; 0x08
    1ef2:	e5 e3       	ldi	r30, 0x35	; 53
    1ef4:	f1 e0       	ldi	r31, 0x01	; 1
    1ef6:	fb 87       	std	Y+11, r31	; 0x0b
    1ef8:	ea 87       	std	Y+10, r30	; 0x0a
    1efa:	f7 e0       	ldi	r31, 0x07	; 7
    1efc:	fc 87       	std	Y+12, r31	; 0x0c
    1efe:	ea 85       	ldd	r30, Y+10	; 0x0a
    1f00:	fb 85       	ldd	r31, Y+11	; 0x0b
    1f02:	00 80       	ld	r0, Z
    1f04:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f06:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f08:	01 96       	adiw	r24, 0x01	; 1
    1f0a:	9b 87       	std	Y+11, r25	; 0x0b
    1f0c:	8a 87       	std	Y+10, r24	; 0x0a
    1f0e:	e8 85       	ldd	r30, Y+8	; 0x08
    1f10:	f9 85       	ldd	r31, Y+9	; 0x09
    1f12:	00 82       	st	Z, r0
    1f14:	88 85       	ldd	r24, Y+8	; 0x08
    1f16:	99 85       	ldd	r25, Y+9	; 0x09
    1f18:	01 96       	adiw	r24, 0x01	; 1
    1f1a:	99 87       	std	Y+9, r25	; 0x09
    1f1c:	88 87       	std	Y+8, r24	; 0x08
    1f1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f20:	91 50       	subi	r25, 0x01	; 1
    1f22:	9c 87       	std	Y+12, r25	; 0x0c
    1f24:	ec 85       	ldd	r30, Y+12	; 0x0c
    1f26:	ee 23       	and	r30, r30
    1f28:	51 f7       	brne	.-44     	; 0x1efe <main+0x28>

	UART_init(&UART_Config);
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	01 96       	adiw	r24, 0x01	; 1
    1f2e:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <UART_init>

	/* Initializes LCD */

	LCD_init();
    1f32:	0e 94 40 0a 	call	0x1480	; 0x1480 <LCD_init>
	/* clear the screen */
	LCD_clearScreen();
    1f36:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_clearScreen>

	/* sending to CONTROL_ECU ECU_READY signal */
	UART_sendByte(ECU_READY);
    1f3a:	81 e1       	ldi	r24, 0x11	; 17
    1f3c:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_sendByte>
	/* looping until CONTROL_ECU send ECU_READY signal */
	while (UART_recieveByte() != ECU_READY);
    1f40:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_recieveByte>
    1f44:	81 31       	cpi	r24, 0x11	; 17
    1f46:	e1 f7       	brne	.-8      	; 0x1f40 <main+0x6a>
	Timer1_setCallBack(messageTimer);
    1f48:	8e eb       	ldi	r24, 0xBE	; 190
    1f4a:	9f e0       	ldi	r25, 0x0F	; 15
    1f4c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <Timer1_setCallBack>


	/* sending to CONTROL_ECU ECU_READY signal */
	UART_sendByte(ECU_READY);
    1f50:	81 e1       	ldi	r24, 0x11	; 17
    1f52:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_sendByte>
	(*fun_ptr_arr[Welcome])();
    1f56:	e0 91 23 01 	lds	r30, 0x0123
    1f5a:	f0 91 24 01 	lds	r31, 0x0124
    1f5e:	09 95       	icall
	{
		/* calling the function by using pointer to the function
		 * each function has its own index in fun_ptr_arr
		 */

		(*fun_ptr_arr[g_index])();
    1f60:	80 91 3e 01 	lds	r24, 0x013E
    1f64:	88 2f       	mov	r24, r24
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	ed 5d       	subi	r30, 0xDD	; 221
    1f70:	fe 4f       	sbci	r31, 0xFE	; 254
    1f72:	01 90       	ld	r0, Z+
    1f74:	f0 81       	ld	r31, Z
    1f76:	e0 2d       	mov	r30, r0
    1f78:	09 95       	icall
    1f7a:	f2 cf       	rjmp	.-28     	; 0x1f60 <main+0x8a>

00001f7c <messageTimer>:

	return 0;

}

void messageTimer(void){	//SET CALLBACK Function
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
	message_time++;			//Increment number of seconds every time interrupt occurs and set callback function is called
    1f84:	80 91 40 01 	lds	r24, 0x0140
    1f88:	8f 5f       	subi	r24, 0xFF	; 255
    1f8a:	80 93 40 01 	sts	0x0140, r24
}
    1f8e:	cf 91       	pop	r28
    1f90:	df 91       	pop	r29
    1f92:	08 95       	ret

00001f94 <Welcome_screen>:
void Welcome_screen(void)
{
    1f94:	df 93       	push	r29
    1f96:	cf 93       	push	r28
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	2e 97       	sbiw	r28, 0x0e	; 14
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	f8 94       	cli
    1fa2:	de bf       	out	0x3e, r29	; 62
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen ();
    1fa8:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_clearScreen>
	LCD_moveCursor (0,5);
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	65 e0       	ldi	r22, 0x05	; 5
    1fb0:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_moveCursor>
	LCD_displayString ("WECLOME");
    1fb4:	80 e6       	ldi	r24, 0x60	; 96
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_displayString>
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	aa e7       	ldi	r26, 0x7A	; 122
    1fc2:	b4 e4       	ldi	r27, 0x44	; 68
    1fc4:	8b 87       	std	Y+11, r24	; 0x0b
    1fc6:	9c 87       	std	Y+12, r25	; 0x0c
    1fc8:	ad 87       	std	Y+13, r26	; 0x0d
    1fca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	4a e7       	ldi	r20, 0x7A	; 122
    1fda:	53 e4       	ldi	r21, 0x43	; 67
    1fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	8f 83       	std	Y+7, r24	; 0x07
    1fe6:	98 87       	std	Y+8, r25	; 0x08
    1fe8:	a9 87       	std	Y+9, r26	; 0x09
    1fea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fec:	6f 81       	ldd	r22, Y+7	; 0x07
    1fee:	78 85       	ldd	r23, Y+8	; 0x08
    1ff0:	89 85       	ldd	r24, Y+9	; 0x09
    1ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	40 e8       	ldi	r20, 0x80	; 128
    1ffa:	5f e3       	ldi	r21, 0x3F	; 63
    1ffc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2000:	88 23       	and	r24, r24
    2002:	2c f4       	brge	.+10     	; 0x200e <Welcome_screen+0x7a>
		__ticks = 1;
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	9e 83       	std	Y+6, r25	; 0x06
    200a:	8d 83       	std	Y+5, r24	; 0x05
    200c:	3f c0       	rjmp	.+126    	; 0x208c <Welcome_screen+0xf8>
	else if (__tmp > 65535)
    200e:	6f 81       	ldd	r22, Y+7	; 0x07
    2010:	78 85       	ldd	r23, Y+8	; 0x08
    2012:	89 85       	ldd	r24, Y+9	; 0x09
    2014:	9a 85       	ldd	r25, Y+10	; 0x0a
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	3f ef       	ldi	r19, 0xFF	; 255
    201a:	4f e7       	ldi	r20, 0x7F	; 127
    201c:	57 e4       	ldi	r21, 0x47	; 71
    201e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2022:	18 16       	cp	r1, r24
    2024:	4c f5       	brge	.+82     	; 0x2078 <Welcome_screen+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2026:	6b 85       	ldd	r22, Y+11	; 0x0b
    2028:	7c 85       	ldd	r23, Y+12	; 0x0c
    202a:	8d 85       	ldd	r24, Y+13	; 0x0d
    202c:	9e 85       	ldd	r25, Y+14	; 0x0e
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e2       	ldi	r20, 0x20	; 32
    2034:	51 e4       	ldi	r21, 0x41	; 65
    2036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	bc 01       	movw	r22, r24
    2040:	cd 01       	movw	r24, r26
    2042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	9e 83       	std	Y+6, r25	; 0x06
    204c:	8d 83       	std	Y+5, r24	; 0x05
    204e:	0f c0       	rjmp	.+30     	; 0x206e <Welcome_screen+0xda>
    2050:	89 e1       	ldi	r24, 0x19	; 25
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	9c 83       	std	Y+4, r25	; 0x04
    2056:	8b 83       	std	Y+3, r24	; 0x03
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	9c 81       	ldd	r25, Y+4	; 0x04
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	f1 f7       	brne	.-4      	; 0x205c <Welcome_screen+0xc8>
    2060:	9c 83       	std	Y+4, r25	; 0x04
    2062:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2064:	8d 81       	ldd	r24, Y+5	; 0x05
    2066:	9e 81       	ldd	r25, Y+6	; 0x06
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	9e 83       	std	Y+6, r25	; 0x06
    206c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206e:	8d 81       	ldd	r24, Y+5	; 0x05
    2070:	9e 81       	ldd	r25, Y+6	; 0x06
    2072:	00 97       	sbiw	r24, 0x00	; 0
    2074:	69 f7       	brne	.-38     	; 0x2050 <Welcome_screen+0xbc>
    2076:	14 c0       	rjmp	.+40     	; 0x20a0 <Welcome_screen+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2078:	6f 81       	ldd	r22, Y+7	; 0x07
    207a:	78 85       	ldd	r23, Y+8	; 0x08
    207c:	89 85       	ldd	r24, Y+9	; 0x09
    207e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	9e 83       	std	Y+6, r25	; 0x06
    208a:	8d 83       	std	Y+5, r24	; 0x05
    208c:	8d 81       	ldd	r24, Y+5	; 0x05
    208e:	9e 81       	ldd	r25, Y+6	; 0x06
    2090:	9a 83       	std	Y+2, r25	; 0x02
    2092:	89 83       	std	Y+1, r24	; 0x01
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	9a 81       	ldd	r25, Y+2	; 0x02
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	f1 f7       	brne	.-4      	; 0x2098 <Welcome_screen+0x104>
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	g_index = createpass;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	80 93 3e 01 	sts	0x013E, r24

}
    20a6:	2e 96       	adiw	r28, 0x0e	; 14
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	cd bf       	out	0x3d, r28	; 61
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <create_pass>:
void create_pass(void)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	ee 97       	sbiw	r28, 0x3e	; 62
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	de bf       	out	0x3e, r29	; 62
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	cd bf       	out	0x3d, r28	; 61
	uint8 key =0,counter=0;
    20cc:	1c ae       	std	Y+60, r1	; 0x3c
    20ce:	1b ae       	std	Y+59, r1	; 0x3b
	uint8 flag = 1;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	8a af       	std	Y+58, r24	; 0x3a
	uint8 command = 0;
    20d4:	19 ae       	std	Y+57, r1	; 0x39
	sendData(PASSWORD  );
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <sendData>
	LCD_clearScreen();
    20dc:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_clearScreen>
	if(g_flag)
    20e0:	80 91 3f 01 	lds	r24, 0x013F
    20e4:	88 23       	and	r24, r24
    20e6:	29 f0       	breq	.+10     	; 0x20f2 <create_pass+0x3a>
	{
		LCD_displayString("REENTER  PASS");
    20e8:	88 e6       	ldi	r24, 0x68	; 104
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_displayString>
    20f0:	04 c0       	rjmp	.+8      	; 0x20fa <create_pass+0x42>
	}
	else
	{
		LCD_displayString("PLZ ENTER PASS");
    20f2:	86 e7       	ldi	r24, 0x76	; 118
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_displayString>
	}
	LCD_moveCursor(1, 3);
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	63 e0       	ldi	r22, 0x03	; 3
    20fe:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_moveCursor>
    2102:	f4 c0       	rjmp	.+488    	; 0x22ec <create_pass+0x234>

	while(key != '#')
	{
		key = KEYPAD_getPressedKey();
    2104:	0e 94 a8 09 	call	0x1350	; 0x1350 <KEYPAD_getPressedKey>
    2108:	8c af       	std	Y+60, r24	; 0x3c
		UART_sendByte(key);
    210a:	8c ad       	ldd	r24, Y+60	; 0x3c
    210c:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_sendByte>
		if(key != '#')
    2110:	8c ad       	ldd	r24, Y+60	; 0x3c
    2112:	83 32       	cpi	r24, 0x23	; 35
    2114:	09 f4       	brne	.+2      	; 0x2118 <create_pass+0x60>
    2116:	75 c0       	rjmp	.+234    	; 0x2202 <create_pass+0x14a>
		{
			LCD_displayCharacter('*');
    2118:	8a e2       	ldi	r24, 0x2A	; 42
    211a:	0e 94 cb 0c 	call	0x1996	; 0x1996 <LCD_displayCharacter>
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	a8 ec       	ldi	r26, 0xC8	; 200
    2124:	b3 e4       	ldi	r27, 0x43	; 67
    2126:	8d ab       	std	Y+53, r24	; 0x35
    2128:	9e ab       	std	Y+54, r25	; 0x36
    212a:	af ab       	std	Y+55, r26	; 0x37
    212c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    212e:	6d a9       	ldd	r22, Y+53	; 0x35
    2130:	7e a9       	ldd	r23, Y+54	; 0x36
    2132:	8f a9       	ldd	r24, Y+55	; 0x37
    2134:	98 ad       	ldd	r25, Y+56	; 0x38
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	4a e7       	ldi	r20, 0x7A	; 122
    213c:	53 e4       	ldi	r21, 0x43	; 67
    213e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	89 ab       	std	Y+49, r24	; 0x31
    2148:	9a ab       	std	Y+50, r25	; 0x32
    214a:	ab ab       	std	Y+51, r26	; 0x33
    214c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    214e:	69 a9       	ldd	r22, Y+49	; 0x31
    2150:	7a a9       	ldd	r23, Y+50	; 0x32
    2152:	8b a9       	ldd	r24, Y+51	; 0x33
    2154:	9c a9       	ldd	r25, Y+52	; 0x34
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	40 e8       	ldi	r20, 0x80	; 128
    215c:	5f e3       	ldi	r21, 0x3F	; 63
    215e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2162:	88 23       	and	r24, r24
    2164:	2c f4       	brge	.+10     	; 0x2170 <create_pass+0xb8>
		__ticks = 1;
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	98 ab       	std	Y+48, r25	; 0x30
    216c:	8f a7       	std	Y+47, r24	; 0x2f
    216e:	3f c0       	rjmp	.+126    	; 0x21ee <create_pass+0x136>
	else if (__tmp > 65535)
    2170:	69 a9       	ldd	r22, Y+49	; 0x31
    2172:	7a a9       	ldd	r23, Y+50	; 0x32
    2174:	8b a9       	ldd	r24, Y+51	; 0x33
    2176:	9c a9       	ldd	r25, Y+52	; 0x34
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	3f ef       	ldi	r19, 0xFF	; 255
    217c:	4f e7       	ldi	r20, 0x7F	; 127
    217e:	57 e4       	ldi	r21, 0x47	; 71
    2180:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2184:	18 16       	cp	r1, r24
    2186:	4c f5       	brge	.+82     	; 0x21da <create_pass+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2188:	6d a9       	ldd	r22, Y+53	; 0x35
    218a:	7e a9       	ldd	r23, Y+54	; 0x36
    218c:	8f a9       	ldd	r24, Y+55	; 0x37
    218e:	98 ad       	ldd	r25, Y+56	; 0x38
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	40 e2       	ldi	r20, 0x20	; 32
    2196:	51 e4       	ldi	r21, 0x41	; 65
    2198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	bc 01       	movw	r22, r24
    21a2:	cd 01       	movw	r24, r26
    21a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	98 ab       	std	Y+48, r25	; 0x30
    21ae:	8f a7       	std	Y+47, r24	; 0x2f
    21b0:	0f c0       	rjmp	.+30     	; 0x21d0 <create_pass+0x118>
    21b2:	89 e1       	ldi	r24, 0x19	; 25
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	9e a7       	std	Y+46, r25	; 0x2e
    21b8:	8d a7       	std	Y+45, r24	; 0x2d
    21ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    21bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <create_pass+0x106>
    21c2:	9e a7       	std	Y+46, r25	; 0x2e
    21c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    21c8:	98 a9       	ldd	r25, Y+48	; 0x30
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	98 ab       	std	Y+48, r25	; 0x30
    21ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d2:	98 a9       	ldd	r25, Y+48	; 0x30
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	69 f7       	brne	.-38     	; 0x21b2 <create_pass+0xfa>
    21d8:	14 c0       	rjmp	.+40     	; 0x2202 <create_pass+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21da:	69 a9       	ldd	r22, Y+49	; 0x31
    21dc:	7a a9       	ldd	r23, Y+50	; 0x32
    21de:	8b a9       	ldd	r24, Y+51	; 0x33
    21e0:	9c a9       	ldd	r25, Y+52	; 0x34
    21e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	98 ab       	std	Y+48, r25	; 0x30
    21ec:	8f a7       	std	Y+47, r24	; 0x2f
    21ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    21f0:	98 a9       	ldd	r25, Y+48	; 0x30
    21f2:	9c a7       	std	Y+44, r25	; 0x2c
    21f4:	8b a7       	std	Y+43, r24	; 0x2b
    21f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    21f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	f1 f7       	brne	.-4      	; 0x21fa <create_pass+0x142>
    21fe:	9c a7       	std	Y+44, r25	; 0x2c
    2200:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(400);
		}
		counter++;
    2202:	8b ad       	ldd	r24, Y+59	; 0x3b
    2204:	8f 5f       	subi	r24, 0xFF	; 255
    2206:	8b af       	std	Y+59, r24	; 0x3b
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	aa ef       	ldi	r26, 0xFA	; 250
    220e:	b3 e4       	ldi	r27, 0x43	; 67
    2210:	8f a3       	std	Y+39, r24	; 0x27
    2212:	98 a7       	std	Y+40, r25	; 0x28
    2214:	a9 a7       	std	Y+41, r26	; 0x29
    2216:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2218:	6f a1       	ldd	r22, Y+39	; 0x27
    221a:	78 a5       	ldd	r23, Y+40	; 0x28
    221c:	89 a5       	ldd	r24, Y+41	; 0x29
    221e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	4a e7       	ldi	r20, 0x7A	; 122
    2226:	53 e4       	ldi	r21, 0x43	; 67
    2228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	8b a3       	std	Y+35, r24	; 0x23
    2232:	9c a3       	std	Y+36, r25	; 0x24
    2234:	ad a3       	std	Y+37, r26	; 0x25
    2236:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2238:	6b a1       	ldd	r22, Y+35	; 0x23
    223a:	7c a1       	ldd	r23, Y+36	; 0x24
    223c:	8d a1       	ldd	r24, Y+37	; 0x25
    223e:	9e a1       	ldd	r25, Y+38	; 0x26
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	40 e8       	ldi	r20, 0x80	; 128
    2246:	5f e3       	ldi	r21, 0x3F	; 63
    2248:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    224c:	88 23       	and	r24, r24
    224e:	2c f4       	brge	.+10     	; 0x225a <create_pass+0x1a2>
		__ticks = 1;
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	9a a3       	std	Y+34, r25	; 0x22
    2256:	89 a3       	std	Y+33, r24	; 0x21
    2258:	3f c0       	rjmp	.+126    	; 0x22d8 <create_pass+0x220>
	else if (__tmp > 65535)
    225a:	6b a1       	ldd	r22, Y+35	; 0x23
    225c:	7c a1       	ldd	r23, Y+36	; 0x24
    225e:	8d a1       	ldd	r24, Y+37	; 0x25
    2260:	9e a1       	ldd	r25, Y+38	; 0x26
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	3f ef       	ldi	r19, 0xFF	; 255
    2266:	4f e7       	ldi	r20, 0x7F	; 127
    2268:	57 e4       	ldi	r21, 0x47	; 71
    226a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    226e:	18 16       	cp	r1, r24
    2270:	4c f5       	brge	.+82     	; 0x22c4 <create_pass+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2272:	6f a1       	ldd	r22, Y+39	; 0x27
    2274:	78 a5       	ldd	r23, Y+40	; 0x28
    2276:	89 a5       	ldd	r24, Y+41	; 0x29
    2278:	9a a5       	ldd	r25, Y+42	; 0x2a
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	40 e2       	ldi	r20, 0x20	; 32
    2280:	51 e4       	ldi	r21, 0x41	; 65
    2282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	bc 01       	movw	r22, r24
    228c:	cd 01       	movw	r24, r26
    228e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	9a a3       	std	Y+34, r25	; 0x22
    2298:	89 a3       	std	Y+33, r24	; 0x21
    229a:	0f c0       	rjmp	.+30     	; 0x22ba <create_pass+0x202>
    229c:	89 e1       	ldi	r24, 0x19	; 25
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	98 a3       	std	Y+32, r25	; 0x20
    22a2:	8f 8f       	std	Y+31, r24	; 0x1f
    22a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22a6:	98 a1       	ldd	r25, Y+32	; 0x20
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <create_pass+0x1f0>
    22ac:	98 a3       	std	Y+32, r25	; 0x20
    22ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b0:	89 a1       	ldd	r24, Y+33	; 0x21
    22b2:	9a a1       	ldd	r25, Y+34	; 0x22
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	9a a3       	std	Y+34, r25	; 0x22
    22b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ba:	89 a1       	ldd	r24, Y+33	; 0x21
    22bc:	9a a1       	ldd	r25, Y+34	; 0x22
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	69 f7       	brne	.-38     	; 0x229c <create_pass+0x1e4>
    22c2:	14 c0       	rjmp	.+40     	; 0x22ec <create_pass+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c4:	6b a1       	ldd	r22, Y+35	; 0x23
    22c6:	7c a1       	ldd	r23, Y+36	; 0x24
    22c8:	8d a1       	ldd	r24, Y+37	; 0x25
    22ca:	9e a1       	ldd	r25, Y+38	; 0x26
    22cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	9a a3       	std	Y+34, r25	; 0x22
    22d6:	89 a3       	std	Y+33, r24	; 0x21
    22d8:	89 a1       	ldd	r24, Y+33	; 0x21
    22da:	9a a1       	ldd	r25, Y+34	; 0x22
    22dc:	9e 8f       	std	Y+30, r25	; 0x1e
    22de:	8d 8f       	std	Y+29, r24	; 0x1d
    22e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <create_pass+0x22c>
    22e8:	9e 8f       	std	Y+30, r25	; 0x1e
    22ea:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		LCD_displayString("PLZ ENTER PASS");
	}
	LCD_moveCursor(1, 3);

	while(key != '#')
    22ec:	8c ad       	ldd	r24, Y+60	; 0x3c
    22ee:	83 32       	cpi	r24, 0x23	; 35
    22f0:	09 f0       	breq	.+2      	; 0x22f4 <create_pass+0x23c>
    22f2:	08 cf       	rjmp	.-496    	; 0x2104 <create_pass+0x4c>
		counter++;
		_delay_ms(500);
	}


	UART_sendByte(DONE);
    22f4:	8a e0       	ldi	r24, 0x0A	; 10
    22f6:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_sendByte>
	sendData(PASSWORD_CONFIRMATION  );
    22fa:	82 e0       	ldi	r24, 0x02	; 2
    22fc:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <sendData>
	LCD_clearScreen();
    2300:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_clearScreen>
	LCD_displayString("PLZ RE ENTER");
    2304:	85 e8       	ldi	r24, 0x85	; 133
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_displayString>
	LCD_moveCursor(1, 3);
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	63 e0       	ldi	r22, 0x03	; 3
    2310:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_moveCursor>
	key = 0;
    2314:	1c ae       	std	Y+60, r1	; 0x3c
	counter=0;
    2316:	1b ae       	std	Y+59, r1	; 0x3b
    2318:	81 c0       	rjmp	.+258    	; 0x241c <create_pass+0x364>
	while(key != '#'){
		key = KEYPAD_getPressedKey();
    231a:	0e 94 a8 09 	call	0x1350	; 0x1350 <KEYPAD_getPressedKey>
    231e:	8c af       	std	Y+60, r24	; 0x3c
		UART_sendByte(key);
    2320:	8c ad       	ldd	r24, Y+60	; 0x3c
    2322:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_sendByte>
		if(key != '#')
    2326:	8c ad       	ldd	r24, Y+60	; 0x3c
    2328:	83 32       	cpi	r24, 0x23	; 35
    232a:	19 f0       	breq	.+6      	; 0x2332 <create_pass+0x27a>
		{
			LCD_displayCharacter('*');
    232c:	8a e2       	ldi	r24, 0x2A	; 42
    232e:	0e 94 cb 0c 	call	0x1996	; 0x1996 <LCD_displayCharacter>
		}
		counter++;
    2332:	8b ad       	ldd	r24, Y+59	; 0x3b
    2334:	8f 5f       	subi	r24, 0xFF	; 255
    2336:	8b af       	std	Y+59, r24	; 0x3b
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	aa ef       	ldi	r26, 0xFA	; 250
    233e:	b3 e4       	ldi	r27, 0x43	; 67
    2340:	89 8f       	std	Y+25, r24	; 0x19
    2342:	9a 8f       	std	Y+26, r25	; 0x1a
    2344:	ab 8f       	std	Y+27, r26	; 0x1b
    2346:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2348:	69 8d       	ldd	r22, Y+25	; 0x19
    234a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    234c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    234e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	4a e7       	ldi	r20, 0x7A	; 122
    2356:	53 e4       	ldi	r21, 0x43	; 67
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	8d 8b       	std	Y+21, r24	; 0x15
    2362:	9e 8b       	std	Y+22, r25	; 0x16
    2364:	af 8b       	std	Y+23, r26	; 0x17
    2366:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2368:	6d 89       	ldd	r22, Y+21	; 0x15
    236a:	7e 89       	ldd	r23, Y+22	; 0x16
    236c:	8f 89       	ldd	r24, Y+23	; 0x17
    236e:	98 8d       	ldd	r25, Y+24	; 0x18
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e8       	ldi	r20, 0x80	; 128
    2376:	5f e3       	ldi	r21, 0x3F	; 63
    2378:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    237c:	88 23       	and	r24, r24
    237e:	2c f4       	brge	.+10     	; 0x238a <create_pass+0x2d2>
		__ticks = 1;
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	9c 8b       	std	Y+20, r25	; 0x14
    2386:	8b 8b       	std	Y+19, r24	; 0x13
    2388:	3f c0       	rjmp	.+126    	; 0x2408 <create_pass+0x350>
	else if (__tmp > 65535)
    238a:	6d 89       	ldd	r22, Y+21	; 0x15
    238c:	7e 89       	ldd	r23, Y+22	; 0x16
    238e:	8f 89       	ldd	r24, Y+23	; 0x17
    2390:	98 8d       	ldd	r25, Y+24	; 0x18
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	3f ef       	ldi	r19, 0xFF	; 255
    2396:	4f e7       	ldi	r20, 0x7F	; 127
    2398:	57 e4       	ldi	r21, 0x47	; 71
    239a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    239e:	18 16       	cp	r1, r24
    23a0:	4c f5       	brge	.+82     	; 0x23f4 <create_pass+0x33c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a2:	69 8d       	ldd	r22, Y+25	; 0x19
    23a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e2       	ldi	r20, 0x20	; 32
    23b0:	51 e4       	ldi	r21, 0x41	; 65
    23b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	bc 01       	movw	r22, r24
    23bc:	cd 01       	movw	r24, r26
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9c 8b       	std	Y+20, r25	; 0x14
    23c8:	8b 8b       	std	Y+19, r24	; 0x13
    23ca:	0f c0       	rjmp	.+30     	; 0x23ea <create_pass+0x332>
    23cc:	89 e1       	ldi	r24, 0x19	; 25
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	9a 8b       	std	Y+18, r25	; 0x12
    23d2:	89 8b       	std	Y+17, r24	; 0x11
    23d4:	89 89       	ldd	r24, Y+17	; 0x11
    23d6:	9a 89       	ldd	r25, Y+18	; 0x12
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <create_pass+0x320>
    23dc:	9a 8b       	std	Y+18, r25	; 0x12
    23de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e0:	8b 89       	ldd	r24, Y+19	; 0x13
    23e2:	9c 89       	ldd	r25, Y+20	; 0x14
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	9c 8b       	std	Y+20, r25	; 0x14
    23e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ea:	8b 89       	ldd	r24, Y+19	; 0x13
    23ec:	9c 89       	ldd	r25, Y+20	; 0x14
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	69 f7       	brne	.-38     	; 0x23cc <create_pass+0x314>
    23f2:	14 c0       	rjmp	.+40     	; 0x241c <create_pass+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f4:	6d 89       	ldd	r22, Y+21	; 0x15
    23f6:	7e 89       	ldd	r23, Y+22	; 0x16
    23f8:	8f 89       	ldd	r24, Y+23	; 0x17
    23fa:	98 8d       	ldd	r25, Y+24	; 0x18
    23fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	9c 8b       	std	Y+20, r25	; 0x14
    2406:	8b 8b       	std	Y+19, r24	; 0x13
    2408:	8b 89       	ldd	r24, Y+19	; 0x13
    240a:	9c 89       	ldd	r25, Y+20	; 0x14
    240c:	98 8b       	std	Y+16, r25	; 0x10
    240e:	8f 87       	std	Y+15, r24	; 0x0f
    2410:	8f 85       	ldd	r24, Y+15	; 0x0f
    2412:	98 89       	ldd	r25, Y+16	; 0x10
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <create_pass+0x35c>
    2418:	98 8b       	std	Y+16, r25	; 0x10
    241a:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_clearScreen();
	LCD_displayString("PLZ RE ENTER");
	LCD_moveCursor(1, 3);
	key = 0;
	counter=0;
	while(key != '#'){
    241c:	8c ad       	ldd	r24, Y+60	; 0x3c
    241e:	83 32       	cpi	r24, 0x23	; 35
    2420:	09 f0       	breq	.+2      	; 0x2424 <create_pass+0x36c>
    2422:	7b cf       	rjmp	.-266    	; 0x231a <create_pass+0x262>
			LCD_displayCharacter('*');
		}
		counter++;
		_delay_ms(500);
	}
	UART_sendByte(DONE);
    2424:	8a e0       	ldi	r24, 0x0A	; 10
    2426:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_sendByte>
    242a:	94 c0       	rjmp	.+296    	; 0x2554 <create_pass+0x49c>

	while (flag) {
		command = UART_recieveByte();
    242c:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_recieveByte>
    2430:	89 af       	std	Y+57, r24	; 0x39
		switch (command) {
    2432:	89 ad       	ldd	r24, Y+57	; 0x39
    2434:	28 2f       	mov	r18, r24
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	3e af       	std	Y+62, r19	; 0x3e
    243a:	2d af       	std	Y+61, r18	; 0x3d
    243c:	8d ad       	ldd	r24, Y+61	; 0x3d
    243e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2440:	83 30       	cpi	r24, 0x03	; 3
    2442:	91 05       	cpc	r25, r1
    2444:	31 f0       	breq	.+12     	; 0x2452 <create_pass+0x39a>
    2446:	2d ad       	ldd	r18, Y+61	; 0x3d
    2448:	3e ad       	ldd	r19, Y+62	; 0x3e
    244a:	24 30       	cpi	r18, 0x04	; 4
    244c:	31 05       	cpc	r19, r1
    244e:	31 f0       	breq	.+12     	; 0x245c <create_pass+0x3a4>
    2450:	81 c0       	rjmp	.+258    	; 0x2554 <create_pass+0x49c>
		case PASSWORD_MATCH_CONFIRMATION  :
			g_index = menu;
    2452:	83 e0       	ldi	r24, 0x03	; 3
    2454:	80 93 3e 01 	sts	0x013E, r24
			flag = 0;
    2458:	1a ae       	std	Y+58, r1	; 0x3a
    245a:	7c c0       	rjmp	.+248    	; 0x2554 <create_pass+0x49c>
			break;
		case PASSWORD_MATCH_NOT_CONFIRMATION  :
			g_index = createpass;
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	80 93 3e 01 	sts	0x013E, r24
			LCD_clearScreen();
    2462:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_clearScreen>
			LCD_displayString("WRONG PASSWORD");
    2466:	82 e9       	ldi	r24, 0x92	; 146
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_displayString>
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	aa ef       	ldi	r26, 0xFA	; 250
    2474:	b3 e4       	ldi	r27, 0x43	; 67
    2476:	8b 87       	std	Y+11, r24	; 0x0b
    2478:	9c 87       	std	Y+12, r25	; 0x0c
    247a:	ad 87       	std	Y+13, r26	; 0x0d
    247c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    247e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2480:	7c 85       	ldd	r23, Y+12	; 0x0c
    2482:	8d 85       	ldd	r24, Y+13	; 0x0d
    2484:	9e 85       	ldd	r25, Y+14	; 0x0e
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	4a e7       	ldi	r20, 0x7A	; 122
    248c:	53 e4       	ldi	r21, 0x43	; 67
    248e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	8f 83       	std	Y+7, r24	; 0x07
    2498:	98 87       	std	Y+8, r25	; 0x08
    249a:	a9 87       	std	Y+9, r26	; 0x09
    249c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    249e:	6f 81       	ldd	r22, Y+7	; 0x07
    24a0:	78 85       	ldd	r23, Y+8	; 0x08
    24a2:	89 85       	ldd	r24, Y+9	; 0x09
    24a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	40 e8       	ldi	r20, 0x80	; 128
    24ac:	5f e3       	ldi	r21, 0x3F	; 63
    24ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b2:	88 23       	and	r24, r24
    24b4:	2c f4       	brge	.+10     	; 0x24c0 <create_pass+0x408>
		__ticks = 1;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	9e 83       	std	Y+6, r25	; 0x06
    24bc:	8d 83       	std	Y+5, r24	; 0x05
    24be:	3f c0       	rjmp	.+126    	; 0x253e <create_pass+0x486>
	else if (__tmp > 65535)
    24c0:	6f 81       	ldd	r22, Y+7	; 0x07
    24c2:	78 85       	ldd	r23, Y+8	; 0x08
    24c4:	89 85       	ldd	r24, Y+9	; 0x09
    24c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	3f ef       	ldi	r19, 0xFF	; 255
    24cc:	4f e7       	ldi	r20, 0x7F	; 127
    24ce:	57 e4       	ldi	r21, 0x47	; 71
    24d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24d4:	18 16       	cp	r1, r24
    24d6:	4c f5       	brge	.+82     	; 0x252a <create_pass+0x472>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24da:	7c 85       	ldd	r23, Y+12	; 0x0c
    24dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24de:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	40 e2       	ldi	r20, 0x20	; 32
    24e6:	51 e4       	ldi	r21, 0x41	; 65
    24e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	bc 01       	movw	r22, r24
    24f2:	cd 01       	movw	r24, r26
    24f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	9e 83       	std	Y+6, r25	; 0x06
    24fe:	8d 83       	std	Y+5, r24	; 0x05
    2500:	0f c0       	rjmp	.+30     	; 0x2520 <create_pass+0x468>
    2502:	89 e1       	ldi	r24, 0x19	; 25
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	9c 83       	std	Y+4, r25	; 0x04
    2508:	8b 83       	std	Y+3, r24	; 0x03
    250a:	8b 81       	ldd	r24, Y+3	; 0x03
    250c:	9c 81       	ldd	r25, Y+4	; 0x04
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	f1 f7       	brne	.-4      	; 0x250e <create_pass+0x456>
    2512:	9c 83       	std	Y+4, r25	; 0x04
    2514:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2516:	8d 81       	ldd	r24, Y+5	; 0x05
    2518:	9e 81       	ldd	r25, Y+6	; 0x06
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	9e 83       	std	Y+6, r25	; 0x06
    251e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2520:	8d 81       	ldd	r24, Y+5	; 0x05
    2522:	9e 81       	ldd	r25, Y+6	; 0x06
    2524:	00 97       	sbiw	r24, 0x00	; 0
    2526:	69 f7       	brne	.-38     	; 0x2502 <create_pass+0x44a>
    2528:	14 c0       	rjmp	.+40     	; 0x2552 <create_pass+0x49a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    252a:	6f 81       	ldd	r22, Y+7	; 0x07
    252c:	78 85       	ldd	r23, Y+8	; 0x08
    252e:	89 85       	ldd	r24, Y+9	; 0x09
    2530:	9a 85       	ldd	r25, Y+10	; 0x0a
    2532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	9e 83       	std	Y+6, r25	; 0x06
    253c:	8d 83       	std	Y+5, r24	; 0x05
    253e:	8d 81       	ldd	r24, Y+5	; 0x05
    2540:	9e 81       	ldd	r25, Y+6	; 0x06
    2542:	9a 83       	std	Y+2, r25	; 0x02
    2544:	89 83       	std	Y+1, r24	; 0x01
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	9a 81       	ldd	r25, Y+2	; 0x02
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	f1 f7       	brne	.-4      	; 0x254a <create_pass+0x492>
    254e:	9a 83       	std	Y+2, r25	; 0x02
    2550:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			flag = 0;
    2552:	1a ae       	std	Y+58, r1	; 0x3a
		counter++;
		_delay_ms(500);
	}
	UART_sendByte(DONE);

	while (flag) {
    2554:	8a ad       	ldd	r24, Y+58	; 0x3a
    2556:	88 23       	and	r24, r24
    2558:	09 f0       	breq	.+2      	; 0x255c <create_pass+0x4a4>
    255a:	68 cf       	rjmp	.-304    	; 0x242c <create_pass+0x374>
			flag = 0;
			break;
		}

	}
}
    255c:	ee 96       	adiw	r28, 0x3e	; 62
    255e:	0f b6       	in	r0, 0x3f	; 63
    2560:	f8 94       	cli
    2562:	de bf       	out	0x3e, r29	; 62
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	cd bf       	out	0x3d, r28	; 61
    2568:	cf 91       	pop	r28
    256a:	df 91       	pop	r29
    256c:	08 95       	ret

0000256e <check_pass>:

void check_pass(void){
    256e:	df 93       	push	r29
    2570:	cf 93       	push	r28
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	a1 97       	sbiw	r28, 0x21	; 33
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
	uint8 key = 0;
    2582:	1f 8e       	std	Y+31, r1	; 0x1f
	uint8 flag = 1;
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 command = 0;
    2588:	1d 8e       	std	Y+29, r1	; 0x1d
	sendData(PASSWORD_SCREEN  );
    258a:	85 e0       	ldi	r24, 0x05	; 5
    258c:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <sendData>
	LCD_clearScreen();
    2590:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_clearScreen>
	if(g_flag)
    2594:	80 91 3f 01 	lds	r24, 0x013F
    2598:	88 23       	and	r24, r24
    259a:	29 f0       	breq	.+10     	; 0x25a6 <check_pass+0x38>
	{
		LCD_displayString("ENTER OLD PASSWORD");
    259c:	81 ea       	ldi	r24, 0xA1	; 161
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_displayString>
    25a4:	04 c0       	rjmp	.+8      	; 0x25ae <check_pass+0x40>
	}
	else
	{
		LCD_displayString("ENTER NEW PASSWORD");
    25a6:	84 eb       	ldi	r24, 0xB4	; 180
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_displayString>
	}
	LCD_moveCursor(1, 0);
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	60 e0       	ldi	r22, 0x00	; 0
    25b2:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_moveCursor>
	while (UART_recieveByte() != GET_PASSWORD_DONE);
    25b6:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_recieveByte>
    25ba:	8c 30       	cpi	r24, 0x0C	; 12
    25bc:	e1 f7       	brne	.-8      	; 0x25b6 <check_pass+0x48>

	/* sending to CONTROL_ECU ECU_READY signal */
	UART_sendByte(ECU_READY);
    25be:	81 e1       	ldi	r24, 0x11	; 17
    25c0:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_sendByte>
	do {
		key = KEYPAD_getPressedKey();
    25c4:	0e 94 a8 09 	call	0x1350	; 0x1350 <KEYPAD_getPressedKey>
    25c8:	8f 8f       	std	Y+31, r24	; 0x1f
		UART_sendByte(key);
    25ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25cc:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_sendByte>
		if (key != '#')
    25d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25d2:	83 32       	cpi	r24, 0x23	; 35
    25d4:	19 f0       	breq	.+6      	; 0x25dc <check_pass+0x6e>
			LCD_displayCharacter('*');
    25d6:	8a e2       	ldi	r24, 0x2A	; 42
    25d8:	0e 94 cb 0c 	call	0x1996	; 0x1996 <LCD_displayCharacter>
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	aa ef       	ldi	r26, 0xFA	; 250
    25e2:	b3 e4       	ldi	r27, 0x43	; 67
    25e4:	89 8f       	std	Y+25, r24	; 0x19
    25e6:	9a 8f       	std	Y+26, r25	; 0x1a
    25e8:	ab 8f       	std	Y+27, r26	; 0x1b
    25ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ec:	69 8d       	ldd	r22, Y+25	; 0x19
    25ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	4a e7       	ldi	r20, 0x7A	; 122
    25fa:	53 e4       	ldi	r21, 0x43	; 67
    25fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	8d 8b       	std	Y+21, r24	; 0x15
    2606:	9e 8b       	std	Y+22, r25	; 0x16
    2608:	af 8b       	std	Y+23, r26	; 0x17
    260a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    260c:	6d 89       	ldd	r22, Y+21	; 0x15
    260e:	7e 89       	ldd	r23, Y+22	; 0x16
    2610:	8f 89       	ldd	r24, Y+23	; 0x17
    2612:	98 8d       	ldd	r25, Y+24	; 0x18
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e8       	ldi	r20, 0x80	; 128
    261a:	5f e3       	ldi	r21, 0x3F	; 63
    261c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2620:	88 23       	and	r24, r24
    2622:	2c f4       	brge	.+10     	; 0x262e <check_pass+0xc0>
		__ticks = 1;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	9c 8b       	std	Y+20, r25	; 0x14
    262a:	8b 8b       	std	Y+19, r24	; 0x13
    262c:	3f c0       	rjmp	.+126    	; 0x26ac <check_pass+0x13e>
	else if (__tmp > 65535)
    262e:	6d 89       	ldd	r22, Y+21	; 0x15
    2630:	7e 89       	ldd	r23, Y+22	; 0x16
    2632:	8f 89       	ldd	r24, Y+23	; 0x17
    2634:	98 8d       	ldd	r25, Y+24	; 0x18
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	3f ef       	ldi	r19, 0xFF	; 255
    263a:	4f e7       	ldi	r20, 0x7F	; 127
    263c:	57 e4       	ldi	r21, 0x47	; 71
    263e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2642:	18 16       	cp	r1, r24
    2644:	4c f5       	brge	.+82     	; 0x2698 <check_pass+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2646:	69 8d       	ldd	r22, Y+25	; 0x19
    2648:	7a 8d       	ldd	r23, Y+26	; 0x1a
    264a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    264c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e2       	ldi	r20, 0x20	; 32
    2654:	51 e4       	ldi	r21, 0x41	; 65
    2656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	bc 01       	movw	r22, r24
    2660:	cd 01       	movw	r24, r26
    2662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	9c 8b       	std	Y+20, r25	; 0x14
    266c:	8b 8b       	std	Y+19, r24	; 0x13
    266e:	0f c0       	rjmp	.+30     	; 0x268e <check_pass+0x120>
    2670:	89 e1       	ldi	r24, 0x19	; 25
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	9a 8b       	std	Y+18, r25	; 0x12
    2676:	89 8b       	std	Y+17, r24	; 0x11
    2678:	89 89       	ldd	r24, Y+17	; 0x11
    267a:	9a 89       	ldd	r25, Y+18	; 0x12
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	f1 f7       	brne	.-4      	; 0x267c <check_pass+0x10e>
    2680:	9a 8b       	std	Y+18, r25	; 0x12
    2682:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2684:	8b 89       	ldd	r24, Y+19	; 0x13
    2686:	9c 89       	ldd	r25, Y+20	; 0x14
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	9c 8b       	std	Y+20, r25	; 0x14
    268c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268e:	8b 89       	ldd	r24, Y+19	; 0x13
    2690:	9c 89       	ldd	r25, Y+20	; 0x14
    2692:	00 97       	sbiw	r24, 0x00	; 0
    2694:	69 f7       	brne	.-38     	; 0x2670 <check_pass+0x102>
    2696:	14 c0       	rjmp	.+40     	; 0x26c0 <check_pass+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2698:	6d 89       	ldd	r22, Y+21	; 0x15
    269a:	7e 89       	ldd	r23, Y+22	; 0x16
    269c:	8f 89       	ldd	r24, Y+23	; 0x17
    269e:	98 8d       	ldd	r25, Y+24	; 0x18
    26a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	9c 8b       	std	Y+20, r25	; 0x14
    26aa:	8b 8b       	std	Y+19, r24	; 0x13
    26ac:	8b 89       	ldd	r24, Y+19	; 0x13
    26ae:	9c 89       	ldd	r25, Y+20	; 0x14
    26b0:	98 8b       	std	Y+16, r25	; 0x10
    26b2:	8f 87       	std	Y+15, r24	; 0x0f
    26b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b6:	98 89       	ldd	r25, Y+16	; 0x10
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	f1 f7       	brne	.-4      	; 0x26b8 <check_pass+0x14a>
    26bc:	98 8b       	std	Y+16, r25	; 0x10
    26be:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
	} while (key != '#');
    26c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26c2:	83 32       	cpi	r24, 0x23	; 35
    26c4:	09 f0       	breq	.+2      	; 0x26c8 <check_pass+0x15a>
    26c6:	7e cf       	rjmp	.-260    	; 0x25c4 <check_pass+0x56>

	UART_sendByte(DONE);
    26c8:	8a e0       	ldi	r24, 0x0A	; 10
    26ca:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_sendByte>
    26ce:	a7 c0       	rjmp	.+334    	; 0x281e <check_pass+0x2b0>

	while (flag) {
		command = UART_recieveByte();
    26d0:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_recieveByte>
    26d4:	8d 8f       	std	Y+29, r24	; 0x1d
		switch (command) {
    26d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26d8:	28 2f       	mov	r18, r24
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	39 a3       	std	Y+33, r19	; 0x21
    26de:	28 a3       	std	Y+32, r18	; 0x20
    26e0:	88 a1       	ldd	r24, Y+32	; 0x20
    26e2:	99 a1       	ldd	r25, Y+33	; 0x21
    26e4:	84 30       	cpi	r24, 0x04	; 4
    26e6:	91 05       	cpc	r25, r1
    26e8:	c9 f0       	breq	.+50     	; 0x271c <check_pass+0x1ae>
    26ea:	28 a1       	ldd	r18, Y+32	; 0x20
    26ec:	39 a1       	ldd	r19, Y+33	; 0x21
    26ee:	2b 30       	cpi	r18, 0x0B	; 11
    26f0:	31 05       	cpc	r19, r1
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <check_pass+0x188>
    26f4:	90 c0       	rjmp	.+288    	; 0x2816 <check_pass+0x2a8>
    26f6:	88 a1       	ldd	r24, Y+32	; 0x20
    26f8:	99 a1       	ldd	r25, Y+33	; 0x21
    26fa:	83 30       	cpi	r24, 0x03	; 3
    26fc:	91 05       	cpc	r25, r1
    26fe:	09 f0       	breq	.+2      	; 0x2702 <check_pass+0x194>
    2700:	8e c0       	rjmp	.+284    	; 0x281e <check_pass+0x2b0>
		case PASSWORD_MATCH_CONFIRMATION  :

			if (g_choice==0) {
    2702:	80 91 22 01 	lds	r24, 0x0122
    2706:	88 23       	and	r24, r24
    2708:	21 f4       	brne	.+8      	; 0x2712 <check_pass+0x1a4>
				g_index = Door;
    270a:	84 e0       	ldi	r24, 0x04	; 4
    270c:	80 93 3e 01 	sts	0x013E, r24
    2710:	03 c0       	rjmp	.+6      	; 0x2718 <check_pass+0x1aa>
			}
			else {
				g_index = createpass;
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	80 93 3e 01 	sts	0x013E, r24
			}

			flag = 0;
    2718:	1e 8e       	std	Y+30, r1	; 0x1e
    271a:	81 c0       	rjmp	.+258    	; 0x281e <check_pass+0x2b0>
			break;
		case PASSWORD_MATCH_NOT_CONFIRMATION  :
			g_index = checkpass;
    271c:	82 e0       	ldi	r24, 0x02	; 2
    271e:	80 93 3e 01 	sts	0x013E, r24
			LCD_clearScreen();
    2722:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_clearScreen>
			LCD_displayString("WRONG PASSWORD");
    2726:	82 e9       	ldi	r24, 0x92	; 146
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_displayString>
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	aa ef       	ldi	r26, 0xFA	; 250
    2734:	b3 e4       	ldi	r27, 0x43	; 67
    2736:	8b 87       	std	Y+11, r24	; 0x0b
    2738:	9c 87       	std	Y+12, r25	; 0x0c
    273a:	ad 87       	std	Y+13, r26	; 0x0d
    273c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2740:	7c 85       	ldd	r23, Y+12	; 0x0c
    2742:	8d 85       	ldd	r24, Y+13	; 0x0d
    2744:	9e 85       	ldd	r25, Y+14	; 0x0e
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	4a e7       	ldi	r20, 0x7A	; 122
    274c:	53 e4       	ldi	r21, 0x43	; 67
    274e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	8f 83       	std	Y+7, r24	; 0x07
    2758:	98 87       	std	Y+8, r25	; 0x08
    275a:	a9 87       	std	Y+9, r26	; 0x09
    275c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    275e:	6f 81       	ldd	r22, Y+7	; 0x07
    2760:	78 85       	ldd	r23, Y+8	; 0x08
    2762:	89 85       	ldd	r24, Y+9	; 0x09
    2764:	9a 85       	ldd	r25, Y+10	; 0x0a
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e8       	ldi	r20, 0x80	; 128
    276c:	5f e3       	ldi	r21, 0x3F	; 63
    276e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2772:	88 23       	and	r24, r24
    2774:	2c f4       	brge	.+10     	; 0x2780 <check_pass+0x212>
		__ticks = 1;
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	9e 83       	std	Y+6, r25	; 0x06
    277c:	8d 83       	std	Y+5, r24	; 0x05
    277e:	3f c0       	rjmp	.+126    	; 0x27fe <check_pass+0x290>
	else if (__tmp > 65535)
    2780:	6f 81       	ldd	r22, Y+7	; 0x07
    2782:	78 85       	ldd	r23, Y+8	; 0x08
    2784:	89 85       	ldd	r24, Y+9	; 0x09
    2786:	9a 85       	ldd	r25, Y+10	; 0x0a
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	3f ef       	ldi	r19, 0xFF	; 255
    278c:	4f e7       	ldi	r20, 0x7F	; 127
    278e:	57 e4       	ldi	r21, 0x47	; 71
    2790:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2794:	18 16       	cp	r1, r24
    2796:	4c f5       	brge	.+82     	; 0x27ea <check_pass+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2798:	6b 85       	ldd	r22, Y+11	; 0x0b
    279a:	7c 85       	ldd	r23, Y+12	; 0x0c
    279c:	8d 85       	ldd	r24, Y+13	; 0x0d
    279e:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e2       	ldi	r20, 0x20	; 32
    27a6:	51 e4       	ldi	r21, 0x41	; 65
    27a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	bc 01       	movw	r22, r24
    27b2:	cd 01       	movw	r24, r26
    27b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	9e 83       	std	Y+6, r25	; 0x06
    27be:	8d 83       	std	Y+5, r24	; 0x05
    27c0:	0f c0       	rjmp	.+30     	; 0x27e0 <check_pass+0x272>
    27c2:	89 e1       	ldi	r24, 0x19	; 25
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	9c 83       	std	Y+4, r25	; 0x04
    27c8:	8b 83       	std	Y+3, r24	; 0x03
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	9c 81       	ldd	r25, Y+4	; 0x04
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	f1 f7       	brne	.-4      	; 0x27ce <check_pass+0x260>
    27d2:	9c 83       	std	Y+4, r25	; 0x04
    27d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d6:	8d 81       	ldd	r24, Y+5	; 0x05
    27d8:	9e 81       	ldd	r25, Y+6	; 0x06
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	9e 83       	std	Y+6, r25	; 0x06
    27de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e0:	8d 81       	ldd	r24, Y+5	; 0x05
    27e2:	9e 81       	ldd	r25, Y+6	; 0x06
    27e4:	00 97       	sbiw	r24, 0x00	; 0
    27e6:	69 f7       	brne	.-38     	; 0x27c2 <check_pass+0x254>
    27e8:	14 c0       	rjmp	.+40     	; 0x2812 <check_pass+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ea:	6f 81       	ldd	r22, Y+7	; 0x07
    27ec:	78 85       	ldd	r23, Y+8	; 0x08
    27ee:	89 85       	ldd	r24, Y+9	; 0x09
    27f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	9e 83       	std	Y+6, r25	; 0x06
    27fc:	8d 83       	std	Y+5, r24	; 0x05
    27fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2800:	9e 81       	ldd	r25, Y+6	; 0x06
    2802:	9a 83       	std	Y+2, r25	; 0x02
    2804:	89 83       	std	Y+1, r24	; 0x01
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	9a 81       	ldd	r25, Y+2	; 0x02
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	f1 f7       	brne	.-4      	; 0x280a <check_pass+0x29c>
    280e:	9a 83       	std	Y+2, r25	; 0x02
    2810:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			flag = 0;
    2812:	1e 8e       	std	Y+30, r1	; 0x1e
    2814:	04 c0       	rjmp	.+8      	; 0x281e <check_pass+0x2b0>
			break;
		case ALARM  :
			g_index =Buzzer;
    2816:	85 e0       	ldi	r24, 0x05	; 5
    2818:	80 93 3e 01 	sts	0x013E, r24
			flag = 0;
    281c:	1e 8e       	std	Y+30, r1	; 0x1e
		_delay_ms(500);
	} while (key != '#');

	UART_sendByte(DONE);

	while (flag) {
    281e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2820:	88 23       	and	r24, r24
    2822:	09 f0       	breq	.+2      	; 0x2826 <check_pass+0x2b8>
    2824:	55 cf       	rjmp	.-342    	; 0x26d0 <check_pass+0x162>
		default:
			break;
		}

	}
}
    2826:	a1 96       	adiw	r28, 0x21	; 33
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	08 95       	ret

00002838 <main_menu>:

void main_menu(void)
{
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
    2840:	6d 97       	sbiw	r28, 0x1d	; 29
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	de bf       	out	0x3e, r29	; 62
    2848:	0f be       	out	0x3f, r0	; 63
    284a:	cd bf       	out	0x3d, r28	; 61
	uint8 key=0;
    284c:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_clearScreen ();
    284e:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_clearScreen>
	sendData(REQUEST_SCREEN  );
    2852:	86 e0       	ldi	r24, 0x06	; 6
    2854:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <sendData>
	LCD_moveCursor (0,0);
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_moveCursor>
	LCD_displayString ("#: Change PW");
    2860:	87 ec       	ldi	r24, 0xC7	; 199
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_displayString>
	LCD_moveCursor (1,0);
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	60 e0       	ldi	r22, 0x00	; 0
    286c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_moveCursor>
	LCD_displayString ("*: Open Door");
    2870:	84 ed       	ldi	r24, 0xD4	; 212
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_displayString>
	key = KEYPAD_getPressedKey();
    2878:	0e 94 a8 09 	call	0x1350	; 0x1350 <KEYPAD_getPressedKey>
    287c:	8d 8f       	std	Y+29, r24	; 0x1d
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	aa ef       	ldi	r26, 0xFA	; 250
    2884:	b3 e4       	ldi	r27, 0x43	; 67
    2886:	89 8f       	std	Y+25, r24	; 0x19
    2888:	9a 8f       	std	Y+26, r25	; 0x1a
    288a:	ab 8f       	std	Y+27, r26	; 0x1b
    288c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    288e:	69 8d       	ldd	r22, Y+25	; 0x19
    2890:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2892:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2894:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	4a e7       	ldi	r20, 0x7A	; 122
    289c:	53 e4       	ldi	r21, 0x43	; 67
    289e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	8d 8b       	std	Y+21, r24	; 0x15
    28a8:	9e 8b       	std	Y+22, r25	; 0x16
    28aa:	af 8b       	std	Y+23, r26	; 0x17
    28ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28ae:	6d 89       	ldd	r22, Y+21	; 0x15
    28b0:	7e 89       	ldd	r23, Y+22	; 0x16
    28b2:	8f 89       	ldd	r24, Y+23	; 0x17
    28b4:	98 8d       	ldd	r25, Y+24	; 0x18
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e8       	ldi	r20, 0x80	; 128
    28bc:	5f e3       	ldi	r21, 0x3F	; 63
    28be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28c2:	88 23       	and	r24, r24
    28c4:	2c f4       	brge	.+10     	; 0x28d0 <main_menu+0x98>
		__ticks = 1;
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	9c 8b       	std	Y+20, r25	; 0x14
    28cc:	8b 8b       	std	Y+19, r24	; 0x13
    28ce:	3f c0       	rjmp	.+126    	; 0x294e <main_menu+0x116>
	else if (__tmp > 65535)
    28d0:	6d 89       	ldd	r22, Y+21	; 0x15
    28d2:	7e 89       	ldd	r23, Y+22	; 0x16
    28d4:	8f 89       	ldd	r24, Y+23	; 0x17
    28d6:	98 8d       	ldd	r25, Y+24	; 0x18
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	3f ef       	ldi	r19, 0xFF	; 255
    28dc:	4f e7       	ldi	r20, 0x7F	; 127
    28de:	57 e4       	ldi	r21, 0x47	; 71
    28e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28e4:	18 16       	cp	r1, r24
    28e6:	4c f5       	brge	.+82     	; 0x293a <main_menu+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e8:	69 8d       	ldd	r22, Y+25	; 0x19
    28ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	40 e2       	ldi	r20, 0x20	; 32
    28f6:	51 e4       	ldi	r21, 0x41	; 65
    28f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	bc 01       	movw	r22, r24
    2902:	cd 01       	movw	r24, r26
    2904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	9c 8b       	std	Y+20, r25	; 0x14
    290e:	8b 8b       	std	Y+19, r24	; 0x13
    2910:	0f c0       	rjmp	.+30     	; 0x2930 <main_menu+0xf8>
    2912:	89 e1       	ldi	r24, 0x19	; 25
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	9a 8b       	std	Y+18, r25	; 0x12
    2918:	89 8b       	std	Y+17, r24	; 0x11
    291a:	89 89       	ldd	r24, Y+17	; 0x11
    291c:	9a 89       	ldd	r25, Y+18	; 0x12
    291e:	01 97       	sbiw	r24, 0x01	; 1
    2920:	f1 f7       	brne	.-4      	; 0x291e <main_menu+0xe6>
    2922:	9a 8b       	std	Y+18, r25	; 0x12
    2924:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2926:	8b 89       	ldd	r24, Y+19	; 0x13
    2928:	9c 89       	ldd	r25, Y+20	; 0x14
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	9c 8b       	std	Y+20, r25	; 0x14
    292e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2930:	8b 89       	ldd	r24, Y+19	; 0x13
    2932:	9c 89       	ldd	r25, Y+20	; 0x14
    2934:	00 97       	sbiw	r24, 0x00	; 0
    2936:	69 f7       	brne	.-38     	; 0x2912 <main_menu+0xda>
    2938:	14 c0       	rjmp	.+40     	; 0x2962 <main_menu+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293a:	6d 89       	ldd	r22, Y+21	; 0x15
    293c:	7e 89       	ldd	r23, Y+22	; 0x16
    293e:	8f 89       	ldd	r24, Y+23	; 0x17
    2940:	98 8d       	ldd	r25, Y+24	; 0x18
    2942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	9c 8b       	std	Y+20, r25	; 0x14
    294c:	8b 8b       	std	Y+19, r24	; 0x13
    294e:	8b 89       	ldd	r24, Y+19	; 0x13
    2950:	9c 89       	ldd	r25, Y+20	; 0x14
    2952:	98 8b       	std	Y+16, r25	; 0x10
    2954:	8f 87       	std	Y+15, r24	; 0x0f
    2956:	8f 85       	ldd	r24, Y+15	; 0x0f
    2958:	98 89       	ldd	r25, Y+16	; 0x10
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	f1 f7       	brne	.-4      	; 0x295a <main_menu+0x122>
    295e:	98 8b       	std	Y+16, r25	; 0x10
    2960:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	if (key == '#') {
    2962:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2964:	83 32       	cpi	r24, 0x23	; 35
    2966:	39 f4       	brne	.+14     	; 0x2976 <main_menu+0x13e>
		g_index = checkpass;
    2968:	82 e0       	ldi	r24, 0x02	; 2
    296a:	80 93 3e 01 	sts	0x013E, r24
		g_choice = 1;
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	80 93 22 01 	sts	0x0122, r24
    2974:	11 c0       	rjmp	.+34     	; 0x2998 <main_menu+0x160>
	} else if (key == '*') {
    2976:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2978:	8a 32       	cpi	r24, 0x2A	; 42
    297a:	49 f4       	brne	.+18     	; 0x298e <main_menu+0x156>
		g_index = checkpass;
    297c:	82 e0       	ldi	r24, 0x02	; 2
    297e:	80 93 3e 01 	sts	0x013E, r24
		g_choice = 0;
    2982:	10 92 22 01 	sts	0x0122, r1
		g_flag = 1;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	80 93 3f 01 	sts	0x013F, r24
    298c:	05 c0       	rjmp	.+10     	; 0x2998 <main_menu+0x160>
	} else {
		LCD_clearScreen();
    298e:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_clearScreen>
		g_index = menu;
    2992:	83 e0       	ldi	r24, 0x03	; 3
    2994:	80 93 3e 01 	sts	0x013E, r24
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	aa ef       	ldi	r26, 0xFA	; 250
    299e:	b3 e4       	ldi	r27, 0x43	; 67
    29a0:	8b 87       	std	Y+11, r24	; 0x0b
    29a2:	9c 87       	std	Y+12, r25	; 0x0c
    29a4:	ad 87       	std	Y+13, r26	; 0x0d
    29a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	4a e7       	ldi	r20, 0x7A	; 122
    29b6:	53 e4       	ldi	r21, 0x43	; 67
    29b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	8f 83       	std	Y+7, r24	; 0x07
    29c2:	98 87       	std	Y+8, r25	; 0x08
    29c4:	a9 87       	std	Y+9, r26	; 0x09
    29c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29c8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ca:	78 85       	ldd	r23, Y+8	; 0x08
    29cc:	89 85       	ldd	r24, Y+9	; 0x09
    29ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	40 e8       	ldi	r20, 0x80	; 128
    29d6:	5f e3       	ldi	r21, 0x3F	; 63
    29d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29dc:	88 23       	and	r24, r24
    29de:	2c f4       	brge	.+10     	; 0x29ea <main_menu+0x1b2>
		__ticks = 1;
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	9e 83       	std	Y+6, r25	; 0x06
    29e6:	8d 83       	std	Y+5, r24	; 0x05
    29e8:	3f c0       	rjmp	.+126    	; 0x2a68 <main_menu+0x230>
	else if (__tmp > 65535)
    29ea:	6f 81       	ldd	r22, Y+7	; 0x07
    29ec:	78 85       	ldd	r23, Y+8	; 0x08
    29ee:	89 85       	ldd	r24, Y+9	; 0x09
    29f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	3f ef       	ldi	r19, 0xFF	; 255
    29f6:	4f e7       	ldi	r20, 0x7F	; 127
    29f8:	57 e4       	ldi	r21, 0x47	; 71
    29fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29fe:	18 16       	cp	r1, r24
    2a00:	4c f5       	brge	.+82     	; 0x2a54 <main_menu+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	40 e2       	ldi	r20, 0x20	; 32
    2a10:	51 e4       	ldi	r21, 0x41	; 65
    2a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	bc 01       	movw	r22, r24
    2a1c:	cd 01       	movw	r24, r26
    2a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	9e 83       	std	Y+6, r25	; 0x06
    2a28:	8d 83       	std	Y+5, r24	; 0x05
    2a2a:	0f c0       	rjmp	.+30     	; 0x2a4a <main_menu+0x212>
    2a2c:	89 e1       	ldi	r24, 0x19	; 25
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	9c 83       	std	Y+4, r25	; 0x04
    2a32:	8b 83       	std	Y+3, r24	; 0x03
    2a34:	8b 81       	ldd	r24, Y+3	; 0x03
    2a36:	9c 81       	ldd	r25, Y+4	; 0x04
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	f1 f7       	brne	.-4      	; 0x2a38 <main_menu+0x200>
    2a3c:	9c 83       	std	Y+4, r25	; 0x04
    2a3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a40:	8d 81       	ldd	r24, Y+5	; 0x05
    2a42:	9e 81       	ldd	r25, Y+6	; 0x06
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	9e 83       	std	Y+6, r25	; 0x06
    2a48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4e:	00 97       	sbiw	r24, 0x00	; 0
    2a50:	69 f7       	brne	.-38     	; 0x2a2c <main_menu+0x1f4>
    2a52:	14 c0       	rjmp	.+40     	; 0x2a7c <main_menu+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a54:	6f 81       	ldd	r22, Y+7	; 0x07
    2a56:	78 85       	ldd	r23, Y+8	; 0x08
    2a58:	89 85       	ldd	r24, Y+9	; 0x09
    2a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	9e 83       	std	Y+6, r25	; 0x06
    2a66:	8d 83       	std	Y+5, r24	; 0x05
    2a68:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6c:	9a 83       	std	Y+2, r25	; 0x02
    2a6e:	89 83       	std	Y+1, r24	; 0x01
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	9a 81       	ldd	r25, Y+2	; 0x02
    2a74:	01 97       	sbiw	r24, 0x01	; 1
    2a76:	f1 f7       	brne	.-4      	; 0x2a74 <main_menu+0x23c>
    2a78:	9a 83       	std	Y+2, r25	; 0x02
    2a7a:	89 83       	std	Y+1, r24	; 0x01

	}
	_delay_ms(500);
}
    2a7c:	6d 96       	adiw	r28, 0x1d	; 29
    2a7e:	0f b6       	in	r0, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	de bf       	out	0x3e, r29	; 62
    2a84:	0f be       	out	0x3f, r0	; 63
    2a86:	cd bf       	out	0x3d, r28	; 61
    2a88:	cf 91       	pop	r28
    2a8a:	df 91       	pop	r29
    2a8c:	08 95       	ret

00002a8e <Door_screen>:
void Door_screen(void){
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
    2a96:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_clearScreen>
	sendData(OPEN_DOOR  );
    2a9a:	87 e0       	ldi	r24, 0x07	; 7
    2a9c:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <sendData>
	while (UART_recieveByte() != DOOR_IS_OPENNING  );
    2aa0:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_recieveByte>
    2aa4:	88 30       	cpi	r24, 0x08	; 8
    2aa6:	e1 f7       	brne	.-8      	; 0x2aa0 <Door_screen+0x12>
	LCD_displayString ("DOOR IS UNLOCKING");
    2aa8:	81 ee       	ldi	r24, 0xE1	; 225
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_displayString>
	while (UART_recieveByte() != DOOR_IS_LOCKING  );
    2ab0:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_recieveByte>
    2ab4:	89 30       	cpi	r24, 0x09	; 9
    2ab6:	e1 f7       	brne	.-8      	; 0x2ab0 <Door_screen+0x22>
	LCD_clearScreen();
    2ab8:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_clearScreen>
	LCD_displayString("DOOR IS LOCKING");
    2abc:	83 ef       	ldi	r24, 0xF3	; 243
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_displayString>
	while (UART_recieveByte() != DONE);
    2ac4:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_recieveByte>
    2ac8:	8a 30       	cpi	r24, 0x0A	; 10
    2aca:	e1 f7       	brne	.-8      	; 0x2ac4 <Door_screen+0x36>
	g_index = menu;
    2acc:	83 e0       	ldi	r24, 0x03	; 3
    2ace:	80 93 3e 01 	sts	0x013E, r24

}
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <Buzzer_Screen>:
void Buzzer_Screen(void){
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
	Timer1_init(&Timer1_Configuration);
    2ae0:	8f e2       	ldi	r24, 0x2F	; 47
    2ae2:	91 e0       	ldi	r25, 0x01	; 1
    2ae4:	0e 94 d6 05 	call	0xbac	; 0xbac <Timer1_init>
	LCD_clearScreen();
    2ae8:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_clearScreen>
	LCD_displayString("CALLING THE ");
    2aec:	83 e0       	ldi	r24, 0x03	; 3
    2aee:	91 e0       	ldi	r25, 0x01	; 1
    2af0:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_displayString>
	LCD_moveCursor(1,0);
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	60 e0       	ldi	r22, 0x00	; 0
    2af8:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <LCD_moveCursor>
	LCD_displayString("POLICE!! ");
    2afc:	80 e1       	ldi	r24, 0x10	; 16
    2afe:	91 e0       	ldi	r25, 0x01	; 1
    2b00:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <LCD_displayString>
	while (UART_recieveByte() != DONE);
    2b04:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_recieveByte>
    2b08:	8a 30       	cpi	r24, 0x0A	; 10
    2b0a:	e1 f7       	brne	.-8      	; 0x2b04 <Buzzer_Screen+0x2c>
	g_index = Welcome;
    2b0c:	10 92 3e 01 	sts	0x013E, r1
}
    2b10:	cf 91       	pop	r28
    2b12:	df 91       	pop	r29
    2b14:	08 95       	ret

00002b16 <sendData>:
void sendData(uint8 data)
{
    2b16:	df 93       	push	r29
    2b18:	cf 93       	push	r28
    2b1a:	0f 92       	push	r0
    2b1c:	cd b7       	in	r28, 0x3d	; 61
    2b1e:	de b7       	in	r29, 0x3e	; 62
    2b20:	89 83       	std	Y+1, r24	; 0x01
	/* sending to CONTROL_ECU ECU_READY signal */
	UART_sendByte(ECU_READY);
    2b22:	81 e1       	ldi	r24, 0x11	; 17
    2b24:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_sendByte>
	/* looping until CONTROL_ECU send ECU_READY signal */
	while (UART_recieveByte() != ECU_READY)
    2b28:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_recieveByte>
    2b2c:	81 31       	cpi	r24, 0x11	; 17
    2b2e:	e1 f7       	brne	.-8      	; 0x2b28 <sendData+0x12>
		;
	UART_sendByte(data);
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_sendByte>
	/* looping until CONTROL_ECU send ECU_READY signal */
	while (UART_recieveByte() != ECU_READY);
    2b36:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_recieveByte>
    2b3a:	81 31       	cpi	r24, 0x11	; 17
    2b3c:	e1 f7       	brne	.-8      	; 0x2b36 <sendData+0x20>

}
    2b3e:	0f 90       	pop	r0
    2b40:	cf 91       	pop	r28
    2b42:	df 91       	pop	r29
    2b44:	08 95       	ret

00002b46 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2b46:	df 93       	push	r29
    2b48:	cf 93       	push	r28
    2b4a:	00 d0       	rcall	.+0      	; 0x2b4c <UART_init+0x6>
    2b4c:	00 d0       	rcall	.+0      	; 0x2b4e <UART_init+0x8>
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
    2b52:	9c 83       	std	Y+4, r25	; 0x04
    2b54:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2b56:	1a 82       	std	Y+2, r1	; 0x02
    2b58:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2b5a:	eb e2       	ldi	r30, 0x2B	; 43
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	82 e0       	ldi	r24, 0x02	; 2
    2b60:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN)|(((Config_Ptr->bit_data)&0b0100)<<UCSZ2);
    2b62:	aa e2       	ldi	r26, 0x2A	; 42
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	eb 81       	ldd	r30, Y+3	; 0x03
    2b68:	fc 81       	ldd	r31, Y+4	; 0x04
    2b6a:	80 81       	ld	r24, Z
    2b6c:	88 2f       	mov	r24, r24
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	84 70       	andi	r24, 0x04	; 4
    2b72:	90 70       	andi	r25, 0x00	; 0
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	88 0f       	add	r24, r24
    2b7a:	99 1f       	adc	r25, r25
    2b7c:	88 61       	ori	r24, 0x18	; 24
    2b7e:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (((Config_Ptr->bit_data)&0b0001)<<UCSZ0) | (((Config_Ptr->bit_data)&0b0010)<<UCSZ1);
    2b80:	a0 e4       	ldi	r26, 0x40	; 64
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	eb 81       	ldd	r30, Y+3	; 0x03
    2b86:	fc 81       	ldd	r31, Y+4	; 0x04
    2b88:	80 81       	ld	r24, Z
    2b8a:	88 2f       	mov	r24, r24
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	81 70       	andi	r24, 0x01	; 1
    2b90:	90 70       	andi	r25, 0x00	; 0
    2b92:	88 0f       	add	r24, r24
    2b94:	99 1f       	adc	r25, r25
    2b96:	28 2f       	mov	r18, r24
    2b98:	20 68       	ori	r18, 0x80	; 128
    2b9a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b9c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b9e:	80 81       	ld	r24, Z
    2ba0:	88 2f       	mov	r24, r24
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	82 70       	andi	r24, 0x02	; 2
    2ba6:	90 70       	andi	r25, 0x00	; 0
    2ba8:	88 0f       	add	r24, r24
    2baa:	99 1f       	adc	r25, r25
    2bac:	88 0f       	add	r24, r24
    2bae:	99 1f       	adc	r25, r25
    2bb0:	82 2b       	or	r24, r18
    2bb2:	8c 93       	st	X, r24
	UCSRC |= ((Config_Ptr->stop_bit)<<USBS) | ((Config_Ptr->parity)<<UPM0);
    2bb4:	a0 e4       	ldi	r26, 0x40	; 64
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	e0 e4       	ldi	r30, 0x40	; 64
    2bba:	f0 e0       	ldi	r31, 0x00	; 0
    2bbc:	80 81       	ld	r24, Z
    2bbe:	38 2f       	mov	r19, r24
    2bc0:	eb 81       	ldd	r30, Y+3	; 0x03
    2bc2:	fc 81       	ldd	r31, Y+4	; 0x04
    2bc4:	82 81       	ldd	r24, Z+2	; 0x02
    2bc6:	88 2f       	mov	r24, r24
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	88 0f       	add	r24, r24
    2bcc:	99 1f       	adc	r25, r25
    2bce:	88 0f       	add	r24, r24
    2bd0:	99 1f       	adc	r25, r25
    2bd2:	88 0f       	add	r24, r24
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	28 2f       	mov	r18, r24
    2bd8:	eb 81       	ldd	r30, Y+3	; 0x03
    2bda:	fc 81       	ldd	r31, Y+4	; 0x04
    2bdc:	81 81       	ldd	r24, Z+1	; 0x01
    2bde:	88 2f       	mov	r24, r24
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	82 95       	swap	r24
    2be4:	92 95       	swap	r25
    2be6:	90 7f       	andi	r25, 0xF0	; 240
    2be8:	98 27       	eor	r25, r24
    2bea:	80 7f       	andi	r24, 0xF0	; 240
    2bec:	98 27       	eor	r25, r24
    2bee:	82 2b       	or	r24, r18
    2bf0:	83 2b       	or	r24, r19
    2bf2:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2bf4:	eb 81       	ldd	r30, Y+3	; 0x03
    2bf6:	fc 81       	ldd	r31, Y+4	; 0x04
    2bf8:	83 81       	ldd	r24, Z+3	; 0x03
    2bfa:	94 81       	ldd	r25, Z+4	; 0x04
    2bfc:	a5 81       	ldd	r26, Z+5	; 0x05
    2bfe:	b6 81       	ldd	r27, Z+6	; 0x06
    2c00:	88 0f       	add	r24, r24
    2c02:	99 1f       	adc	r25, r25
    2c04:	aa 1f       	adc	r26, r26
    2c06:	bb 1f       	adc	r27, r27
    2c08:	88 0f       	add	r24, r24
    2c0a:	99 1f       	adc	r25, r25
    2c0c:	aa 1f       	adc	r26, r26
    2c0e:	bb 1f       	adc	r27, r27
    2c10:	88 0f       	add	r24, r24
    2c12:	99 1f       	adc	r25, r25
    2c14:	aa 1f       	adc	r26, r26
    2c16:	bb 1f       	adc	r27, r27
    2c18:	9c 01       	movw	r18, r24
    2c1a:	ad 01       	movw	r20, r26
    2c1c:	80 e4       	ldi	r24, 0x40	; 64
    2c1e:	92 e4       	ldi	r25, 0x42	; 66
    2c20:	af e0       	ldi	r26, 0x0F	; 15
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	bc 01       	movw	r22, r24
    2c26:	cd 01       	movw	r24, r26
    2c28:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__udivmodsi4>
    2c2c:	da 01       	movw	r26, r20
    2c2e:	c9 01       	movw	r24, r18
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	9a 83       	std	Y+2, r25	; 0x02
    2c34:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2c36:	e0 e4       	ldi	r30, 0x40	; 64
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3e:	89 2f       	mov	r24, r25
    2c40:	99 27       	eor	r25, r25
    2c42:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2c44:	e9 e2       	ldi	r30, 0x29	; 41
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	80 83       	st	Z, r24
}
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	0f 92       	push	r0
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    2c64:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2c66:	eb e2       	ldi	r30, 0x2B	; 43
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	88 2f       	mov	r24, r24
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	80 72       	andi	r24, 0x20	; 32
    2c72:	90 70       	andi	r25, 0x00	; 0
    2c74:	00 97       	sbiw	r24, 0x00	; 0
    2c76:	b9 f3       	breq	.-18     	; 0x2c66 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2c78:	ec e2       	ldi	r30, 0x2C	; 44
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2c80:	0f 90       	pop	r0
    2c82:	cf 91       	pop	r28
    2c84:	df 91       	pop	r29
    2c86:	08 95       	ret

00002c88 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2c88:	df 93       	push	r29
    2c8a:	cf 93       	push	r28
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2c90:	eb e2       	ldi	r30, 0x2B	; 43
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	80 81       	ld	r24, Z
    2c96:	88 23       	and	r24, r24
    2c98:	dc f7       	brge	.-10     	; 0x2c90 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2c9a:	ec e2       	ldi	r30, 0x2C	; 44
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
}
    2ca0:	cf 91       	pop	r28
    2ca2:	df 91       	pop	r29
    2ca4:	08 95       	ret

00002ca6 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2ca6:	df 93       	push	r29
    2ca8:	cf 93       	push	r28
    2caa:	00 d0       	rcall	.+0      	; 0x2cac <UART_sendString+0x6>
    2cac:	0f 92       	push	r0
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
    2cb2:	9b 83       	std	Y+3, r25	; 0x03
    2cb4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2cb6:	19 82       	std	Y+1, r1	; 0x01
    2cb8:	0e c0       	rjmp	.+28     	; 0x2cd6 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
    2cbc:	28 2f       	mov	r18, r24
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	e2 0f       	add	r30, r18
    2cc8:	f3 1f       	adc	r31, r19
    2cca:	80 81       	ld	r24, Z
    2ccc:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_sendByte>
		i++;
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	8f 5f       	subi	r24, 0xFF	; 255
    2cd4:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	28 2f       	mov	r18, r24
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cde:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	e2 0f       	add	r30, r18
    2ce4:	f3 1f       	adc	r31, r19
    2ce6:	80 81       	ld	r24, Z
    2ce8:	88 23       	and	r24, r24
    2cea:	39 f7       	brne	.-50     	; 0x2cba <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret

00002cf8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2cf8:	0f 93       	push	r16
    2cfa:	1f 93       	push	r17
    2cfc:	df 93       	push	r29
    2cfe:	cf 93       	push	r28
    2d00:	00 d0       	rcall	.+0      	; 0x2d02 <UART_receiveString+0xa>
    2d02:	0f 92       	push	r0
    2d04:	cd b7       	in	r28, 0x3d	; 61
    2d06:	de b7       	in	r29, 0x3e	; 62
    2d08:	9b 83       	std	Y+3, r25	; 0x03
    2d0a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d0c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	28 2f       	mov	r18, r24
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	8a 81       	ldd	r24, Y+2	; 0x02
    2d16:	9b 81       	ldd	r25, Y+3	; 0x03
    2d18:	8c 01       	movw	r16, r24
    2d1a:	02 0f       	add	r16, r18
    2d1c:	13 1f       	adc	r17, r19
    2d1e:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_recieveByte>
    2d22:	f8 01       	movw	r30, r16
    2d24:	80 83       	st	Z, r24
    2d26:	0f c0       	rjmp	.+30     	; 0x2d46 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
    2d2a:	8f 5f       	subi	r24, 0xFF	; 255
    2d2c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	28 2f       	mov	r18, r24
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	8a 81       	ldd	r24, Y+2	; 0x02
    2d36:	9b 81       	ldd	r25, Y+3	; 0x03
    2d38:	8c 01       	movw	r16, r24
    2d3a:	02 0f       	add	r16, r18
    2d3c:	13 1f       	adc	r17, r19
    2d3e:	0e 94 44 16 	call	0x2c88	; 0x2c88 <UART_recieveByte>
    2d42:	f8 01       	movw	r30, r16
    2d44:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	28 2f       	mov	r18, r24
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d50:	fc 01       	movw	r30, r24
    2d52:	e2 0f       	add	r30, r18
    2d54:	f3 1f       	adc	r31, r19
    2d56:	80 81       	ld	r24, Z
    2d58:	83 32       	cpi	r24, 0x23	; 35
    2d5a:	31 f7       	brne	.-52     	; 0x2d28 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
    2d5e:	28 2f       	mov	r18, r24
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	8a 81       	ldd	r24, Y+2	; 0x02
    2d64:	9b 81       	ldd	r25, Y+3	; 0x03
    2d66:	fc 01       	movw	r30, r24
    2d68:	e2 0f       	add	r30, r18
    2d6a:	f3 1f       	adc	r31, r19
    2d6c:	10 82       	st	Z, r1
}
    2d6e:	0f 90       	pop	r0
    2d70:	0f 90       	pop	r0
    2d72:	0f 90       	pop	r0
    2d74:	cf 91       	pop	r28
    2d76:	df 91       	pop	r29
    2d78:	1f 91       	pop	r17
    2d7a:	0f 91       	pop	r16
    2d7c:	08 95       	ret

00002d7e <__udivmodsi4>:
    2d7e:	a1 e2       	ldi	r26, 0x21	; 33
    2d80:	1a 2e       	mov	r1, r26
    2d82:	aa 1b       	sub	r26, r26
    2d84:	bb 1b       	sub	r27, r27
    2d86:	fd 01       	movw	r30, r26
    2d88:	0d c0       	rjmp	.+26     	; 0x2da4 <__udivmodsi4_ep>

00002d8a <__udivmodsi4_loop>:
    2d8a:	aa 1f       	adc	r26, r26
    2d8c:	bb 1f       	adc	r27, r27
    2d8e:	ee 1f       	adc	r30, r30
    2d90:	ff 1f       	adc	r31, r31
    2d92:	a2 17       	cp	r26, r18
    2d94:	b3 07       	cpc	r27, r19
    2d96:	e4 07       	cpc	r30, r20
    2d98:	f5 07       	cpc	r31, r21
    2d9a:	20 f0       	brcs	.+8      	; 0x2da4 <__udivmodsi4_ep>
    2d9c:	a2 1b       	sub	r26, r18
    2d9e:	b3 0b       	sbc	r27, r19
    2da0:	e4 0b       	sbc	r30, r20
    2da2:	f5 0b       	sbc	r31, r21

00002da4 <__udivmodsi4_ep>:
    2da4:	66 1f       	adc	r22, r22
    2da6:	77 1f       	adc	r23, r23
    2da8:	88 1f       	adc	r24, r24
    2daa:	99 1f       	adc	r25, r25
    2dac:	1a 94       	dec	r1
    2dae:	69 f7       	brne	.-38     	; 0x2d8a <__udivmodsi4_loop>
    2db0:	60 95       	com	r22
    2db2:	70 95       	com	r23
    2db4:	80 95       	com	r24
    2db6:	90 95       	com	r25
    2db8:	9b 01       	movw	r18, r22
    2dba:	ac 01       	movw	r20, r24
    2dbc:	bd 01       	movw	r22, r26
    2dbe:	cf 01       	movw	r24, r30
    2dc0:	08 95       	ret

00002dc2 <__prologue_saves__>:
    2dc2:	2f 92       	push	r2
    2dc4:	3f 92       	push	r3
    2dc6:	4f 92       	push	r4
    2dc8:	5f 92       	push	r5
    2dca:	6f 92       	push	r6
    2dcc:	7f 92       	push	r7
    2dce:	8f 92       	push	r8
    2dd0:	9f 92       	push	r9
    2dd2:	af 92       	push	r10
    2dd4:	bf 92       	push	r11
    2dd6:	cf 92       	push	r12
    2dd8:	df 92       	push	r13
    2dda:	ef 92       	push	r14
    2ddc:	ff 92       	push	r15
    2dde:	0f 93       	push	r16
    2de0:	1f 93       	push	r17
    2de2:	cf 93       	push	r28
    2de4:	df 93       	push	r29
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
    2dea:	ca 1b       	sub	r28, r26
    2dec:	db 0b       	sbc	r29, r27
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	f8 94       	cli
    2df2:	de bf       	out	0x3e, r29	; 62
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	cd bf       	out	0x3d, r28	; 61
    2df8:	09 94       	ijmp

00002dfa <__epilogue_restores__>:
    2dfa:	2a 88       	ldd	r2, Y+18	; 0x12
    2dfc:	39 88       	ldd	r3, Y+17	; 0x11
    2dfe:	48 88       	ldd	r4, Y+16	; 0x10
    2e00:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e02:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e04:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e06:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e08:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e0a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e0c:	b9 84       	ldd	r11, Y+9	; 0x09
    2e0e:	c8 84       	ldd	r12, Y+8	; 0x08
    2e10:	df 80       	ldd	r13, Y+7	; 0x07
    2e12:	ee 80       	ldd	r14, Y+6	; 0x06
    2e14:	fd 80       	ldd	r15, Y+5	; 0x05
    2e16:	0c 81       	ldd	r16, Y+4	; 0x04
    2e18:	1b 81       	ldd	r17, Y+3	; 0x03
    2e1a:	aa 81       	ldd	r26, Y+2	; 0x02
    2e1c:	b9 81       	ldd	r27, Y+1	; 0x01
    2e1e:	ce 0f       	add	r28, r30
    2e20:	d1 1d       	adc	r29, r1
    2e22:	0f b6       	in	r0, 0x3f	; 63
    2e24:	f8 94       	cli
    2e26:	de bf       	out	0x3e, r29	; 62
    2e28:	0f be       	out	0x3f, r0	; 63
    2e2a:	cd bf       	out	0x3d, r28	; 61
    2e2c:	ed 01       	movw	r28, r26
    2e2e:	08 95       	ret

00002e30 <itoa>:
    2e30:	fb 01       	movw	r30, r22
    2e32:	9f 01       	movw	r18, r30
    2e34:	e8 94       	clt
    2e36:	42 30       	cpi	r20, 0x02	; 2
    2e38:	c4 f0       	brlt	.+48     	; 0x2e6a <itoa+0x3a>
    2e3a:	45 32       	cpi	r20, 0x25	; 37
    2e3c:	b4 f4       	brge	.+44     	; 0x2e6a <itoa+0x3a>
    2e3e:	4a 30       	cpi	r20, 0x0A	; 10
    2e40:	29 f4       	brne	.+10     	; 0x2e4c <itoa+0x1c>
    2e42:	97 fb       	bst	r25, 7
    2e44:	1e f4       	brtc	.+6      	; 0x2e4c <itoa+0x1c>
    2e46:	90 95       	com	r25
    2e48:	81 95       	neg	r24
    2e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e4c:	64 2f       	mov	r22, r20
    2e4e:	77 27       	eor	r23, r23
    2e50:	0e 94 49 17 	call	0x2e92	; 0x2e92 <__udivmodhi4>
    2e54:	80 5d       	subi	r24, 0xD0	; 208
    2e56:	8a 33       	cpi	r24, 0x3A	; 58
    2e58:	0c f0       	brlt	.+2      	; 0x2e5c <itoa+0x2c>
    2e5a:	89 5d       	subi	r24, 0xD9	; 217
    2e5c:	81 93       	st	Z+, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	00 97       	sbiw	r24, 0x00	; 0
    2e62:	a1 f7       	brne	.-24     	; 0x2e4c <itoa+0x1c>
    2e64:	16 f4       	brtc	.+4      	; 0x2e6a <itoa+0x3a>
    2e66:	5d e2       	ldi	r21, 0x2D	; 45
    2e68:	51 93       	st	Z+, r21
    2e6a:	10 82       	st	Z, r1
    2e6c:	c9 01       	movw	r24, r18
    2e6e:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <strrev>

00002e72 <strrev>:
    2e72:	dc 01       	movw	r26, r24
    2e74:	fc 01       	movw	r30, r24
    2e76:	67 2f       	mov	r22, r23
    2e78:	71 91       	ld	r23, Z+
    2e7a:	77 23       	and	r23, r23
    2e7c:	e1 f7       	brne	.-8      	; 0x2e76 <strrev+0x4>
    2e7e:	32 97       	sbiw	r30, 0x02	; 2
    2e80:	04 c0       	rjmp	.+8      	; 0x2e8a <strrev+0x18>
    2e82:	7c 91       	ld	r23, X
    2e84:	6d 93       	st	X+, r22
    2e86:	70 83       	st	Z, r23
    2e88:	62 91       	ld	r22, -Z
    2e8a:	ae 17       	cp	r26, r30
    2e8c:	bf 07       	cpc	r27, r31
    2e8e:	c8 f3       	brcs	.-14     	; 0x2e82 <strrev+0x10>
    2e90:	08 95       	ret

00002e92 <__udivmodhi4>:
    2e92:	aa 1b       	sub	r26, r26
    2e94:	bb 1b       	sub	r27, r27
    2e96:	51 e1       	ldi	r21, 0x11	; 17
    2e98:	07 c0       	rjmp	.+14     	; 0x2ea8 <__udivmodhi4_ep>

00002e9a <__udivmodhi4_loop>:
    2e9a:	aa 1f       	adc	r26, r26
    2e9c:	bb 1f       	adc	r27, r27
    2e9e:	a6 17       	cp	r26, r22
    2ea0:	b7 07       	cpc	r27, r23
    2ea2:	10 f0       	brcs	.+4      	; 0x2ea8 <__udivmodhi4_ep>
    2ea4:	a6 1b       	sub	r26, r22
    2ea6:	b7 0b       	sbc	r27, r23

00002ea8 <__udivmodhi4_ep>:
    2ea8:	88 1f       	adc	r24, r24
    2eaa:	99 1f       	adc	r25, r25
    2eac:	5a 95       	dec	r21
    2eae:	a9 f7       	brne	.-22     	; 0x2e9a <__udivmodhi4_loop>
    2eb0:	80 95       	com	r24
    2eb2:	90 95       	com	r25
    2eb4:	bc 01       	movw	r22, r24
    2eb6:	cd 01       	movw	r24, r26
    2eb8:	08 95       	ret

00002eba <_exit>:
    2eba:	f8 94       	cli

00002ebc <__stop_program>:
    2ebc:	ff cf       	rjmp	.-2      	; 0x2ebc <__stop_program>
