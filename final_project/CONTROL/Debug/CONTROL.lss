
CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  00001e30  00001ec4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800182  00800182  00001fe6  2**0
                  ALLOC
  3 .stab         0000237c  00000000  00000000  00001fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001223  00000000  00000000  00004364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005587  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000197  00000000  00000000  000056c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a88  00000000  00000000  0000585e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eb7  00000000  00000000  000072e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000df7  00000000  00000000  0000819d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008f94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002bf  00000000  00000000  000090f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007f2  00000000  00000000  000093b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9f 0a 	call	0x153e	; 0x153e <main>
      8a:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 cb 02 	call	0x596	; 0x596 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 df 0e 	jmp	0x1dbe	; 0x1dbe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__epilogue_restores__+0x18>

0000043e <__divsf3>:
     43e:	a8 e1       	ldi	r26, 0x18	; 24
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__prologue_saves__+0x10>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	b9 e0       	ldi	r27, 0x09	; 9
     45c:	eb 2e       	mov	r14, r27
     45e:	f1 2c       	mov	r15, r1
     460:	ec 0e       	add	r14, r28
     462:	fd 1e       	adc	r15, r29
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	b7 01       	movw	r22, r14
     46a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     46e:	8e 01       	movw	r16, r28
     470:	0f 5e       	subi	r16, 0xEF	; 239
     472:	1f 4f       	sbci	r17, 0xFF	; 255
     474:	ce 01       	movw	r24, r28
     476:	05 96       	adiw	r24, 0x05	; 5
     478:	b8 01       	movw	r22, r16
     47a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     47e:	29 85       	ldd	r18, Y+9	; 0x09
     480:	22 30       	cpi	r18, 0x02	; 2
     482:	08 f4       	brcc	.+2      	; 0x486 <__divsf3+0x48>
     484:	7e c0       	rjmp	.+252    	; 0x582 <__divsf3+0x144>
     486:	39 89       	ldd	r19, Y+17	; 0x11
     488:	32 30       	cpi	r19, 0x02	; 2
     48a:	10 f4       	brcc	.+4      	; 0x490 <__divsf3+0x52>
     48c:	b8 01       	movw	r22, r16
     48e:	7c c0       	rjmp	.+248    	; 0x588 <__divsf3+0x14a>
     490:	8a 85       	ldd	r24, Y+10	; 0x0a
     492:	9a 89       	ldd	r25, Y+18	; 0x12
     494:	89 27       	eor	r24, r25
     496:	8a 87       	std	Y+10, r24	; 0x0a
     498:	24 30       	cpi	r18, 0x04	; 4
     49a:	11 f0       	breq	.+4      	; 0x4a0 <__divsf3+0x62>
     49c:	22 30       	cpi	r18, 0x02	; 2
     49e:	31 f4       	brne	.+12     	; 0x4ac <__divsf3+0x6e>
     4a0:	23 17       	cp	r18, r19
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <__divsf3+0x68>
     4a4:	6e c0       	rjmp	.+220    	; 0x582 <__divsf3+0x144>
     4a6:	60 e6       	ldi	r22, 0x60	; 96
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	6e c0       	rjmp	.+220    	; 0x588 <__divsf3+0x14a>
     4ac:	34 30       	cpi	r19, 0x04	; 4
     4ae:	39 f4       	brne	.+14     	; 0x4be <__divsf3+0x80>
     4b0:	1d 86       	std	Y+13, r1	; 0x0d
     4b2:	1e 86       	std	Y+14, r1	; 0x0e
     4b4:	1f 86       	std	Y+15, r1	; 0x0f
     4b6:	18 8a       	std	Y+16, r1	; 0x10
     4b8:	1c 86       	std	Y+12, r1	; 0x0c
     4ba:	1b 86       	std	Y+11, r1	; 0x0b
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__divsf3+0x88>
     4be:	32 30       	cpi	r19, 0x02	; 2
     4c0:	21 f4       	brne	.+8      	; 0x4ca <__divsf3+0x8c>
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	89 87       	std	Y+9, r24	; 0x09
     4c6:	b7 01       	movw	r22, r14
     4c8:	5f c0       	rjmp	.+190    	; 0x588 <__divsf3+0x14a>
     4ca:	2b 85       	ldd	r18, Y+11	; 0x0b
     4cc:	3c 85       	ldd	r19, Y+12	; 0x0c
     4ce:	8b 89       	ldd	r24, Y+19	; 0x13
     4d0:	9c 89       	ldd	r25, Y+20	; 0x14
     4d2:	28 1b       	sub	r18, r24
     4d4:	39 0b       	sbc	r19, r25
     4d6:	3c 87       	std	Y+12, r19	; 0x0c
     4d8:	2b 87       	std	Y+11, r18	; 0x0b
     4da:	ed 84       	ldd	r14, Y+13	; 0x0d
     4dc:	fe 84       	ldd	r15, Y+14	; 0x0e
     4de:	0f 85       	ldd	r16, Y+15	; 0x0f
     4e0:	18 89       	ldd	r17, Y+16	; 0x10
     4e2:	ad 88       	ldd	r10, Y+21	; 0x15
     4e4:	be 88       	ldd	r11, Y+22	; 0x16
     4e6:	cf 88       	ldd	r12, Y+23	; 0x17
     4e8:	d8 8c       	ldd	r13, Y+24	; 0x18
     4ea:	ea 14       	cp	r14, r10
     4ec:	fb 04       	cpc	r15, r11
     4ee:	0c 05       	cpc	r16, r12
     4f0:	1d 05       	cpc	r17, r13
     4f2:	40 f4       	brcc	.+16     	; 0x504 <__divsf3+0xc6>
     4f4:	ee 0c       	add	r14, r14
     4f6:	ff 1c       	adc	r15, r15
     4f8:	00 1f       	adc	r16, r16
     4fa:	11 1f       	adc	r17, r17
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	30 40       	sbci	r19, 0x00	; 0
     500:	3c 87       	std	Y+12, r19	; 0x0c
     502:	2b 87       	std	Y+11, r18	; 0x0b
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e4       	ldi	r27, 0x40	; 64
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	ea 14       	cp	r14, r10
     51a:	fb 04       	cpc	r15, r11
     51c:	0c 05       	cpc	r16, r12
     51e:	1d 05       	cpc	r17, r13
     520:	40 f0       	brcs	.+16     	; 0x532 <__divsf3+0xf4>
     522:	28 2b       	or	r18, r24
     524:	39 2b       	or	r19, r25
     526:	4a 2b       	or	r20, r26
     528:	5b 2b       	or	r21, r27
     52a:	ea 18       	sub	r14, r10
     52c:	fb 08       	sbc	r15, r11
     52e:	0c 09       	sbc	r16, r12
     530:	1d 09       	sbc	r17, r13
     532:	b6 95       	lsr	r27
     534:	a7 95       	ror	r26
     536:	97 95       	ror	r25
     538:	87 95       	ror	r24
     53a:	ee 0c       	add	r14, r14
     53c:	ff 1c       	adc	r15, r15
     53e:	00 1f       	adc	r16, r16
     540:	11 1f       	adc	r17, r17
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	6f 31       	cpi	r22, 0x1F	; 31
     548:	71 05       	cpc	r23, r1
     54a:	31 f7       	brne	.-52     	; 0x518 <__divsf3+0xda>
     54c:	da 01       	movw	r26, r20
     54e:	c9 01       	movw	r24, r18
     550:	8f 77       	andi	r24, 0x7F	; 127
     552:	90 70       	andi	r25, 0x00	; 0
     554:	a0 70       	andi	r26, 0x00	; 0
     556:	b0 70       	andi	r27, 0x00	; 0
     558:	80 34       	cpi	r24, 0x40	; 64
     55a:	91 05       	cpc	r25, r1
     55c:	a1 05       	cpc	r26, r1
     55e:	b1 05       	cpc	r27, r1
     560:	61 f4       	brne	.+24     	; 0x57a <__divsf3+0x13c>
     562:	27 fd       	sbrc	r18, 7
     564:	0a c0       	rjmp	.+20     	; 0x57a <__divsf3+0x13c>
     566:	e1 14       	cp	r14, r1
     568:	f1 04       	cpc	r15, r1
     56a:	01 05       	cpc	r16, r1
     56c:	11 05       	cpc	r17, r1
     56e:	29 f0       	breq	.+10     	; 0x57a <__divsf3+0x13c>
     570:	20 5c       	subi	r18, 0xC0	; 192
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	4f 4f       	sbci	r20, 0xFF	; 255
     576:	5f 4f       	sbci	r21, 0xFF	; 255
     578:	20 78       	andi	r18, 0x80	; 128
     57a:	2d 87       	std	Y+13, r18	; 0x0d
     57c:	3e 87       	std	Y+14, r19	; 0x0e
     57e:	4f 87       	std	Y+15, r20	; 0x0f
     580:	58 8b       	std	Y+16, r21	; 0x10
     582:	be 01       	movw	r22, r28
     584:	67 5f       	subi	r22, 0xF7	; 247
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	cb 01       	movw	r24, r22
     58a:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     58e:	68 96       	adiw	r28, 0x18	; 24
     590:	ea e0       	ldi	r30, 0x0A	; 10
     592:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__epilogue_restores__+0x10>

00000596 <__gesf2>:
     596:	a8 e1       	ldi	r26, 0x18	; 24
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	e1 ed       	ldi	r30, 0xD1	; 209
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <__prologue_saves__+0x18>
     5a2:	69 83       	std	Y+1, r22	; 0x01
     5a4:	7a 83       	std	Y+2, r23	; 0x02
     5a6:	8b 83       	std	Y+3, r24	; 0x03
     5a8:	9c 83       	std	Y+4, r25	; 0x04
     5aa:	2d 83       	std	Y+5, r18	; 0x05
     5ac:	3e 83       	std	Y+6, r19	; 0x06
     5ae:	4f 83       	std	Y+7, r20	; 0x07
     5b0:	58 87       	std	Y+8, r21	; 0x08
     5b2:	89 e0       	ldi	r24, 0x09	; 9
     5b4:	e8 2e       	mov	r14, r24
     5b6:	f1 2c       	mov	r15, r1
     5b8:	ec 0e       	add	r14, r28
     5ba:	fd 1e       	adc	r15, r29
     5bc:	ce 01       	movw	r24, r28
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	b7 01       	movw	r22, r14
     5c2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     5c6:	8e 01       	movw	r16, r28
     5c8:	0f 5e       	subi	r16, 0xEF	; 239
     5ca:	1f 4f       	sbci	r17, 0xFF	; 255
     5cc:	ce 01       	movw	r24, r28
     5ce:	05 96       	adiw	r24, 0x05	; 5
     5d0:	b8 01       	movw	r22, r16
     5d2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     5d6:	89 85       	ldd	r24, Y+9	; 0x09
     5d8:	82 30       	cpi	r24, 0x02	; 2
     5da:	40 f0       	brcs	.+16     	; 0x5ec <__gesf2+0x56>
     5dc:	89 89       	ldd	r24, Y+17	; 0x11
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	28 f0       	brcs	.+10     	; 0x5ec <__gesf2+0x56>
     5e2:	c7 01       	movw	r24, r14
     5e4:	b8 01       	movw	r22, r16
     5e6:	0e 94 64 05 	call	0xac8	; 0xac8 <__fpcmp_parts_f>
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <__gesf2+0x58>
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	68 96       	adiw	r28, 0x18	; 24
     5f0:	e6 e0       	ldi	r30, 0x06	; 6
     5f2:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__epilogue_restores__+0x18>

000005f6 <__fixsfsi>:
     5f6:	ac e0       	ldi	r26, 0x0C	; 12
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f3 e0       	ldi	r31, 0x03	; 3
     5fe:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <__prologue_saves__+0x20>
     602:	69 83       	std	Y+1, r22	; 0x01
     604:	7a 83       	std	Y+2, r23	; 0x02
     606:	8b 83       	std	Y+3, r24	; 0x03
     608:	9c 83       	std	Y+4, r25	; 0x04
     60a:	ce 01       	movw	r24, r28
     60c:	01 96       	adiw	r24, 0x01	; 1
     60e:	be 01       	movw	r22, r28
     610:	6b 5f       	subi	r22, 0xFB	; 251
     612:	7f 4f       	sbci	r23, 0xFF	; 255
     614:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__unpack_f>
     618:	8d 81       	ldd	r24, Y+5	; 0x05
     61a:	82 30       	cpi	r24, 0x02	; 2
     61c:	61 f1       	breq	.+88     	; 0x676 <__fixsfsi+0x80>
     61e:	82 30       	cpi	r24, 0x02	; 2
     620:	50 f1       	brcs	.+84     	; 0x676 <__fixsfsi+0x80>
     622:	84 30       	cpi	r24, 0x04	; 4
     624:	21 f4       	brne	.+8      	; 0x62e <__fixsfsi+0x38>
     626:	8e 81       	ldd	r24, Y+6	; 0x06
     628:	88 23       	and	r24, r24
     62a:	51 f1       	breq	.+84     	; 0x680 <__fixsfsi+0x8a>
     62c:	2e c0       	rjmp	.+92     	; 0x68a <__fixsfsi+0x94>
     62e:	2f 81       	ldd	r18, Y+7	; 0x07
     630:	38 85       	ldd	r19, Y+8	; 0x08
     632:	37 fd       	sbrc	r19, 7
     634:	20 c0       	rjmp	.+64     	; 0x676 <__fixsfsi+0x80>
     636:	6e 81       	ldd	r22, Y+6	; 0x06
     638:	2f 31       	cpi	r18, 0x1F	; 31
     63a:	31 05       	cpc	r19, r1
     63c:	1c f0       	brlt	.+6      	; 0x644 <__fixsfsi+0x4e>
     63e:	66 23       	and	r22, r22
     640:	f9 f0       	breq	.+62     	; 0x680 <__fixsfsi+0x8a>
     642:	23 c0       	rjmp	.+70     	; 0x68a <__fixsfsi+0x94>
     644:	8e e1       	ldi	r24, 0x1E	; 30
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	82 1b       	sub	r24, r18
     64a:	93 0b       	sbc	r25, r19
     64c:	29 85       	ldd	r18, Y+9	; 0x09
     64e:	3a 85       	ldd	r19, Y+10	; 0x0a
     650:	4b 85       	ldd	r20, Y+11	; 0x0b
     652:	5c 85       	ldd	r21, Y+12	; 0x0c
     654:	04 c0       	rjmp	.+8      	; 0x65e <__fixsfsi+0x68>
     656:	56 95       	lsr	r21
     658:	47 95       	ror	r20
     65a:	37 95       	ror	r19
     65c:	27 95       	ror	r18
     65e:	8a 95       	dec	r24
     660:	d2 f7       	brpl	.-12     	; 0x656 <__fixsfsi+0x60>
     662:	66 23       	and	r22, r22
     664:	b1 f0       	breq	.+44     	; 0x692 <__fixsfsi+0x9c>
     666:	50 95       	com	r21
     668:	40 95       	com	r20
     66a:	30 95       	com	r19
     66c:	21 95       	neg	r18
     66e:	3f 4f       	sbci	r19, 0xFF	; 255
     670:	4f 4f       	sbci	r20, 0xFF	; 255
     672:	5f 4f       	sbci	r21, 0xFF	; 255
     674:	0e c0       	rjmp	.+28     	; 0x692 <__fixsfsi+0x9c>
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	09 c0       	rjmp	.+18     	; 0x692 <__fixsfsi+0x9c>
     680:	2f ef       	ldi	r18, 0xFF	; 255
     682:	3f ef       	ldi	r19, 0xFF	; 255
     684:	4f ef       	ldi	r20, 0xFF	; 255
     686:	5f e7       	ldi	r21, 0x7F	; 127
     688:	04 c0       	rjmp	.+8      	; 0x692 <__fixsfsi+0x9c>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	40 e0       	ldi	r20, 0x00	; 0
     690:	50 e8       	ldi	r21, 0x80	; 128
     692:	b9 01       	movw	r22, r18
     694:	ca 01       	movw	r24, r20
     696:	2c 96       	adiw	r28, 0x0c	; 12
     698:	e2 e0       	ldi	r30, 0x02	; 2
     69a:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <__epilogue_restores__+0x20>

0000069e <__floatunsisf>:
     69e:	a8 e0       	ldi	r26, 0x08	; 8
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	e5 e5       	ldi	r30, 0x55	; 85
     6a4:	f3 e0       	ldi	r31, 0x03	; 3
     6a6:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__prologue_saves__+0x10>
     6aa:	7b 01       	movw	r14, r22
     6ac:	8c 01       	movw	r16, r24
     6ae:	61 15       	cp	r22, r1
     6b0:	71 05       	cpc	r23, r1
     6b2:	81 05       	cpc	r24, r1
     6b4:	91 05       	cpc	r25, r1
     6b6:	19 f4       	brne	.+6      	; 0x6be <__floatunsisf+0x20>
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	89 83       	std	Y+1, r24	; 0x01
     6bc:	60 c0       	rjmp	.+192    	; 0x77e <__floatunsisf+0xe0>
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	89 83       	std	Y+1, r24	; 0x01
     6c2:	8e e1       	ldi	r24, 0x1E	; 30
     6c4:	c8 2e       	mov	r12, r24
     6c6:	d1 2c       	mov	r13, r1
     6c8:	dc 82       	std	Y+4, r13	; 0x04
     6ca:	cb 82       	std	Y+3, r12	; 0x03
     6cc:	ed 82       	std	Y+5, r14	; 0x05
     6ce:	fe 82       	std	Y+6, r15	; 0x06
     6d0:	0f 83       	std	Y+7, r16	; 0x07
     6d2:	18 87       	std	Y+8, r17	; 0x08
     6d4:	c8 01       	movw	r24, r16
     6d6:	b7 01       	movw	r22, r14
     6d8:	0e 94 c8 03 	call	0x790	; 0x790 <__clzsi2>
     6dc:	fc 01       	movw	r30, r24
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	f7 ff       	sbrs	r31, 7
     6e2:	3b c0       	rjmp	.+118    	; 0x75a <__floatunsisf+0xbc>
     6e4:	22 27       	eor	r18, r18
     6e6:	33 27       	eor	r19, r19
     6e8:	2e 1b       	sub	r18, r30
     6ea:	3f 0b       	sbc	r19, r31
     6ec:	57 01       	movw	r10, r14
     6ee:	68 01       	movw	r12, r16
     6f0:	02 2e       	mov	r0, r18
     6f2:	04 c0       	rjmp	.+8      	; 0x6fc <__floatunsisf+0x5e>
     6f4:	d6 94       	lsr	r13
     6f6:	c7 94       	ror	r12
     6f8:	b7 94       	ror	r11
     6fa:	a7 94       	ror	r10
     6fc:	0a 94       	dec	r0
     6fe:	d2 f7       	brpl	.-12     	; 0x6f4 <__floatunsisf+0x56>
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	a0 e0       	ldi	r26, 0x00	; 0
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	04 c0       	rjmp	.+8      	; 0x71a <__floatunsisf+0x7c>
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	aa 1f       	adc	r26, r26
     718:	bb 1f       	adc	r27, r27
     71a:	2a 95       	dec	r18
     71c:	d2 f7       	brpl	.-12     	; 0x712 <__floatunsisf+0x74>
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	a1 09       	sbc	r26, r1
     722:	b1 09       	sbc	r27, r1
     724:	8e 21       	and	r24, r14
     726:	9f 21       	and	r25, r15
     728:	a0 23       	and	r26, r16
     72a:	b1 23       	and	r27, r17
     72c:	00 97       	sbiw	r24, 0x00	; 0
     72e:	a1 05       	cpc	r26, r1
     730:	b1 05       	cpc	r27, r1
     732:	21 f0       	breq	.+8      	; 0x73c <__floatunsisf+0x9e>
     734:	41 e0       	ldi	r20, 0x01	; 1
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	4a 29       	or	r20, r10
     73e:	5b 29       	or	r21, r11
     740:	6c 29       	or	r22, r12
     742:	7d 29       	or	r23, r13
     744:	4d 83       	std	Y+5, r20	; 0x05
     746:	5e 83       	std	Y+6, r21	; 0x06
     748:	6f 83       	std	Y+7, r22	; 0x07
     74a:	78 87       	std	Y+8, r23	; 0x08
     74c:	8e e1       	ldi	r24, 0x1E	; 30
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	8e 1b       	sub	r24, r30
     752:	9f 0b       	sbc	r25, r31
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	8b 83       	std	Y+3, r24	; 0x03
     758:	12 c0       	rjmp	.+36     	; 0x77e <__floatunsisf+0xe0>
     75a:	30 97       	sbiw	r30, 0x00	; 0
     75c:	81 f0       	breq	.+32     	; 0x77e <__floatunsisf+0xe0>
     75e:	0e 2e       	mov	r0, r30
     760:	04 c0       	rjmp	.+8      	; 0x76a <__floatunsisf+0xcc>
     762:	ee 0c       	add	r14, r14
     764:	ff 1c       	adc	r15, r15
     766:	00 1f       	adc	r16, r16
     768:	11 1f       	adc	r17, r17
     76a:	0a 94       	dec	r0
     76c:	d2 f7       	brpl	.-12     	; 0x762 <__floatunsisf+0xc4>
     76e:	ed 82       	std	Y+5, r14	; 0x05
     770:	fe 82       	std	Y+6, r15	; 0x06
     772:	0f 83       	std	Y+7, r16	; 0x07
     774:	18 87       	std	Y+8, r17	; 0x08
     776:	ce 1a       	sub	r12, r30
     778:	df 0a       	sbc	r13, r31
     77a:	dc 82       	std	Y+4, r13	; 0x04
     77c:	cb 82       	std	Y+3, r12	; 0x03
     77e:	1a 82       	std	Y+2, r1	; 0x02
     780:	ce 01       	movw	r24, r28
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	0e 94 17 04 	call	0x82e	; 0x82e <__pack_f>
     788:	28 96       	adiw	r28, 0x08	; 8
     78a:	ea e0       	ldi	r30, 0x0A	; 10
     78c:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__epilogue_restores__+0x10>

00000790 <__clzsi2>:
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	7b 01       	movw	r14, r22
     79a:	8c 01       	movw	r16, r24
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	e8 16       	cp	r14, r24
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	f8 06       	cpc	r15, r24
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	08 07       	cpc	r16, r24
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	18 07       	cpc	r17, r24
     7ac:	88 f4       	brcc	.+34     	; 0x7d0 <__clzsi2+0x40>
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	e8 16       	cp	r14, r24
     7b2:	f1 04       	cpc	r15, r1
     7b4:	01 05       	cpc	r16, r1
     7b6:	11 05       	cpc	r17, r1
     7b8:	31 f0       	breq	.+12     	; 0x7c6 <__clzsi2+0x36>
     7ba:	28 f0       	brcs	.+10     	; 0x7c6 <__clzsi2+0x36>
     7bc:	88 e0       	ldi	r24, 0x08	; 8
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	a0 e0       	ldi	r26, 0x00	; 0
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	17 c0       	rjmp	.+46     	; 0x7f4 <__clzsi2+0x64>
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	a0 e0       	ldi	r26, 0x00	; 0
     7cc:	b0 e0       	ldi	r27, 0x00	; 0
     7ce:	12 c0       	rjmp	.+36     	; 0x7f4 <__clzsi2+0x64>
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	e8 16       	cp	r14, r24
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	f8 06       	cpc	r15, r24
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	08 07       	cpc	r16, r24
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	18 07       	cpc	r17, r24
     7e0:	28 f0       	brcs	.+10     	; 0x7ec <__clzsi2+0x5c>
     7e2:	88 e1       	ldi	r24, 0x18	; 24
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	a0 e0       	ldi	r26, 0x00	; 0
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <__clzsi2+0x64>
     7ec:	80 e1       	ldi	r24, 0x10	; 16
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	a0 e0       	ldi	r26, 0x00	; 0
     7f2:	b0 e0       	ldi	r27, 0x00	; 0
     7f4:	20 e2       	ldi	r18, 0x20	; 32
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	28 1b       	sub	r18, r24
     7fe:	39 0b       	sbc	r19, r25
     800:	4a 0b       	sbc	r20, r26
     802:	5b 0b       	sbc	r21, r27
     804:	04 c0       	rjmp	.+8      	; 0x80e <__clzsi2+0x7e>
     806:	16 95       	lsr	r17
     808:	07 95       	ror	r16
     80a:	f7 94       	ror	r15
     80c:	e7 94       	ror	r14
     80e:	8a 95       	dec	r24
     810:	d2 f7       	brpl	.-12     	; 0x806 <__clzsi2+0x76>
     812:	f7 01       	movw	r30, r14
     814:	e8 59       	subi	r30, 0x98	; 152
     816:	ff 4f       	sbci	r31, 0xFF	; 255
     818:	80 81       	ld	r24, Z
     81a:	28 1b       	sub	r18, r24
     81c:	31 09       	sbc	r19, r1
     81e:	41 09       	sbc	r20, r1
     820:	51 09       	sbc	r21, r1
     822:	c9 01       	movw	r24, r18
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	08 95       	ret

0000082e <__pack_f>:
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	fc 01       	movw	r30, r24
     83a:	e4 80       	ldd	r14, Z+4	; 0x04
     83c:	f5 80       	ldd	r15, Z+5	; 0x05
     83e:	06 81       	ldd	r16, Z+6	; 0x06
     840:	17 81       	ldd	r17, Z+7	; 0x07
     842:	d1 80       	ldd	r13, Z+1	; 0x01
     844:	80 81       	ld	r24, Z
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	48 f4       	brcc	.+18     	; 0x85c <__pack_f+0x2e>
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	a0 e1       	ldi	r26, 0x10	; 16
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	e8 2a       	or	r14, r24
     854:	f9 2a       	or	r15, r25
     856:	0a 2b       	or	r16, r26
     858:	1b 2b       	or	r17, r27
     85a:	a5 c0       	rjmp	.+330    	; 0x9a6 <__stack+0x147>
     85c:	84 30       	cpi	r24, 0x04	; 4
     85e:	09 f4       	brne	.+2      	; 0x862 <__stack+0x3>
     860:	9f c0       	rjmp	.+318    	; 0x9a0 <__stack+0x141>
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	21 f4       	brne	.+8      	; 0x86e <__stack+0xf>
     866:	ee 24       	eor	r14, r14
     868:	ff 24       	eor	r15, r15
     86a:	87 01       	movw	r16, r14
     86c:	05 c0       	rjmp	.+10     	; 0x878 <__stack+0x19>
     86e:	e1 14       	cp	r14, r1
     870:	f1 04       	cpc	r15, r1
     872:	01 05       	cpc	r16, r1
     874:	11 05       	cpc	r17, r1
     876:	19 f4       	brne	.+6      	; 0x87e <__stack+0x1f>
     878:	e0 e0       	ldi	r30, 0x00	; 0
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	96 c0       	rjmp	.+300    	; 0x9aa <__stack+0x14b>
     87e:	62 81       	ldd	r22, Z+2	; 0x02
     880:	73 81       	ldd	r23, Z+3	; 0x03
     882:	9f ef       	ldi	r25, 0xFF	; 255
     884:	62 38       	cpi	r22, 0x82	; 130
     886:	79 07       	cpc	r23, r25
     888:	0c f0       	brlt	.+2      	; 0x88c <__stack+0x2d>
     88a:	5b c0       	rjmp	.+182    	; 0x942 <__stack+0xe3>
     88c:	22 e8       	ldi	r18, 0x82	; 130
     88e:	3f ef       	ldi	r19, 0xFF	; 255
     890:	26 1b       	sub	r18, r22
     892:	37 0b       	sbc	r19, r23
     894:	2a 31       	cpi	r18, 0x1A	; 26
     896:	31 05       	cpc	r19, r1
     898:	2c f0       	brlt	.+10     	; 0x8a4 <__stack+0x45>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e0       	ldi	r20, 0x00	; 0
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	2a c0       	rjmp	.+84     	; 0x8f8 <__stack+0x99>
     8a4:	b8 01       	movw	r22, r16
     8a6:	a7 01       	movw	r20, r14
     8a8:	02 2e       	mov	r0, r18
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__stack+0x55>
     8ac:	76 95       	lsr	r23
     8ae:	67 95       	ror	r22
     8b0:	57 95       	ror	r21
     8b2:	47 95       	ror	r20
     8b4:	0a 94       	dec	r0
     8b6:	d2 f7       	brpl	.-12     	; 0x8ac <__stack+0x4d>
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	a0 e0       	ldi	r26, 0x00	; 0
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	04 c0       	rjmp	.+8      	; 0x8ca <__stack+0x6b>
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	aa 1f       	adc	r26, r26
     8c8:	bb 1f       	adc	r27, r27
     8ca:	2a 95       	dec	r18
     8cc:	d2 f7       	brpl	.-12     	; 0x8c2 <__stack+0x63>
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	a1 09       	sbc	r26, r1
     8d2:	b1 09       	sbc	r27, r1
     8d4:	8e 21       	and	r24, r14
     8d6:	9f 21       	and	r25, r15
     8d8:	a0 23       	and	r26, r16
     8da:	b1 23       	and	r27, r17
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	a1 05       	cpc	r26, r1
     8e0:	b1 05       	cpc	r27, r1
     8e2:	21 f0       	breq	.+8      	; 0x8ec <__stack+0x8d>
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	a0 e0       	ldi	r26, 0x00	; 0
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	9a 01       	movw	r18, r20
     8ee:	ab 01       	movw	r20, r22
     8f0:	28 2b       	or	r18, r24
     8f2:	39 2b       	or	r19, r25
     8f4:	4a 2b       	or	r20, r26
     8f6:	5b 2b       	or	r21, r27
     8f8:	da 01       	movw	r26, r20
     8fa:	c9 01       	movw	r24, r18
     8fc:	8f 77       	andi	r24, 0x7F	; 127
     8fe:	90 70       	andi	r25, 0x00	; 0
     900:	a0 70       	andi	r26, 0x00	; 0
     902:	b0 70       	andi	r27, 0x00	; 0
     904:	80 34       	cpi	r24, 0x40	; 64
     906:	91 05       	cpc	r25, r1
     908:	a1 05       	cpc	r26, r1
     90a:	b1 05       	cpc	r27, r1
     90c:	39 f4       	brne	.+14     	; 0x91c <__stack+0xbd>
     90e:	27 ff       	sbrs	r18, 7
     910:	09 c0       	rjmp	.+18     	; 0x924 <__stack+0xc5>
     912:	20 5c       	subi	r18, 0xC0	; 192
     914:	3f 4f       	sbci	r19, 0xFF	; 255
     916:	4f 4f       	sbci	r20, 0xFF	; 255
     918:	5f 4f       	sbci	r21, 0xFF	; 255
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__stack+0xc5>
     91c:	21 5c       	subi	r18, 0xC1	; 193
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	e0 e0       	ldi	r30, 0x00	; 0
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	20 30       	cpi	r18, 0x00	; 0
     92a:	a0 e0       	ldi	r26, 0x00	; 0
     92c:	3a 07       	cpc	r19, r26
     92e:	a0 e0       	ldi	r26, 0x00	; 0
     930:	4a 07       	cpc	r20, r26
     932:	a0 e4       	ldi	r26, 0x40	; 64
     934:	5a 07       	cpc	r21, r26
     936:	10 f0       	brcs	.+4      	; 0x93c <__stack+0xdd>
     938:	e1 e0       	ldi	r30, 0x01	; 1
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	79 01       	movw	r14, r18
     93e:	8a 01       	movw	r16, r20
     940:	27 c0       	rjmp	.+78     	; 0x990 <__stack+0x131>
     942:	60 38       	cpi	r22, 0x80	; 128
     944:	71 05       	cpc	r23, r1
     946:	64 f5       	brge	.+88     	; 0x9a0 <__stack+0x141>
     948:	fb 01       	movw	r30, r22
     94a:	e1 58       	subi	r30, 0x81	; 129
     94c:	ff 4f       	sbci	r31, 0xFF	; 255
     94e:	d8 01       	movw	r26, r16
     950:	c7 01       	movw	r24, r14
     952:	8f 77       	andi	r24, 0x7F	; 127
     954:	90 70       	andi	r25, 0x00	; 0
     956:	a0 70       	andi	r26, 0x00	; 0
     958:	b0 70       	andi	r27, 0x00	; 0
     95a:	80 34       	cpi	r24, 0x40	; 64
     95c:	91 05       	cpc	r25, r1
     95e:	a1 05       	cpc	r26, r1
     960:	b1 05       	cpc	r27, r1
     962:	39 f4       	brne	.+14     	; 0x972 <__stack+0x113>
     964:	e7 fe       	sbrs	r14, 7
     966:	0d c0       	rjmp	.+26     	; 0x982 <__stack+0x123>
     968:	80 e4       	ldi	r24, 0x40	; 64
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	04 c0       	rjmp	.+8      	; 0x97a <__stack+0x11b>
     972:	8f e3       	ldi	r24, 0x3F	; 63
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 e0       	ldi	r26, 0x00	; 0
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	e8 0e       	add	r14, r24
     97c:	f9 1e       	adc	r15, r25
     97e:	0a 1f       	adc	r16, r26
     980:	1b 1f       	adc	r17, r27
     982:	17 ff       	sbrs	r17, 7
     984:	05 c0       	rjmp	.+10     	; 0x990 <__stack+0x131>
     986:	16 95       	lsr	r17
     988:	07 95       	ror	r16
     98a:	f7 94       	ror	r15
     98c:	e7 94       	ror	r14
     98e:	31 96       	adiw	r30, 0x01	; 1
     990:	87 e0       	ldi	r24, 0x07	; 7
     992:	16 95       	lsr	r17
     994:	07 95       	ror	r16
     996:	f7 94       	ror	r15
     998:	e7 94       	ror	r14
     99a:	8a 95       	dec	r24
     99c:	d1 f7       	brne	.-12     	; 0x992 <__stack+0x133>
     99e:	05 c0       	rjmp	.+10     	; 0x9aa <__stack+0x14b>
     9a0:	ee 24       	eor	r14, r14
     9a2:	ff 24       	eor	r15, r15
     9a4:	87 01       	movw	r16, r14
     9a6:	ef ef       	ldi	r30, 0xFF	; 255
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	6e 2f       	mov	r22, r30
     9ac:	67 95       	ror	r22
     9ae:	66 27       	eor	r22, r22
     9b0:	67 95       	ror	r22
     9b2:	90 2f       	mov	r25, r16
     9b4:	9f 77       	andi	r25, 0x7F	; 127
     9b6:	d7 94       	ror	r13
     9b8:	dd 24       	eor	r13, r13
     9ba:	d7 94       	ror	r13
     9bc:	8e 2f       	mov	r24, r30
     9be:	86 95       	lsr	r24
     9c0:	49 2f       	mov	r20, r25
     9c2:	46 2b       	or	r20, r22
     9c4:	58 2f       	mov	r21, r24
     9c6:	5d 29       	or	r21, r13
     9c8:	b7 01       	movw	r22, r14
     9ca:	ca 01       	movw	r24, r20
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	df 90       	pop	r13
     9d6:	08 95       	ret

000009d8 <__unpack_f>:
     9d8:	fc 01       	movw	r30, r24
     9da:	db 01       	movw	r26, r22
     9dc:	40 81       	ld	r20, Z
     9de:	51 81       	ldd	r21, Z+1	; 0x01
     9e0:	22 81       	ldd	r18, Z+2	; 0x02
     9e2:	62 2f       	mov	r22, r18
     9e4:	6f 77       	andi	r22, 0x7F	; 127
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	22 1f       	adc	r18, r18
     9ea:	22 27       	eor	r18, r18
     9ec:	22 1f       	adc	r18, r18
     9ee:	93 81       	ldd	r25, Z+3	; 0x03
     9f0:	89 2f       	mov	r24, r25
     9f2:	88 0f       	add	r24, r24
     9f4:	82 2b       	or	r24, r18
     9f6:	28 2f       	mov	r18, r24
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	99 1f       	adc	r25, r25
     9fc:	99 27       	eor	r25, r25
     9fe:	99 1f       	adc	r25, r25
     a00:	11 96       	adiw	r26, 0x01	; 1
     a02:	9c 93       	st	X, r25
     a04:	11 97       	sbiw	r26, 0x01	; 1
     a06:	21 15       	cp	r18, r1
     a08:	31 05       	cpc	r19, r1
     a0a:	a9 f5       	brne	.+106    	; 0xa76 <__unpack_f+0x9e>
     a0c:	41 15       	cp	r20, r1
     a0e:	51 05       	cpc	r21, r1
     a10:	61 05       	cpc	r22, r1
     a12:	71 05       	cpc	r23, r1
     a14:	11 f4       	brne	.+4      	; 0xa1a <__unpack_f+0x42>
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	37 c0       	rjmp	.+110    	; 0xa88 <__unpack_f+0xb0>
     a1a:	82 e8       	ldi	r24, 0x82	; 130
     a1c:	9f ef       	ldi	r25, 0xFF	; 255
     a1e:	13 96       	adiw	r26, 0x03	; 3
     a20:	9c 93       	st	X, r25
     a22:	8e 93       	st	-X, r24
     a24:	12 97       	sbiw	r26, 0x02	; 2
     a26:	9a 01       	movw	r18, r20
     a28:	ab 01       	movw	r20, r22
     a2a:	67 e0       	ldi	r22, 0x07	; 7
     a2c:	22 0f       	add	r18, r18
     a2e:	33 1f       	adc	r19, r19
     a30:	44 1f       	adc	r20, r20
     a32:	55 1f       	adc	r21, r21
     a34:	6a 95       	dec	r22
     a36:	d1 f7       	brne	.-12     	; 0xa2c <__unpack_f+0x54>
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	8c 93       	st	X, r24
     a3c:	0d c0       	rjmp	.+26     	; 0xa58 <__unpack_f+0x80>
     a3e:	22 0f       	add	r18, r18
     a40:	33 1f       	adc	r19, r19
     a42:	44 1f       	adc	r20, r20
     a44:	55 1f       	adc	r21, r21
     a46:	12 96       	adiw	r26, 0x02	; 2
     a48:	8d 91       	ld	r24, X+
     a4a:	9c 91       	ld	r25, X
     a4c:	13 97       	sbiw	r26, 0x03	; 3
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	13 96       	adiw	r26, 0x03	; 3
     a52:	9c 93       	st	X, r25
     a54:	8e 93       	st	-X, r24
     a56:	12 97       	sbiw	r26, 0x02	; 2
     a58:	20 30       	cpi	r18, 0x00	; 0
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	38 07       	cpc	r19, r24
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	48 07       	cpc	r20, r24
     a62:	80 e4       	ldi	r24, 0x40	; 64
     a64:	58 07       	cpc	r21, r24
     a66:	58 f3       	brcs	.-42     	; 0xa3e <__unpack_f+0x66>
     a68:	14 96       	adiw	r26, 0x04	; 4
     a6a:	2d 93       	st	X+, r18
     a6c:	3d 93       	st	X+, r19
     a6e:	4d 93       	st	X+, r20
     a70:	5c 93       	st	X, r21
     a72:	17 97       	sbiw	r26, 0x07	; 7
     a74:	08 95       	ret
     a76:	2f 3f       	cpi	r18, 0xFF	; 255
     a78:	31 05       	cpc	r19, r1
     a7a:	79 f4       	brne	.+30     	; 0xa9a <__unpack_f+0xc2>
     a7c:	41 15       	cp	r20, r1
     a7e:	51 05       	cpc	r21, r1
     a80:	61 05       	cpc	r22, r1
     a82:	71 05       	cpc	r23, r1
     a84:	19 f4       	brne	.+6      	; 0xa8c <__unpack_f+0xb4>
     a86:	84 e0       	ldi	r24, 0x04	; 4
     a88:	8c 93       	st	X, r24
     a8a:	08 95       	ret
     a8c:	64 ff       	sbrs	r22, 4
     a8e:	03 c0       	rjmp	.+6      	; 0xa96 <__unpack_f+0xbe>
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	8c 93       	st	X, r24
     a94:	12 c0       	rjmp	.+36     	; 0xaba <__unpack_f+0xe2>
     a96:	1c 92       	st	X, r1
     a98:	10 c0       	rjmp	.+32     	; 0xaba <__unpack_f+0xe2>
     a9a:	2f 57       	subi	r18, 0x7F	; 127
     a9c:	30 40       	sbci	r19, 0x00	; 0
     a9e:	13 96       	adiw	r26, 0x03	; 3
     aa0:	3c 93       	st	X, r19
     aa2:	2e 93       	st	-X, r18
     aa4:	12 97       	sbiw	r26, 0x02	; 2
     aa6:	83 e0       	ldi	r24, 0x03	; 3
     aa8:	8c 93       	st	X, r24
     aaa:	87 e0       	ldi	r24, 0x07	; 7
     aac:	44 0f       	add	r20, r20
     aae:	55 1f       	adc	r21, r21
     ab0:	66 1f       	adc	r22, r22
     ab2:	77 1f       	adc	r23, r23
     ab4:	8a 95       	dec	r24
     ab6:	d1 f7       	brne	.-12     	; 0xaac <__unpack_f+0xd4>
     ab8:	70 64       	ori	r23, 0x40	; 64
     aba:	14 96       	adiw	r26, 0x04	; 4
     abc:	4d 93       	st	X+, r20
     abe:	5d 93       	st	X+, r21
     ac0:	6d 93       	st	X+, r22
     ac2:	7c 93       	st	X, r23
     ac4:	17 97       	sbiw	r26, 0x07	; 7
     ac6:	08 95       	ret

00000ac8 <__fpcmp_parts_f>:
     ac8:	1f 93       	push	r17
     aca:	dc 01       	movw	r26, r24
     acc:	fb 01       	movw	r30, r22
     ace:	9c 91       	ld	r25, X
     ad0:	92 30       	cpi	r25, 0x02	; 2
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <__fpcmp_parts_f+0xe>
     ad4:	47 c0       	rjmp	.+142    	; 0xb64 <__fpcmp_parts_f+0x9c>
     ad6:	80 81       	ld	r24, Z
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	08 f4       	brcc	.+2      	; 0xade <__fpcmp_parts_f+0x16>
     adc:	43 c0       	rjmp	.+134    	; 0xb64 <__fpcmp_parts_f+0x9c>
     ade:	94 30       	cpi	r25, 0x04	; 4
     ae0:	51 f4       	brne	.+20     	; 0xaf6 <__fpcmp_parts_f+0x2e>
     ae2:	11 96       	adiw	r26, 0x01	; 1
     ae4:	1c 91       	ld	r17, X
     ae6:	84 30       	cpi	r24, 0x04	; 4
     ae8:	99 f5       	brne	.+102    	; 0xb50 <__fpcmp_parts_f+0x88>
     aea:	81 81       	ldd	r24, Z+1	; 0x01
     aec:	68 2f       	mov	r22, r24
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	61 1b       	sub	r22, r17
     af2:	71 09       	sbc	r23, r1
     af4:	3f c0       	rjmp	.+126    	; 0xb74 <__fpcmp_parts_f+0xac>
     af6:	84 30       	cpi	r24, 0x04	; 4
     af8:	21 f0       	breq	.+8      	; 0xb02 <__fpcmp_parts_f+0x3a>
     afa:	92 30       	cpi	r25, 0x02	; 2
     afc:	31 f4       	brne	.+12     	; 0xb0a <__fpcmp_parts_f+0x42>
     afe:	82 30       	cpi	r24, 0x02	; 2
     b00:	b9 f1       	breq	.+110    	; 0xb70 <__fpcmp_parts_f+0xa8>
     b02:	81 81       	ldd	r24, Z+1	; 0x01
     b04:	88 23       	and	r24, r24
     b06:	89 f1       	breq	.+98     	; 0xb6a <__fpcmp_parts_f+0xa2>
     b08:	2d c0       	rjmp	.+90     	; 0xb64 <__fpcmp_parts_f+0x9c>
     b0a:	11 96       	adiw	r26, 0x01	; 1
     b0c:	1c 91       	ld	r17, X
     b0e:	11 97       	sbiw	r26, 0x01	; 1
     b10:	82 30       	cpi	r24, 0x02	; 2
     b12:	f1 f0       	breq	.+60     	; 0xb50 <__fpcmp_parts_f+0x88>
     b14:	81 81       	ldd	r24, Z+1	; 0x01
     b16:	18 17       	cp	r17, r24
     b18:	d9 f4       	brne	.+54     	; 0xb50 <__fpcmp_parts_f+0x88>
     b1a:	12 96       	adiw	r26, 0x02	; 2
     b1c:	2d 91       	ld	r18, X+
     b1e:	3c 91       	ld	r19, X
     b20:	13 97       	sbiw	r26, 0x03	; 3
     b22:	82 81       	ldd	r24, Z+2	; 0x02
     b24:	93 81       	ldd	r25, Z+3	; 0x03
     b26:	82 17       	cp	r24, r18
     b28:	93 07       	cpc	r25, r19
     b2a:	94 f0       	brlt	.+36     	; 0xb50 <__fpcmp_parts_f+0x88>
     b2c:	28 17       	cp	r18, r24
     b2e:	39 07       	cpc	r19, r25
     b30:	bc f0       	brlt	.+46     	; 0xb60 <__fpcmp_parts_f+0x98>
     b32:	14 96       	adiw	r26, 0x04	; 4
     b34:	8d 91       	ld	r24, X+
     b36:	9d 91       	ld	r25, X+
     b38:	0d 90       	ld	r0, X+
     b3a:	bc 91       	ld	r27, X
     b3c:	a0 2d       	mov	r26, r0
     b3e:	24 81       	ldd	r18, Z+4	; 0x04
     b40:	35 81       	ldd	r19, Z+5	; 0x05
     b42:	46 81       	ldd	r20, Z+6	; 0x06
     b44:	57 81       	ldd	r21, Z+7	; 0x07
     b46:	28 17       	cp	r18, r24
     b48:	39 07       	cpc	r19, r25
     b4a:	4a 07       	cpc	r20, r26
     b4c:	5b 07       	cpc	r21, r27
     b4e:	18 f4       	brcc	.+6      	; 0xb56 <__fpcmp_parts_f+0x8e>
     b50:	11 23       	and	r17, r17
     b52:	41 f0       	breq	.+16     	; 0xb64 <__fpcmp_parts_f+0x9c>
     b54:	0a c0       	rjmp	.+20     	; 0xb6a <__fpcmp_parts_f+0xa2>
     b56:	82 17       	cp	r24, r18
     b58:	93 07       	cpc	r25, r19
     b5a:	a4 07       	cpc	r26, r20
     b5c:	b5 07       	cpc	r27, r21
     b5e:	40 f4       	brcc	.+16     	; 0xb70 <__fpcmp_parts_f+0xa8>
     b60:	11 23       	and	r17, r17
     b62:	19 f0       	breq	.+6      	; 0xb6a <__fpcmp_parts_f+0xa2>
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	05 c0       	rjmp	.+10     	; 0xb74 <__fpcmp_parts_f+0xac>
     b6a:	6f ef       	ldi	r22, 0xFF	; 255
     b6c:	7f ef       	ldi	r23, 0xFF	; 255
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <__fpcmp_parts_f+0xac>
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	cb 01       	movw	r24, r22
     b76:	1f 91       	pop	r17
     b78:	08 95       	ret

00000b7a <BUZZER_init>:

/* Description:
 * set the buzzer pin direction as output pin by gpio
 */
void BUZZER_init(void)
{
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	65 e0       	ldi	r22, 0x05	; 5
     b86:	41 e0       	ldi	r20, 0x01	; 1
     b88:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>
}
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <BUZZER_on>:

/* Description:
 * turn on the buzzer by writing logic one in the buzzer pin by gpio
 */
void BUZZER_on(void)
{
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	65 e0       	ldi	r22, 0x05	; 5
     b9e:	41 e0       	ldi	r20, 0x01	; 1
     ba0:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
}
     ba4:	cf 91       	pop	r28
     ba6:	df 91       	pop	r29
     ba8:	08 95       	ret

00000baa <BUZZER_off>:

/* Description:
 * turn off the buzzer by writing logic zero in the buzzer pin by gpio
 */
void BUZZER_off(void)
{
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     bb2:	82 e0       	ldi	r24, 0x02	; 2
     bb4:	65 e0       	ldi	r22, 0x05	; 5
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
}
     bbc:	cf 91       	pop	r28
     bbe:	df 91       	pop	r29
     bc0:	08 95       	ret

00000bc2 <PWM_Timer0_Start>:
#include "PWM.h"
#include "gpio.h"


void PWM_Timer0_Start(uint8 duty_cycle)
{
     bc2:	df 93       	push	r29
     bc4:	cf 93       	push	r28
     bc6:	0f 92       	push	r0
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	89 83       	std	Y+1, r24	; 0x01
	  TCNT0 = 0; // Set Timer Initial Value to 0
     bce:	e2 e5       	ldi	r30, 0x52	; 82
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	10 82       	st	Z, r1
		 * 1. Fast PWM mode FOC0=0
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
		 */
		TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     bd4:	e3 e5       	ldi	r30, 0x53	; 83
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	8a e6       	ldi	r24, 0x6A	; 106
     bda:	80 83       	st	Z, r24

		/* convert the duty cycle from 0->255 to 0->100 */

		OCR0  = duty_cycle ;
     bdc:	ec e5       	ldi	r30, 0x5C	; 92
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	80 83       	st	Z, r24

		DDRB  = DDRB | (1<<PB3);
     be4:	a7 e3       	ldi	r26, 0x37	; 55
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e7 e3       	ldi	r30, 0x37	; 55
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	88 60       	ori	r24, 0x08	; 8
     bf0:	8c 93       	st	X, r24

}
     bf2:	0f 90       	pop	r0
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	08 95       	ret

00000bfa <__vector_7>:
		(*Timer1_ptr)();
	}
}*/

ISR(TIMER1_COMPA_vect)
{
     bfa:	1f 92       	push	r1
     bfc:	0f 92       	push	r0
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	0f 92       	push	r0
     c02:	11 24       	eor	r1, r1
     c04:	2f 93       	push	r18
     c06:	3f 93       	push	r19
     c08:	4f 93       	push	r20
     c0a:	5f 93       	push	r21
     c0c:	6f 93       	push	r22
     c0e:	7f 93       	push	r23
     c10:	8f 93       	push	r24
     c12:	9f 93       	push	r25
     c14:	af 93       	push	r26
     c16:	bf 93       	push	r27
     c18:	ef 93       	push	r30
     c1a:	ff 93       	push	r31
     c1c:	df 93       	push	r29
     c1e:	cf 93       	push	r28
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_ptr != NULL_PTR)
     c24:	80 91 82 01 	lds	r24, 0x0182
     c28:	90 91 83 01 	lds	r25, 0x0183
     c2c:	00 97       	sbiw	r24, 0x00	; 0
     c2e:	29 f0       	breq	.+10     	; 0xc3a <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the event is detected */
		(*Timer1_ptr)();
     c30:	e0 91 82 01 	lds	r30, 0x0182
     c34:	f0 91 83 01 	lds	r31, 0x0183
     c38:	09 95       	icall
	}
}
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	ff 91       	pop	r31
     c40:	ef 91       	pop	r30
     c42:	bf 91       	pop	r27
     c44:	af 91       	pop	r26
     c46:	9f 91       	pop	r25
     c48:	8f 91       	pop	r24
     c4a:	7f 91       	pop	r23
     c4c:	6f 91       	pop	r22
     c4e:	5f 91       	pop	r21
     c50:	4f 91       	pop	r20
     c52:	3f 91       	pop	r19
     c54:	2f 91       	pop	r18
     c56:	0f 90       	pop	r0
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	0f 90       	pop	r0
     c5c:	1f 90       	pop	r1
     c5e:	18 95       	reti

00000c60 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
     c60:	df 93       	push	r29
     c62:	cf 93       	push	r28
     c64:	00 d0       	rcall	.+0      	; 0xc66 <Timer1_init+0x6>
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	9a 83       	std	Y+2, r25	; 0x02
     c6c:	89 83       	std	Y+1, r24	; 0x01

	TCCR1A = (1<<FOC1A) | (((Config_Ptr->mode)& 0b0011)<< WGM10);
     c6e:	af e4       	ldi	r26, 0x4F	; 79
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e9 81       	ldd	r30, Y+1	; 0x01
     c74:	fa 81       	ldd	r31, Y+2	; 0x02
     c76:	85 81       	ldd	r24, Z+5	; 0x05
     c78:	83 70       	andi	r24, 0x03	; 3
     c7a:	88 60       	ori	r24, 0x08	; 8
     c7c:	8c 93       	st	X, r24
	TCCR1B = ((((Config_Ptr->mode)& 0b1100)>>2)<< WGM12) | ((Config_Ptr->prescaler)<<CS10);
     c7e:	ae e4       	ldi	r26, 0x4E	; 78
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e9 81       	ldd	r30, Y+1	; 0x01
     c84:	fa 81       	ldd	r31, Y+2	; 0x02
     c86:	85 81       	ldd	r24, Z+5	; 0x05
     c88:	88 2f       	mov	r24, r24
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	8c 70       	andi	r24, 0x0C	; 12
     c8e:	90 70       	andi	r25, 0x00	; 0
     c90:	95 95       	asr	r25
     c92:	87 95       	ror	r24
     c94:	95 95       	asr	r25
     c96:	87 95       	ror	r24
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	98 2f       	mov	r25, r24
     ca6:	e9 81       	ldd	r30, Y+1	; 0x01
     ca8:	fa 81       	ldd	r31, Y+2	; 0x02
     caa:	84 81       	ldd	r24, Z+4	; 0x04
     cac:	89 2b       	or	r24, r25
     cae:	8c 93       	st	X, r24

	SREG |=(1<<7);
     cb0:	af e5       	ldi	r26, 0x5F	; 95
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	ef e5       	ldi	r30, 0x5F	; 95
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	80 68       	ori	r24, 0x80	; 128
     cbc:	8c 93       	st	X, r24
	TIMSK|=(1<<OCIE1A);
     cbe:	a9 e5       	ldi	r26, 0x59	; 89
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e9 e5       	ldi	r30, 0x59	; 89
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	80 61       	ori	r24, 0x10	; 16
     cca:	8c 93       	st	X, r24
	OCR1A = Config_Ptr -> compare_value;
     ccc:	aa e4       	ldi	r26, 0x4A	; 74
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e9 81       	ldd	r30, Y+1	; 0x01
     cd2:	fa 81       	ldd	r31, Y+2	; 0x02
     cd4:	82 81       	ldd	r24, Z+2	; 0x02
     cd6:	93 81       	ldd	r25, Z+3	; 0x03
     cd8:	11 96       	adiw	r26, 0x01	; 1
     cda:	9c 93       	st	X, r25
     cdc:	8e 93       	st	-X, r24
	TCNT1 = Config_Ptr->initial_value;  /* Insert the required initial value in TCNT1 register */
     cde:	ac e4       	ldi	r26, 0x4C	; 76
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e9 81       	ldd	r30, Y+1	; 0x01
     ce4:	fa 81       	ldd	r31, Y+2	; 0x02
     ce6:	80 81       	ld	r24, Z
     ce8:	91 81       	ldd	r25, Z+1	; 0x01
     cea:	11 96       	adiw	r26, 0x01	; 1
     cec:	9c 93       	st	X, r25
     cee:	8e 93       	st	-X, r24
	if ( Config_Ptr->mode == COMPARE )
     cf0:	e9 81       	ldd	r30, Y+1	; 0x01
     cf2:	fa 81       	ldd	r31, Y+2	; 0x02
     cf4:	85 81       	ldd	r24, Z+5	; 0x05
     cf6:	84 30       	cpi	r24, 0x04	; 4
     cf8:	41 f4       	brne	.+16     	; 0xd0a <Timer1_init+0xaa>
	{
		TIMSK |= (1<<OCIE1B);
     cfa:	a9 e5       	ldi	r26, 0x59	; 89
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e9 e5       	ldi	r30, 0x59	; 89
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	88 60       	ori	r24, 0x08	; 8
     d06:	8c 93       	st	X, r24
     d08:	0c c0       	rjmp	.+24     	; 0xd22 <Timer1_init+0xc2>
	}
	else if ( Config_Ptr->mode == OVERFLOW )
     d0a:	e9 81       	ldd	r30, Y+1	; 0x01
     d0c:	fa 81       	ldd	r31, Y+2	; 0x02
     d0e:	85 81       	ldd	r24, Z+5	; 0x05
     d10:	88 23       	and	r24, r24
     d12:	39 f4       	brne	.+14     	; 0xd22 <Timer1_init+0xc2>
	{
		TIMSK |= (1<<TOIE1);
     d14:	a9 e5       	ldi	r26, 0x59	; 89
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e9 e5       	ldi	r30, 0x59	; 89
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	84 60       	ori	r24, 0x04	; 4
     d20:	8c 93       	st	X, r24
	}

}
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	08 95       	ret

00000d2c <Timer1_deInit>:

void Timer1_deInit(void)
{
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
	TIMSK = 0;
     d34:	e9 e5       	ldi	r30, 0x59	; 89
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	10 82       	st	Z, r1
	TCCR1A = 0;
     d3a:	ef e4       	ldi	r30, 0x4F	; 79
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	10 82       	st	Z, r1
	TCCR1B = 0;
     d40:	ee e4       	ldi	r30, 0x4E	; 78
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	10 82       	st	Z, r1
	TCNT1 = 0;
     d46:	ec e4       	ldi	r30, 0x4C	; 76
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	11 82       	std	Z+1, r1	; 0x01
     d4c:	10 82       	st	Z, r1
	OCR1A = 0;
     d4e:	ea e4       	ldi	r30, 0x4A	; 74
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	11 82       	std	Z+1, r1	; 0x01
     d54:	10 82       	st	Z, r1


}
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <Timer1_setCallBack>:


void Timer1_setCallBack(void(*a_ptr)(void))
{
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	00 d0       	rcall	.+0      	; 0xd62 <Timer1_setCallBack+0x6>
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	9a 83       	std	Y+2, r25	; 0x02
     d68:	89 83       	std	Y+1, r24	; 0x01
	Timer1_ptr = a_ptr;
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	9a 81       	ldd	r25, Y+2	; 0x02
     d6e:	90 93 83 01 	sts	0x0183, r25
     d72:	80 93 82 01 	sts	0x0182, r24
}
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	00 d0       	rcall	.+0      	; 0xd86 <EEPROM_writeByte+0x6>
     d86:	00 d0       	rcall	.+0      	; 0xd88 <EEPROM_writeByte+0x8>
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	9a 83       	std	Y+2, r25	; 0x02
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     d92:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     d96:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <TWI_getStatus>
     d9a:	88 30       	cpi	r24, 0x08	; 8
     d9c:	11 f0       	breq	.+4      	; 0xda2 <EEPROM_writeByte+0x22>
        return ERROR;
     d9e:	1c 82       	std	Y+4, r1	; 0x04
     da0:	28 c0       	rjmp	.+80     	; 0xdf2 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
     da6:	80 70       	andi	r24, 0x00	; 0
     da8:	97 70       	andi	r25, 0x07	; 7
     daa:	88 0f       	add	r24, r24
     dac:	89 2f       	mov	r24, r25
     dae:	88 1f       	adc	r24, r24
     db0:	99 0b       	sbc	r25, r25
     db2:	91 95       	neg	r25
     db4:	80 6a       	ori	r24, 0xA0	; 160
     db6:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     dba:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <TWI_getStatus>
     dbe:	88 31       	cpi	r24, 0x18	; 24
     dc0:	11 f0       	breq	.+4      	; 0xdc6 <EEPROM_writeByte+0x46>
        return ERROR; 
     dc2:	1c 82       	std	Y+4, r1	; 0x04
     dc4:	16 c0       	rjmp	.+44     	; 0xdf2 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     dcc:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <TWI_getStatus>
     dd0:	88 32       	cpi	r24, 0x28	; 40
     dd2:	11 f0       	breq	.+4      	; 0xdd8 <EEPROM_writeByte+0x58>
        return ERROR;
     dd4:	1c 82       	std	Y+4, r1	; 0x04
     dd6:	0d c0       	rjmp	.+26     	; 0xdf2 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     dde:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <TWI_getStatus>
     de2:	88 32       	cpi	r24, 0x28	; 40
     de4:	11 f0       	breq	.+4      	; 0xdea <EEPROM_writeByte+0x6a>
        return ERROR;
     de6:	1c 82       	std	Y+4, r1	; 0x04
     de8:	04 c0       	rjmp	.+8      	; 0xdf2 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     dea:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <TWI_stop>
	
    return SUCCESS;
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	8c 83       	std	Y+4, r24	; 0x04
     df2:	8c 81       	ldd	r24, Y+4	; 0x04
}
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	00 d0       	rcall	.+0      	; 0xe08 <EEPROM_readByte+0x6>
     e08:	00 d0       	rcall	.+0      	; 0xe0a <EEPROM_readByte+0x8>
     e0a:	0f 92       	push	r0
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	9a 83       	std	Y+2, r25	; 0x02
     e12:	89 83       	std	Y+1, r24	; 0x01
     e14:	7c 83       	std	Y+4, r23	; 0x04
     e16:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     e18:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     e1c:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <TWI_getStatus>
     e20:	88 30       	cpi	r24, 0x08	; 8
     e22:	11 f0       	breq	.+4      	; 0xe28 <EEPROM_readByte+0x26>
        return ERROR;
     e24:	1d 82       	std	Y+5, r1	; 0x05
     e26:	44 c0       	rjmp	.+136    	; 0xeb0 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	9a 81       	ldd	r25, Y+2	; 0x02
     e2c:	80 70       	andi	r24, 0x00	; 0
     e2e:	97 70       	andi	r25, 0x07	; 7
     e30:	88 0f       	add	r24, r24
     e32:	89 2f       	mov	r24, r25
     e34:	88 1f       	adc	r24, r24
     e36:	99 0b       	sbc	r25, r25
     e38:	91 95       	neg	r25
     e3a:	80 6a       	ori	r24, 0xA0	; 160
     e3c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     e40:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <TWI_getStatus>
     e44:	88 31       	cpi	r24, 0x18	; 24
     e46:	11 f0       	breq	.+4      	; 0xe4c <EEPROM_readByte+0x4a>
        return ERROR;
     e48:	1d 82       	std	Y+5, r1	; 0x05
     e4a:	32 c0       	rjmp	.+100    	; 0xeb0 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     e52:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <TWI_getStatus>
     e56:	88 32       	cpi	r24, 0x28	; 40
     e58:	11 f0       	breq	.+4      	; 0xe5e <EEPROM_readByte+0x5c>
        return ERROR;
     e5a:	1d 82       	std	Y+5, r1	; 0x05
     e5c:	29 c0       	rjmp	.+82     	; 0xeb0 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     e5e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     e62:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <TWI_getStatus>
     e66:	80 31       	cpi	r24, 0x10	; 16
     e68:	11 f0       	breq	.+4      	; 0xe6e <EEPROM_readByte+0x6c>
        return ERROR;
     e6a:	1d 82       	std	Y+5, r1	; 0x05
     e6c:	21 c0       	rjmp	.+66     	; 0xeb0 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	9a 81       	ldd	r25, Y+2	; 0x02
     e72:	80 70       	andi	r24, 0x00	; 0
     e74:	97 70       	andi	r25, 0x07	; 7
     e76:	88 0f       	add	r24, r24
     e78:	89 2f       	mov	r24, r25
     e7a:	88 1f       	adc	r24, r24
     e7c:	99 0b       	sbc	r25, r25
     e7e:	91 95       	neg	r25
     e80:	81 6a       	ori	r24, 0xA1	; 161
     e82:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     e86:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <TWI_getStatus>
     e8a:	80 34       	cpi	r24, 0x40	; 64
     e8c:	11 f0       	breq	.+4      	; 0xe92 <EEPROM_readByte+0x90>
        return ERROR;
     e8e:	1d 82       	std	Y+5, r1	; 0x05
     e90:	0f c0       	rjmp	.+30     	; 0xeb0 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     e92:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <TWI_readByteWithNACK>
     e96:	eb 81       	ldd	r30, Y+3	; 0x03
     e98:	fc 81       	ldd	r31, Y+4	; 0x04
     e9a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     e9c:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <TWI_getStatus>
     ea0:	88 35       	cpi	r24, 0x58	; 88
     ea2:	11 f0       	breq	.+4      	; 0xea8 <EEPROM_readByte+0xa6>
        return ERROR;
     ea4:	1d 82       	std	Y+5, r1	; 0x05
     ea6:	04 c0       	rjmp	.+8      	; 0xeb0 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     ea8:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <TWI_stop>

    return SUCCESS;
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	8d 83       	std	Y+5, r24	; 0x05
     eb0:	8d 81       	ldd	r24, Y+5	; 0x05
}
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <GPIO_setupPinDirection+0x6>
     ec8:	00 d0       	rcall	.+0      	; 0xeca <GPIO_setupPinDirection+0x8>
     eca:	0f 92       	push	r0
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	6a 83       	std	Y+2, r22	; 0x02
     ed4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	88 30       	cpi	r24, 0x08	; 8
     eda:	08 f0       	brcs	.+2      	; 0xede <GPIO_setupPinDirection+0x1c>
     edc:	d5 c0       	rjmp	.+426    	; 0x1088 <GPIO_setupPinDirection+0x1c6>
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	84 30       	cpi	r24, 0x04	; 4
     ee2:	08 f0       	brcs	.+2      	; 0xee6 <GPIO_setupPinDirection+0x24>
     ee4:	d1 c0       	rjmp	.+418    	; 0x1088 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	3d 83       	std	Y+5, r19	; 0x05
     eee:	2c 83       	std	Y+4, r18	; 0x04
     ef0:	8c 81       	ldd	r24, Y+4	; 0x04
     ef2:	9d 81       	ldd	r25, Y+5	; 0x05
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	91 05       	cpc	r25, r1
     ef8:	09 f4       	brne	.+2      	; 0xefc <GPIO_setupPinDirection+0x3a>
     efa:	43 c0       	rjmp	.+134    	; 0xf82 <GPIO_setupPinDirection+0xc0>
     efc:	2c 81       	ldd	r18, Y+4	; 0x04
     efe:	3d 81       	ldd	r19, Y+5	; 0x05
     f00:	22 30       	cpi	r18, 0x02	; 2
     f02:	31 05       	cpc	r19, r1
     f04:	2c f4       	brge	.+10     	; 0xf10 <GPIO_setupPinDirection+0x4e>
     f06:	8c 81       	ldd	r24, Y+4	; 0x04
     f08:	9d 81       	ldd	r25, Y+5	; 0x05
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	71 f0       	breq	.+28     	; 0xf2a <GPIO_setupPinDirection+0x68>
     f0e:	bc c0       	rjmp	.+376    	; 0x1088 <GPIO_setupPinDirection+0x1c6>
     f10:	2c 81       	ldd	r18, Y+4	; 0x04
     f12:	3d 81       	ldd	r19, Y+5	; 0x05
     f14:	22 30       	cpi	r18, 0x02	; 2
     f16:	31 05       	cpc	r19, r1
     f18:	09 f4       	brne	.+2      	; 0xf1c <GPIO_setupPinDirection+0x5a>
     f1a:	5f c0       	rjmp	.+190    	; 0xfda <GPIO_setupPinDirection+0x118>
     f1c:	8c 81       	ldd	r24, Y+4	; 0x04
     f1e:	9d 81       	ldd	r25, Y+5	; 0x05
     f20:	83 30       	cpi	r24, 0x03	; 3
     f22:	91 05       	cpc	r25, r1
     f24:	09 f4       	brne	.+2      	; 0xf28 <GPIO_setupPinDirection+0x66>
     f26:	85 c0       	rjmp	.+266    	; 0x1032 <GPIO_setupPinDirection+0x170>
     f28:	af c0       	rjmp	.+350    	; 0x1088 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	a1 f4       	brne	.+40     	; 0xf58 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f30:	aa e3       	ldi	r26, 0x3A	; 58
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	ea e3       	ldi	r30, 0x3A	; 58
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	48 2f       	mov	r20, r24
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	02 2e       	mov	r0, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <GPIO_setupPinDirection+0x8c>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <GPIO_setupPinDirection+0x88>
     f52:	84 2b       	or	r24, r20
     f54:	8c 93       	st	X, r24
     f56:	98 c0       	rjmp	.+304    	; 0x1088 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f58:	aa e3       	ldi	r26, 0x3A	; 58
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	ea e3       	ldi	r30, 0x3A	; 58
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	48 2f       	mov	r20, r24
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 2e       	mov	r0, r18
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <GPIO_setupPinDirection+0xb4>
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	0a 94       	dec	r0
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <GPIO_setupPinDirection+0xb0>
     f7a:	80 95       	com	r24
     f7c:	84 23       	and	r24, r20
     f7e:	8c 93       	st	X, r24
     f80:	83 c0       	rjmp	.+262    	; 0x1088 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	a1 f4       	brne	.+40     	; 0xfb0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f88:	a7 e3       	ldi	r26, 0x37	; 55
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e7 e3       	ldi	r30, 0x37	; 55
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 2e       	mov	r0, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <GPIO_setupPinDirection+0xe4>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	0a 94       	dec	r0
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <GPIO_setupPinDirection+0xe0>
     faa:	84 2b       	or	r24, r20
     fac:	8c 93       	st	X, r24
     fae:	6c c0       	rjmp	.+216    	; 0x1088 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     fb0:	a7 e3       	ldi	r26, 0x37	; 55
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e7 e3       	ldi	r30, 0x37	; 55
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <GPIO_setupPinDirection+0x10c>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <GPIO_setupPinDirection+0x108>
     fd2:	80 95       	com	r24
     fd4:	84 23       	and	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	57 c0       	rjmp	.+174    	; 0x1088 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	a1 f4       	brne	.+40     	; 0x1008 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     fe0:	a4 e3       	ldi	r26, 0x34	; 52
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e4 e3       	ldi	r30, 0x34	; 52
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <GPIO_setupPinDirection+0x13c>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <GPIO_setupPinDirection+0x138>
    1002:	84 2b       	or	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	40 c0       	rjmp	.+128    	; 0x1088 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1008:	a4 e3       	ldi	r26, 0x34	; 52
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e4 e3       	ldi	r30, 0x34	; 52
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <GPIO_setupPinDirection+0x164>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <GPIO_setupPinDirection+0x160>
    102a:	80 95       	com	r24
    102c:	84 23       	and	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	2b c0       	rjmp	.+86     	; 0x1088 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	a1 f4       	brne	.+40     	; 0x1060 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1038:	a1 e3       	ldi	r26, 0x31	; 49
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e1 e3       	ldi	r30, 0x31	; 49
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <GPIO_setupPinDirection+0x194>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <GPIO_setupPinDirection+0x190>
    105a:	84 2b       	or	r24, r20
    105c:	8c 93       	st	X, r24
    105e:	14 c0       	rjmp	.+40     	; 0x1088 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1060:	a1 e3       	ldi	r26, 0x31	; 49
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e1 e3       	ldi	r30, 0x31	; 49
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <GPIO_setupPinDirection+0x1bc>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <GPIO_setupPinDirection+0x1b8>
    1082:	80 95       	com	r24
    1084:	84 23       	and	r24, r20
    1086:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	00 d0       	rcall	.+0      	; 0x109e <GPIO_writePin+0x6>
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <GPIO_writePin+0x8>
    10a0:	0f 92       	push	r0
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	89 83       	std	Y+1, r24	; 0x01
    10a8:	6a 83       	std	Y+2, r22	; 0x02
    10aa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	88 30       	cpi	r24, 0x08	; 8
    10b0:	08 f0       	brcs	.+2      	; 0x10b4 <GPIO_writePin+0x1c>
    10b2:	d5 c0       	rjmp	.+426    	; 0x125e <GPIO_writePin+0x1c6>
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	84 30       	cpi	r24, 0x04	; 4
    10b8:	08 f0       	brcs	.+2      	; 0x10bc <GPIO_writePin+0x24>
    10ba:	d1 c0       	rjmp	.+418    	; 0x125e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	3d 83       	std	Y+5, r19	; 0x05
    10c4:	2c 83       	std	Y+4, r18	; 0x04
    10c6:	8c 81       	ldd	r24, Y+4	; 0x04
    10c8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	91 05       	cpc	r25, r1
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <GPIO_writePin+0x3a>
    10d0:	43 c0       	rjmp	.+134    	; 0x1158 <GPIO_writePin+0xc0>
    10d2:	2c 81       	ldd	r18, Y+4	; 0x04
    10d4:	3d 81       	ldd	r19, Y+5	; 0x05
    10d6:	22 30       	cpi	r18, 0x02	; 2
    10d8:	31 05       	cpc	r19, r1
    10da:	2c f4       	brge	.+10     	; 0x10e6 <GPIO_writePin+0x4e>
    10dc:	8c 81       	ldd	r24, Y+4	; 0x04
    10de:	9d 81       	ldd	r25, Y+5	; 0x05
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	71 f0       	breq	.+28     	; 0x1100 <GPIO_writePin+0x68>
    10e4:	bc c0       	rjmp	.+376    	; 0x125e <GPIO_writePin+0x1c6>
    10e6:	2c 81       	ldd	r18, Y+4	; 0x04
    10e8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <GPIO_writePin+0x5a>
    10f0:	5f c0       	rjmp	.+190    	; 0x11b0 <GPIO_writePin+0x118>
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	9d 81       	ldd	r25, Y+5	; 0x05
    10f6:	83 30       	cpi	r24, 0x03	; 3
    10f8:	91 05       	cpc	r25, r1
    10fa:	09 f4       	brne	.+2      	; 0x10fe <GPIO_writePin+0x66>
    10fc:	85 c0       	rjmp	.+266    	; 0x1208 <GPIO_writePin+0x170>
    10fe:	af c0       	rjmp	.+350    	; 0x125e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	a1 f4       	brne	.+40     	; 0x112e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1106:	ab e3       	ldi	r26, 0x3B	; 59
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	eb e3       	ldi	r30, 0x3B	; 59
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <GPIO_writePin+0x8c>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <GPIO_writePin+0x88>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	98 c0       	rjmp	.+304    	; 0x125e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    112e:	ab e3       	ldi	r26, 0x3B	; 59
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	eb e3       	ldi	r30, 0x3B	; 59
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <GPIO_writePin+0xb4>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <GPIO_writePin+0xb0>
    1150:	80 95       	com	r24
    1152:	84 23       	and	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	83 c0       	rjmp	.+262    	; 0x125e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	a1 f4       	brne	.+40     	; 0x1186 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    115e:	a8 e3       	ldi	r26, 0x38	; 56
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e8 e3       	ldi	r30, 0x38	; 56
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <GPIO_writePin+0xe4>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <GPIO_writePin+0xe0>
    1180:	84 2b       	or	r24, r20
    1182:	8c 93       	st	X, r24
    1184:	6c c0       	rjmp	.+216    	; 0x125e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1186:	a8 e3       	ldi	r26, 0x38	; 56
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e8 e3       	ldi	r30, 0x38	; 56
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <GPIO_writePin+0x10c>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <GPIO_writePin+0x108>
    11a8:	80 95       	com	r24
    11aa:	84 23       	and	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	57 c0       	rjmp	.+174    	; 0x125e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	a1 f4       	brne	.+40     	; 0x11de <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    11b6:	a5 e3       	ldi	r26, 0x35	; 53
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e5 e3       	ldi	r30, 0x35	; 53
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <GPIO_writePin+0x13c>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <GPIO_writePin+0x138>
    11d8:	84 2b       	or	r24, r20
    11da:	8c 93       	st	X, r24
    11dc:	40 c0       	rjmp	.+128    	; 0x125e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    11de:	a5 e3       	ldi	r26, 0x35	; 53
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e3       	ldi	r30, 0x35	; 53
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	48 2f       	mov	r20, r24
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 2e       	mov	r0, r18
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <GPIO_writePin+0x164>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	0a 94       	dec	r0
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <GPIO_writePin+0x160>
    1200:	80 95       	com	r24
    1202:	84 23       	and	r24, r20
    1204:	8c 93       	st	X, r24
    1206:	2b c0       	rjmp	.+86     	; 0x125e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	a1 f4       	brne	.+40     	; 0x1236 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    120e:	a2 e3       	ldi	r26, 0x32	; 50
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e2 e3       	ldi	r30, 0x32	; 50
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <GPIO_writePin+0x194>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <GPIO_writePin+0x190>
    1230:	84 2b       	or	r24, r20
    1232:	8c 93       	st	X, r24
    1234:	14 c0       	rjmp	.+40     	; 0x125e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1236:	a2 e3       	ldi	r26, 0x32	; 50
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e2 e3       	ldi	r30, 0x32	; 50
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	48 2f       	mov	r20, r24
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 2e       	mov	r0, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <GPIO_writePin+0x1bc>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <GPIO_writePin+0x1b8>
    1258:	80 95       	com	r24
    125a:	84 23       	and	r24, r20
    125c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	00 d0       	rcall	.+0      	; 0x1274 <GPIO_readPin+0x6>
    1274:	00 d0       	rcall	.+0      	; 0x1276 <GPIO_readPin+0x8>
    1276:	0f 92       	push	r0
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	8a 83       	std	Y+2, r24	; 0x02
    127e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1280:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	88 30       	cpi	r24, 0x08	; 8
    1286:	08 f0       	brcs	.+2      	; 0x128a <GPIO_readPin+0x1c>
    1288:	84 c0       	rjmp	.+264    	; 0x1392 <GPIO_readPin+0x124>
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	84 30       	cpi	r24, 0x04	; 4
    128e:	08 f0       	brcs	.+2      	; 0x1292 <GPIO_readPin+0x24>
    1290:	80 c0       	rjmp	.+256    	; 0x1392 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	3d 83       	std	Y+5, r19	; 0x05
    129a:	2c 83       	std	Y+4, r18	; 0x04
    129c:	4c 81       	ldd	r20, Y+4	; 0x04
    129e:	5d 81       	ldd	r21, Y+5	; 0x05
    12a0:	41 30       	cpi	r20, 0x01	; 1
    12a2:	51 05       	cpc	r21, r1
    12a4:	79 f1       	breq	.+94     	; 0x1304 <GPIO_readPin+0x96>
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	9d 81       	ldd	r25, Y+5	; 0x05
    12aa:	82 30       	cpi	r24, 0x02	; 2
    12ac:	91 05       	cpc	r25, r1
    12ae:	34 f4       	brge	.+12     	; 0x12bc <GPIO_readPin+0x4e>
    12b0:	2c 81       	ldd	r18, Y+4	; 0x04
    12b2:	3d 81       	ldd	r19, Y+5	; 0x05
    12b4:	21 15       	cp	r18, r1
    12b6:	31 05       	cpc	r19, r1
    12b8:	69 f0       	breq	.+26     	; 0x12d4 <GPIO_readPin+0x66>
    12ba:	6b c0       	rjmp	.+214    	; 0x1392 <GPIO_readPin+0x124>
    12bc:	4c 81       	ldd	r20, Y+4	; 0x04
    12be:	5d 81       	ldd	r21, Y+5	; 0x05
    12c0:	42 30       	cpi	r20, 0x02	; 2
    12c2:	51 05       	cpc	r21, r1
    12c4:	b9 f1       	breq	.+110    	; 0x1334 <GPIO_readPin+0xc6>
    12c6:	8c 81       	ldd	r24, Y+4	; 0x04
    12c8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ca:	83 30       	cpi	r24, 0x03	; 3
    12cc:	91 05       	cpc	r25, r1
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <GPIO_readPin+0x64>
    12d0:	49 c0       	rjmp	.+146    	; 0x1364 <GPIO_readPin+0xf6>
    12d2:	5f c0       	rjmp	.+190    	; 0x1392 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    12d4:	e9 e3       	ldi	r30, 0x39	; 57
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	88 2f       	mov	r24, r24
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	a9 01       	movw	r20, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <GPIO_readPin+0x7e>
    12e8:	55 95       	asr	r21
    12ea:	47 95       	ror	r20
    12ec:	8a 95       	dec	r24
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <GPIO_readPin+0x7a>
    12f0:	ca 01       	movw	r24, r20
    12f2:	81 70       	andi	r24, 0x01	; 1
    12f4:	90 70       	andi	r25, 0x00	; 0
    12f6:	88 23       	and	r24, r24
    12f8:	19 f0       	breq	.+6      	; 0x1300 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	49 c0       	rjmp	.+146    	; 0x1392 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1300:	19 82       	std	Y+1, r1	; 0x01
    1302:	47 c0       	rjmp	.+142    	; 0x1392 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1304:	e6 e3       	ldi	r30, 0x36	; 54
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	a9 01       	movw	r20, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <GPIO_readPin+0xae>
    1318:	55 95       	asr	r21
    131a:	47 95       	ror	r20
    131c:	8a 95       	dec	r24
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <GPIO_readPin+0xaa>
    1320:	ca 01       	movw	r24, r20
    1322:	81 70       	andi	r24, 0x01	; 1
    1324:	90 70       	andi	r25, 0x00	; 0
    1326:	88 23       	and	r24, r24
    1328:	19 f0       	breq	.+6      	; 0x1330 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	31 c0       	rjmp	.+98     	; 0x1392 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1330:	19 82       	std	Y+1, r1	; 0x01
    1332:	2f c0       	rjmp	.+94     	; 0x1392 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1334:	e3 e3       	ldi	r30, 0x33	; 51
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	88 2f       	mov	r24, r24
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	a9 01       	movw	r20, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <GPIO_readPin+0xde>
    1348:	55 95       	asr	r21
    134a:	47 95       	ror	r20
    134c:	8a 95       	dec	r24
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <GPIO_readPin+0xda>
    1350:	ca 01       	movw	r24, r20
    1352:	81 70       	andi	r24, 0x01	; 1
    1354:	90 70       	andi	r25, 0x00	; 0
    1356:	88 23       	and	r24, r24
    1358:	19 f0       	breq	.+6      	; 0x1360 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	19 c0       	rjmp	.+50     	; 0x1392 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1360:	19 82       	std	Y+1, r1	; 0x01
    1362:	17 c0       	rjmp	.+46     	; 0x1392 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1364:	e0 e3       	ldi	r30, 0x30	; 48
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	a9 01       	movw	r20, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <GPIO_readPin+0x10e>
    1378:	55 95       	asr	r21
    137a:	47 95       	ror	r20
    137c:	8a 95       	dec	r24
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <GPIO_readPin+0x10a>
    1380:	ca 01       	movw	r24, r20
    1382:	81 70       	andi	r24, 0x01	; 1
    1384:	90 70       	andi	r25, 0x00	; 0
    1386:	88 23       	and	r24, r24
    1388:	19 f0       	breq	.+6      	; 0x1390 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1390:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1392:	89 81       	ldd	r24, Y+1	; 0x01
}
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <GPIO_setupPortDirection+0x6>
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <GPIO_setupPortDirection+0x8>
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	84 30       	cpi	r24, 0x04	; 4
    13b8:	90 f5       	brcc	.+100    	; 0x141e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	3c 83       	std	Y+4, r19	; 0x04
    13c2:	2b 83       	std	Y+3, r18	; 0x03
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	91 05       	cpc	r25, r1
    13cc:	d1 f0       	breq	.+52     	; 0x1402 <GPIO_setupPortDirection+0x5e>
    13ce:	2b 81       	ldd	r18, Y+3	; 0x03
    13d0:	3c 81       	ldd	r19, Y+4	; 0x04
    13d2:	22 30       	cpi	r18, 0x02	; 2
    13d4:	31 05       	cpc	r19, r1
    13d6:	2c f4       	brge	.+10     	; 0x13e2 <GPIO_setupPortDirection+0x3e>
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	9c 81       	ldd	r25, Y+4	; 0x04
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	61 f0       	breq	.+24     	; 0x13f8 <GPIO_setupPortDirection+0x54>
    13e0:	1e c0       	rjmp	.+60     	; 0x141e <GPIO_setupPortDirection+0x7a>
    13e2:	2b 81       	ldd	r18, Y+3	; 0x03
    13e4:	3c 81       	ldd	r19, Y+4	; 0x04
    13e6:	22 30       	cpi	r18, 0x02	; 2
    13e8:	31 05       	cpc	r19, r1
    13ea:	81 f0       	breq	.+32     	; 0x140c <GPIO_setupPortDirection+0x68>
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	9c 81       	ldd	r25, Y+4	; 0x04
    13f0:	83 30       	cpi	r24, 0x03	; 3
    13f2:	91 05       	cpc	r25, r1
    13f4:	81 f0       	breq	.+32     	; 0x1416 <GPIO_setupPortDirection+0x72>
    13f6:	13 c0       	rjmp	.+38     	; 0x141e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    13f8:	ea e3       	ldi	r30, 0x3A	; 58
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	80 83       	st	Z, r24
    1400:	0e c0       	rjmp	.+28     	; 0x141e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1402:	e7 e3       	ldi	r30, 0x37	; 55
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	80 83       	st	Z, r24
    140a:	09 c0       	rjmp	.+18     	; 0x141e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    140c:	e4 e3       	ldi	r30, 0x34	; 52
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	80 83       	st	Z, r24
    1414:	04 c0       	rjmp	.+8      	; 0x141e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1416:	e1 e3       	ldi	r30, 0x31	; 49
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	80 83       	st	Z, r24
			break;
		}
	}
}
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	00 d0       	rcall	.+0      	; 0x1432 <GPIO_writePort+0x6>
    1432:	00 d0       	rcall	.+0      	; 0x1434 <GPIO_writePort+0x8>
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	84 30       	cpi	r24, 0x04	; 4
    1440:	90 f5       	brcc	.+100    	; 0x14a6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	3c 83       	std	Y+4, r19	; 0x04
    144a:	2b 83       	std	Y+3, r18	; 0x03
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	9c 81       	ldd	r25, Y+4	; 0x04
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	91 05       	cpc	r25, r1
    1454:	d1 f0       	breq	.+52     	; 0x148a <GPIO_writePort+0x5e>
    1456:	2b 81       	ldd	r18, Y+3	; 0x03
    1458:	3c 81       	ldd	r19, Y+4	; 0x04
    145a:	22 30       	cpi	r18, 0x02	; 2
    145c:	31 05       	cpc	r19, r1
    145e:	2c f4       	brge	.+10     	; 0x146a <GPIO_writePort+0x3e>
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	61 f0       	breq	.+24     	; 0x1480 <GPIO_writePort+0x54>
    1468:	1e c0       	rjmp	.+60     	; 0x14a6 <GPIO_writePort+0x7a>
    146a:	2b 81       	ldd	r18, Y+3	; 0x03
    146c:	3c 81       	ldd	r19, Y+4	; 0x04
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	81 f0       	breq	.+32     	; 0x1494 <GPIO_writePort+0x68>
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	83 30       	cpi	r24, 0x03	; 3
    147a:	91 05       	cpc	r25, r1
    147c:	81 f0       	breq	.+32     	; 0x149e <GPIO_writePort+0x72>
    147e:	13 c0       	rjmp	.+38     	; 0x14a6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1480:	eb e3       	ldi	r30, 0x3B	; 59
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	80 83       	st	Z, r24
    1488:	0e c0       	rjmp	.+28     	; 0x14a6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    148a:	e8 e3       	ldi	r30, 0x38	; 56
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	80 83       	st	Z, r24
    1492:	09 c0       	rjmp	.+18     	; 0x14a6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1494:	e5 e3       	ldi	r30, 0x35	; 53
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	80 83       	st	Z, r24
    149c:	04 c0       	rjmp	.+8      	; 0x14a6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    149e:	e2 e3       	ldi	r30, 0x32	; 50
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	80 83       	st	Z, r24
			break;
		}
	}
}
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <GPIO_readPort+0x6>
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <GPIO_readPort+0x8>
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    14c2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	84 30       	cpi	r24, 0x04	; 4
    14c8:	90 f5       	brcc	.+100    	; 0x152e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	3c 83       	std	Y+4, r19	; 0x04
    14d2:	2b 83       	std	Y+3, r18	; 0x03
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	91 05       	cpc	r25, r1
    14dc:	d1 f0       	breq	.+52     	; 0x1512 <GPIO_readPort+0x5e>
    14de:	2b 81       	ldd	r18, Y+3	; 0x03
    14e0:	3c 81       	ldd	r19, Y+4	; 0x04
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	2c f4       	brge	.+10     	; 0x14f2 <GPIO_readPort+0x3e>
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	61 f0       	breq	.+24     	; 0x1508 <GPIO_readPort+0x54>
    14f0:	1e c0       	rjmp	.+60     	; 0x152e <GPIO_readPort+0x7a>
    14f2:	2b 81       	ldd	r18, Y+3	; 0x03
    14f4:	3c 81       	ldd	r19, Y+4	; 0x04
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	81 f0       	breq	.+32     	; 0x151c <GPIO_readPort+0x68>
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	83 30       	cpi	r24, 0x03	; 3
    1502:	91 05       	cpc	r25, r1
    1504:	81 f0       	breq	.+32     	; 0x1526 <GPIO_readPort+0x72>
    1506:	13 c0       	rjmp	.+38     	; 0x152e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1508:	e9 e3       	ldi	r30, 0x39	; 57
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	0e c0       	rjmp	.+28     	; 0x152e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1512:	e6 e3       	ldi	r30, 0x36	; 54
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	89 83       	std	Y+1, r24	; 0x01
    151a:	09 c0       	rjmp	.+18     	; 0x152e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    151c:	e3 e3       	ldi	r30, 0x33	; 51
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	04 c0       	rjmp	.+8      	; 0x152e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1526:	e0 e3       	ldi	r30, 0x30	; 48
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    152e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <main>:

/*--------------------------------------------------STRUCTURES----------------------------------------------------------------------------*/


Timer1_ConfigType Timer1_Configuration = {0, 8000, F_CPU_1024, COMPARE};
int main() {
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	2c 97       	sbiw	r28, 0x0c	; 12
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61


	UART_ConfigType UART_Config = {EIGHT_DATA_BITS, DISABLED_PARITY, ONE_STOP_BIT, 9600};
    1552:	ce 01       	movw	r24, r28
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	99 87       	std	Y+9, r25	; 0x09
    1558:	88 87       	std	Y+8, r24	; 0x08
    155a:	ee e6       	ldi	r30, 0x6E	; 110
    155c:	f1 e0       	ldi	r31, 0x01	; 1
    155e:	fb 87       	std	Y+11, r31	; 0x0b
    1560:	ea 87       	std	Y+10, r30	; 0x0a
    1562:	f7 e0       	ldi	r31, 0x07	; 7
    1564:	fc 87       	std	Y+12, r31	; 0x0c
    1566:	ea 85       	ldd	r30, Y+10	; 0x0a
    1568:	fb 85       	ldd	r31, Y+11	; 0x0b
    156a:	00 80       	ld	r0, Z
    156c:	8a 85       	ldd	r24, Y+10	; 0x0a
    156e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	9b 87       	std	Y+11, r25	; 0x0b
    1574:	8a 87       	std	Y+10, r24	; 0x0a
    1576:	e8 85       	ldd	r30, Y+8	; 0x08
    1578:	f9 85       	ldd	r31, Y+9	; 0x09
    157a:	00 82       	st	Z, r0
    157c:	88 85       	ldd	r24, Y+8	; 0x08
    157e:	99 85       	ldd	r25, Y+9	; 0x09
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	99 87       	std	Y+9, r25	; 0x09
    1584:	88 87       	std	Y+8, r24	; 0x08
    1586:	9c 85       	ldd	r25, Y+12	; 0x0c
    1588:	91 50       	subi	r25, 0x01	; 1
    158a:	9c 87       	std	Y+12, r25	; 0x0c
    158c:	ec 85       	ldd	r30, Y+12	; 0x0c
    158e:	ee 23       	and	r30, r30
    1590:	51 f7       	brne	.-44     	; 0x1566 <main+0x28>
	UART_init(&UART_Config);/*intializes UART Driver */
    1592:	ce 01       	movw	r24, r28
    1594:	01 96       	adiw	r24, 0x01	; 1
    1596:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <UART_init>
	DcMotor_Init();
    159a:	0e 94 a4 0c 	call	0x1948	; 0x1948 <DcMotor_Init>


	while (UART_recieveByte() != ECU_READY);   /* waiting HMI_ECU to sent ECU_READY signal */
    159e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <UART_recieveByte>
    15a2:	81 31       	cpi	r24, 0x11	; 17
    15a4:	e1 f7       	brne	.-8      	; 0x159e <main+0x60>
	UART_sendByte(ECU_READY);
    15a6:	81 e1       	ldi	r24, 0x11	; 17
    15a8:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <UART_sendByte>
	while (UART_recieveByte() != ECU_READY);   /* waiting HMI_ECU to sent ECU_READY signal */
    15ac:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <UART_recieveByte>
    15b0:	81 31       	cpi	r24, 0x11	; 17
    15b2:	e1 f7       	brne	.-8      	; 0x15ac <main+0x6e>
	while (1) {

		data = recieveData();                /* recieving command from HMI_ECU */
    15b4:	0e 94 81 0c 	call	0x1902	; 0x1902 <recieveData>
    15b8:	80 93 8b 01 	sts	0x018B, r24

		//IF conditions to determine which function to perfom//
		if (data == PASSWORD )
    15bc:	80 91 8b 01 	lds	r24, 0x018B
    15c0:	81 30       	cpi	r24, 0x01	; 1
    15c2:	19 f4       	brne	.+6      	; 0x15ca <main+0x8c>
		{
			passwordCreation();
    15c4:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <passwordCreation>
    15c8:	f5 cf       	rjmp	.-22     	; 0x15b4 <main+0x76>
		}

		else if (data == PASSWORD_CONFIRMATION )
    15ca:	80 91 8b 01 	lds	r24, 0x018B
    15ce:	82 30       	cpi	r24, 0x02	; 2
    15d0:	19 f4       	brne	.+6      	; 0x15d8 <main+0x9a>
		{
			passwordConfirmation();
    15d2:	0e 94 19 0b 	call	0x1632	; 0x1632 <passwordConfirmation>
    15d6:	ee cf       	rjmp	.-36     	; 0x15b4 <main+0x76>
		}
		else if( data == PASSWORD_SCREEN )
    15d8:	80 91 8b 01 	lds	r24, 0x018B
    15dc:	85 30       	cpi	r24, 0x05	; 5
    15de:	19 f4       	brne	.+6      	; 0x15e6 <main+0xa8>
			EEPROM_compare();
    15e0:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <EEPROM_compare>
    15e4:	e7 cf       	rjmp	.-50     	; 0x15b4 <main+0x76>

		else if ( OPEN_DOOR )
		{
			Timer1_init(&Timer1_Configuration);
    15e6:	88 e6       	ldi	r24, 0x68	; 104
    15e8:	91 e0       	ldi	r25, 0x01	; 1
    15ea:	0e 94 30 06 	call	0xc60	; 0xc60 <Timer1_init>
			Open_Door();
    15ee:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Open_Door>
    15f2:	e0 cf       	rjmp	.-64     	; 0x15b4 <main+0x76>

000015f4 <passwordCreation>:
	}

}


void passwordCreation(void) {
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	0f 92       	push	r0
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
	uint8 i = 0;
    1602:	19 82       	std	Y+1, r1	; 0x01
    1604:	0c c0       	rjmp	.+24     	; 0x161e <passwordCreation+0x2a>
	/* looping until HMI_ECU sends DONE */
	while (UART_recieveByte() != DONE) {
		pass[i] = UART_recieveByte(); /* storing the sent password in pass array */
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	08 2f       	mov	r16, r24
    160a:	10 e0       	ldi	r17, 0x00	; 0
    160c:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <UART_recieveByte>
    1610:	f8 01       	movw	r30, r16
    1612:	ec 57       	subi	r30, 0x7C	; 124
    1614:	fe 4f       	sbci	r31, 0xFE	; 254
    1616:	80 83       	st	Z, r24
		i++;
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	8f 5f       	subi	r24, 0xFF	; 255
    161c:	89 83       	std	Y+1, r24	; 0x01


void passwordCreation(void) {
	uint8 i = 0;
	/* looping until HMI_ECU sends DONE */
	while (UART_recieveByte() != DONE) {
    161e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <UART_recieveByte>
    1622:	8a 30       	cpi	r24, 0x0A	; 10
    1624:	81 f7       	brne	.-32     	; 0x1606 <passwordCreation+0x12>
		pass[i] = UART_recieveByte(); /* storing the sent password in pass array */
		i++;
	}
}
    1626:	0f 90       	pop	r0
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	08 95       	ret

00001632 <passwordConfirmation>:

void passwordConfirmation(void) {
    1632:	1f 93       	push	r17
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <passwordConfirmation+0x8>
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62

	uint8 i = 0;
    163e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 flag = 0;
    1640:	19 82       	std	Y+1, r1	; 0x01
    1642:	10 c0       	rjmp	.+32     	; 0x1664 <passwordConfirmation+0x32>
	/* looping until HMI_ECU sends DONE */
	while (UART_recieveByte() != DONE) {
		if (pass[i] == UART_recieveByte()) {
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	fc 01       	movw	r30, r24
    164c:	ec 57       	subi	r30, 0x7C	; 124
    164e:	fe 4f       	sbci	r31, 0xFE	; 254
    1650:	10 81       	ld	r17, Z
    1652:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <UART_recieveByte>
    1656:	18 17       	cp	r17, r24
    1658:	11 f0       	breq	.+4      	; 0x165e <passwordConfirmation+0x2c>

		} else {
			flag = 1;  /* not matched occurs */
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	89 83       	std	Y+1, r24	; 0x01
		}
		i++;
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	8f 5f       	subi	r24, 0xFF	; 255
    1662:	8a 83       	std	Y+2, r24	; 0x02
void passwordConfirmation(void) {

	uint8 i = 0;
	uint8 flag = 0;
	/* looping until HMI_ECU sends DONE */
	while (UART_recieveByte() != DONE) {
    1664:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <UART_recieveByte>
    1668:	8a 30       	cpi	r24, 0x0A	; 10
    166a:	61 f7       	brne	.-40     	; 0x1644 <passwordConfirmation+0x12>
		} else {
			flag = 1;  /* not matched occurs */
		}
		i++;
	}
	if(flag)
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	88 23       	and	r24, r24
    1670:	21 f0       	breq	.+8      	; 0x167a <passwordConfirmation+0x48>
	{
		/* send not matched command to HMI_ECU */
		UART_sendByte(PASSWORD_MATCH_NOT_CONFIRMATION );
    1672:	84 e0       	ldi	r24, 0x04	; 4
    1674:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <UART_sendByte>
    1678:	07 c0       	rjmp	.+14     	; 0x1688 <passwordConfirmation+0x56>
	}
	else
	{


		savePassword(pass);
    167a:	84 e8       	ldi	r24, 0x84	; 132
    167c:	91 e0       	ldi	r25, 0x01	; 1
    167e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <savePassword>
		UART_sendByte(PASSWORD_MATCH_CONFIRMATION );
    1682:	83 e0       	ldi	r24, 0x03	; 3
    1684:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <UART_sendByte>
	}
}
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	1f 91       	pop	r17
    1692:	08 95       	ret

00001694 <savePassword>:


void savePassword (uint8 * a_pass)
{
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	00 d0       	rcall	.+0      	; 0x169a <savePassword+0x6>
    169a:	0f 92       	push	r0
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	9b 83       	std	Y+3, r25	; 0x03
    16a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    16a4:	19 82       	std	Y+1, r1	; 0x01
    16a6:	15 c0       	rjmp	.+42     	; 0x16d2 <savePassword+0x3e>
	while(i!=5) /* password size */
	{
		EEPROM_writeByte(EEPROM_ADDRESS+i,a_pass[i]); /* writing in EEPROM  */
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	88 2f       	mov	r24, r24
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 96       	adiw	r24, 0x02	; 2
    16b0:	ac 01       	movw	r20, r24
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	9b 81       	ldd	r25, Y+3	; 0x03
    16bc:	fc 01       	movw	r30, r24
    16be:	e2 0f       	add	r30, r18
    16c0:	f3 1f       	adc	r31, r19
    16c2:	20 81       	ld	r18, Z
    16c4:	ca 01       	movw	r24, r20
    16c6:	62 2f       	mov	r22, r18
    16c8:	0e 94 c0 06 	call	0xd80	; 0xd80 <EEPROM_writeByte>
		i++;
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	8f 5f       	subi	r24, 0xFF	; 255
    16d0:	89 83       	std	Y+1, r24	; 0x01


void savePassword (uint8 * a_pass)
{
	uint8 i = 0;
	while(i!=5) /* password size */
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	85 30       	cpi	r24, 0x05	; 5
    16d6:	41 f7       	brne	.-48     	; 0x16a8 <savePassword+0x14>
	{
		EEPROM_writeByte(EEPROM_ADDRESS+i,a_pass[i]); /* writing in EEPROM  */
		i++;
	}
}
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <EEPROM_compare>:

void EEPROM_compare (void)
{
    16e4:	1f 93       	push	r17
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <EEPROM_compare+0x8>
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <EEPROM_compare+0xa>
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
	uint8 i = 0;
    16f2:	1c 82       	std	Y+4, r1	; 0x04
	uint8 * pass_Ptr = pass;
    16f4:	84 e8       	ldi	r24, 0x84	; 132
    16f6:	91 e0       	ldi	r25, 0x01	; 1
    16f8:	9b 83       	std	Y+3, r25	; 0x03
    16fa:	8a 83       	std	Y+2, r24	; 0x02
    16fc:	13 c0       	rjmp	.+38     	; 0x1724 <EEPROM_compare+0x40>
	while(i!=5) /* looping to store pass in EEPROM */
	{
		EEPROM_readByte(EEPROM_ADDRESS+i,pass_Ptr+i);
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	88 2f       	mov	r24, r24
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 96       	adiw	r24, 0x02	; 2
    1706:	ac 01       	movw	r20, r24
    1708:	8c 81       	ldd	r24, Y+4	; 0x04
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	9b 81       	ldd	r25, Y+3	; 0x03
    1712:	28 0f       	add	r18, r24
    1714:	39 1f       	adc	r19, r25
    1716:	ca 01       	movw	r24, r20
    1718:	b9 01       	movw	r22, r18
    171a:	0e 94 01 07 	call	0xe02	; 0xe02 <EEPROM_readByte>
		i++;
    171e:	8c 81       	ldd	r24, Y+4	; 0x04
    1720:	8f 5f       	subi	r24, 0xFF	; 255
    1722:	8c 83       	std	Y+4, r24	; 0x04

void EEPROM_compare (void)
{
	uint8 i = 0;
	uint8 * pass_Ptr = pass;
	while(i!=5) /* looping to store pass in EEPROM */
    1724:	8c 81       	ldd	r24, Y+4	; 0x04
    1726:	85 30       	cpi	r24, 0x05	; 5
    1728:	51 f7       	brne	.-44     	; 0x16fe <EEPROM_compare+0x1a>
	{
		EEPROM_readByte(EEPROM_ADDRESS+i,pass_Ptr+i);
		i++;
	}
	UART_sendByte(GET_PASSWORD_DONE); /* send to HMI_ECU GET_PASSWORD_DONE command */
    172a:	8c e0       	ldi	r24, 0x0C	; 12
    172c:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <UART_sendByte>
	while(UART_recieveByte() != ECU_READY); /* looping until HMI_ECU sends ECU_READY signal */
    1730:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <UART_recieveByte>
    1734:	81 31       	cpi	r24, 0x11	; 17
    1736:	e1 f7       	brne	.-8      	; 0x1730 <EEPROM_compare+0x4c>
	i = 0;
    1738:	1c 82       	std	Y+4, r1	; 0x04
	uint8 flag = 0;
    173a:	19 82       	std	Y+1, r1	; 0x01
    173c:	10 c0       	rjmp	.+32     	; 0x175e <EEPROM_compare+0x7a>
	/* looping until HMI_ECU sends DONE */
	while (UART_recieveByte() != DONE) {
		if (pass[i] == UART_recieveByte()) {
    173e:	8c 81       	ldd	r24, Y+4	; 0x04
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	fc 01       	movw	r30, r24
    1746:	ec 57       	subi	r30, 0x7C	; 124
    1748:	fe 4f       	sbci	r31, 0xFE	; 254
    174a:	10 81       	ld	r17, Z
    174c:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <UART_recieveByte>
    1750:	18 17       	cp	r17, r24
    1752:	11 f0       	breq	.+4      	; 0x1758 <EEPROM_compare+0x74>

		}
		else
		{
			flag = 1; /* Incorrect password entered */
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	89 83       	std	Y+1, r24	; 0x01
		}
		i++;
    1758:	8c 81       	ldd	r24, Y+4	; 0x04
    175a:	8f 5f       	subi	r24, 0xFF	; 255
    175c:	8c 83       	std	Y+4, r24	; 0x04
	UART_sendByte(GET_PASSWORD_DONE); /* send to HMI_ECU GET_PASSWORD_DONE command */
	while(UART_recieveByte() != ECU_READY); /* looping until HMI_ECU sends ECU_READY signal */
	i = 0;
	uint8 flag = 0;
	/* looping until HMI_ECU sends DONE */
	while (UART_recieveByte() != DONE) {
    175e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <UART_recieveByte>
    1762:	8a 30       	cpi	r24, 0x0A	; 10
    1764:	61 f7       	brne	.-40     	; 0x173e <EEPROM_compare+0x5a>
		{
			flag = 1; /* Incorrect password entered */
		}
		i++;
	}
	if(flag)
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	88 23       	and	r24, r24
    176a:	a9 f0       	breq	.+42     	; 0x1796 <EEPROM_compare+0xb2>
	{
		error++;
    176c:	80 91 8c 01 	lds	r24, 0x018C
    1770:	8f 5f       	subi	r24, 0xFF	; 255
    1772:	80 93 8c 01 	sts	0x018C, r24
		if(error == 3)
    1776:	80 91 8c 01 	lds	r24, 0x018C
    177a:	83 30       	cpi	r24, 0x03	; 3
    177c:	41 f4       	brne	.+16     	; 0x178e <EEPROM_compare+0xaa>
		{
			UART_sendByte(ALARM );
    177e:	8b e0       	ldi	r24, 0x0B	; 11
    1780:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <UART_sendByte>
			BUZZER();
    1784:	0e 94 3a 0c 	call	0x1874	; 0x1874 <BUZZER>
			error=0;
    1788:	10 92 8c 01 	sts	0x018C, r1
    178c:	0d c0       	rjmp	.+26     	; 0x17a8 <EEPROM_compare+0xc4>
		}
		else{
			UART_sendByte(PASSWORD_MATCH_NOT_CONFIRMATION );
    178e:	84 e0       	ldi	r24, 0x04	; 4
    1790:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <UART_sendByte>
    1794:	09 c0       	rjmp	.+18     	; 0x17a8 <EEPROM_compare+0xc4>
		}
	}
	else
	{
		UART_sendByte(PASSWORD_MATCH_CONFIRMATION );
    1796:	83 e0       	ldi	r24, 0x03	; 3
    1798:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <UART_sendByte>
		savePassword(pass);
    179c:	84 e8       	ldi	r24, 0x84	; 132
    179e:	91 e0       	ldi	r25, 0x01	; 1
    17a0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <savePassword>
		error=0;
    17a4:	10 92 8c 01 	sts	0x018C, r1
	}

}
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	1f 91       	pop	r17
    17b6:	08 95       	ret

000017b8 <Open_Door>:


void Open_Door(void)
{
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	2b 97       	sbiw	r28, 0x0b	; 11
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	de bf       	out	0x3e, r29	; 62
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	cd bf       	out	0x3d, r28	; 61


	Timer1_setCallBack(calledBackFunction);
    17cc:	88 e9       	ldi	r24, 0x98	; 152
    17ce:	9c e0       	ldi	r25, 0x0C	; 12
    17d0:	0e 94 ae 06 	call	0xd5c	; 0xd5c <Timer1_setCallBack>
	Timer1_ConfigType Timer1_Configuration = {0, 8000, F_CPU_1024, COMPARE};
    17d4:	ce 01       	movw	r24, r28
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	98 87       	std	Y+8, r25	; 0x08
    17da:	8f 83       	std	Y+7, r24	; 0x07
    17dc:	e5 e7       	ldi	r30, 0x75	; 117
    17de:	f1 e0       	ldi	r31, 0x01	; 1
    17e0:	fa 87       	std	Y+10, r31	; 0x0a
    17e2:	e9 87       	std	Y+9, r30	; 0x09
    17e4:	f6 e0       	ldi	r31, 0x06	; 6
    17e6:	fb 87       	std	Y+11, r31	; 0x0b
    17e8:	e9 85       	ldd	r30, Y+9	; 0x09
    17ea:	fa 85       	ldd	r31, Y+10	; 0x0a
    17ec:	00 80       	ld	r0, Z
    17ee:	89 85       	ldd	r24, Y+9	; 0x09
    17f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f2:	01 96       	adiw	r24, 0x01	; 1
    17f4:	9a 87       	std	Y+10, r25	; 0x0a
    17f6:	89 87       	std	Y+9, r24	; 0x09
    17f8:	ef 81       	ldd	r30, Y+7	; 0x07
    17fa:	f8 85       	ldd	r31, Y+8	; 0x08
    17fc:	00 82       	st	Z, r0
    17fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1800:	98 85       	ldd	r25, Y+8	; 0x08
    1802:	01 96       	adiw	r24, 0x01	; 1
    1804:	98 87       	std	Y+8, r25	; 0x08
    1806:	8f 83       	std	Y+7, r24	; 0x07
    1808:	9b 85       	ldd	r25, Y+11	; 0x0b
    180a:	91 50       	subi	r25, 0x01	; 1
    180c:	9b 87       	std	Y+11, r25	; 0x0b
    180e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1810:	ee 23       	and	r30, r30
    1812:	51 f7       	brne	.-44     	; 0x17e8 <Open_Door+0x30>
	Timer1_init(&Timer1_Configuration);
    1814:	ce 01       	movw	r24, r28
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	0e 94 30 06 	call	0xc60	; 0xc60 <Timer1_init>
	UART_sendByte(DOOR_IS_OPENNING );
    181c:	88 e0       	ldi	r24, 0x08	; 8
    181e:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <UART_sendByte>
	DcMotor_Rotate(CW, 255);
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	6f ef       	ldi	r22, 0xFF	; 255
    1826:	0e 94 bf 0c 	call	0x197e	; 0x197e <DcMotor_Rotate>
	counter = 0;						//Set seconds to 0			//Activate DC Motor
    182a:	10 92 8a 01 	sts	0x018A, r1
	while(counter != 15);				//Delay 15 seconds using Timer1
    182e:	80 91 8a 01 	lds	r24, 0x018A
    1832:	8f 30       	cpi	r24, 0x0F	; 15
    1834:	e1 f7       	brne	.-8      	; 0x182e <Open_Door+0x76>
	counter = 0;						//Set seconds to 0 to reset count
    1836:	10 92 8a 01 	sts	0x018A, r1
	DcMotor_Rotate(ACW, 255);			//Activate DC Motor
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	6f ef       	ldi	r22, 0xFF	; 255
    183e:	0e 94 bf 0c 	call	0x197e	; 0x197e <DcMotor_Rotate>
	UART_sendByte(DOOR_IS_LOCKING );
    1842:	89 e0       	ldi	r24, 0x09	; 9
    1844:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <UART_sendByte>
	while(counter != 15){}				//Delay 15 seconds using Timer1
    1848:	80 91 8a 01 	lds	r24, 0x018A
    184c:	8f 30       	cpi	r24, 0x0F	; 15
    184e:	e1 f7       	brne	.-8      	; 0x1848 <Open_Door+0x90>
	DcMotor_Rotate(STOP, 0);			//Deactivate DC Motor
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	60 e0       	ldi	r22, 0x00	; 0
    1854:	0e 94 bf 0c 	call	0x197e	; 0x197e <DcMotor_Rotate>
	UART_sendByte(DONE);
    1858:	8a e0       	ldi	r24, 0x0A	; 10
    185a:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <UART_sendByte>
	Timer1_deInit();					//Deactivate Timer1
    185e:	0e 94 96 06 	call	0xd2c	; 0xd2c <Timer1_deInit>



}
    1862:	2b 96       	adiw	r28, 0x0b	; 11
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	08 95       	ret

00001874 <BUZZER>:


void BUZZER(void)
{
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	2b 97       	sbiw	r28, 0x0b	; 11
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
	Timer1_setCallBack(calledBackFunction);
    1888:	88 e9       	ldi	r24, 0x98	; 152
    188a:	9c e0       	ldi	r25, 0x0C	; 12
    188c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <Timer1_setCallBack>
	Timer1_ConfigType Timer1_Configuration = {0, 8000, F_CPU_1024, COMPARE};
    1890:	ce 01       	movw	r24, r28
    1892:	01 96       	adiw	r24, 0x01	; 1
    1894:	98 87       	std	Y+8, r25	; 0x08
    1896:	8f 83       	std	Y+7, r24	; 0x07
    1898:	eb e7       	ldi	r30, 0x7B	; 123
    189a:	f1 e0       	ldi	r31, 0x01	; 1
    189c:	fa 87       	std	Y+10, r31	; 0x0a
    189e:	e9 87       	std	Y+9, r30	; 0x09
    18a0:	f6 e0       	ldi	r31, 0x06	; 6
    18a2:	fb 87       	std	Y+11, r31	; 0x0b
    18a4:	e9 85       	ldd	r30, Y+9	; 0x09
    18a6:	fa 85       	ldd	r31, Y+10	; 0x0a
    18a8:	00 80       	ld	r0, Z
    18aa:	89 85       	ldd	r24, Y+9	; 0x09
    18ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ae:	01 96       	adiw	r24, 0x01	; 1
    18b0:	9a 87       	std	Y+10, r25	; 0x0a
    18b2:	89 87       	std	Y+9, r24	; 0x09
    18b4:	ef 81       	ldd	r30, Y+7	; 0x07
    18b6:	f8 85       	ldd	r31, Y+8	; 0x08
    18b8:	00 82       	st	Z, r0
    18ba:	8f 81       	ldd	r24, Y+7	; 0x07
    18bc:	98 85       	ldd	r25, Y+8	; 0x08
    18be:	01 96       	adiw	r24, 0x01	; 1
    18c0:	98 87       	std	Y+8, r25	; 0x08
    18c2:	8f 83       	std	Y+7, r24	; 0x07
    18c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    18c6:	91 50       	subi	r25, 0x01	; 1
    18c8:	9b 87       	std	Y+11, r25	; 0x0b
    18ca:	eb 85       	ldd	r30, Y+11	; 0x0b
    18cc:	ee 23       	and	r30, r30
    18ce:	51 f7       	brne	.-44     	; 0x18a4 <BUZZER+0x30>
	Timer1_init(&Timer1_Configuration);
    18d0:	ce 01       	movw	r24, r28
    18d2:	01 96       	adiw	r24, 0x01	; 1
    18d4:	0e 94 30 06 	call	0xc60	; 0xc60 <Timer1_init>

	counter = 0;						//Set seconds to 0
    18d8:	10 92 8a 01 	sts	0x018A, r1
	BUZZER_on();						//Activate BUZZER
    18dc:	0e 94 c9 05 	call	0xb92	; 0xb92 <BUZZER_on>
	while(counter <= 60){			//Delay 60 seconds using Timer1
    18e0:	80 91 8a 01 	lds	r24, 0x018A
    18e4:	8d 33       	cpi	r24, 0x3D	; 61
    18e6:	e0 f3       	brcs	.-8      	; 0x18e0 <BUZZER+0x6c>
	}
	Timer1_deInit();					//Deactivate Timer1
    18e8:	0e 94 96 06 	call	0xd2c	; 0xd2c <Timer1_deInit>
	BUZZER_off();						//Deactivate BUZZER
    18ec:	0e 94 d5 05 	call	0xbaa	; 0xbaa <BUZZER_off>


}
    18f0:	2b 96       	adiw	r28, 0x0b	; 11
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <recieveData>:

uint8 recieveData(void) {
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
	while (UART_recieveByte() != ECU_READY);
    190a:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <UART_recieveByte>
    190e:	81 31       	cpi	r24, 0x11	; 17
    1910:	e1 f7       	brne	.-8      	; 0x190a <recieveData+0x8>
	UART_sendByte(ECU_READY);
    1912:	81 e1       	ldi	r24, 0x11	; 17
    1914:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <UART_sendByte>
	data = UART_recieveByte();
    1918:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <UART_recieveByte>
    191c:	80 93 8b 01 	sts	0x018B, r24
	UART_sendByte(ECU_READY);
    1920:	81 e1       	ldi	r24, 0x11	; 17
    1922:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <UART_sendByte>
	return data;
    1926:	80 91 8b 01 	lds	r24, 0x018B
}
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <calledBackFunction>:


void calledBackFunction (void){
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
	counter++;  /* seconds counter */
    1938:	80 91 8a 01 	lds	r24, 0x018A
    193c:	8f 5f       	subi	r24, 0xFF	; 255
    193e:	80 93 8a 01 	sts	0x018A, r24

}
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <DcMotor_Init>:
#include "gpio.h"
#include "motor.h"


void DcMotor_Init(void)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(PORT_MOTOR, PIN1_MOTOR, PIN_OUTPUT);
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	41 e0       	ldi	r20, 0x01	; 1
    1956:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection (PORT_MOTOR, PIN2_MOTOR, PIN_OUTPUT);
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	61 e0       	ldi	r22, 0x01	; 1
    195e:	41 e0       	ldi	r20, 0x01	; 1
    1960:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>

	GPIO_writePin(PORT_MOTOR, PIN1_MOTOR, LOGIC_LOW);
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	60 e0       	ldi	r22, 0x00	; 0
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
	GPIO_writePin(PORT_MOTOR, PIN2_MOTOR, LOGIC_LOW);
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	61 e0       	ldi	r22, 0x01	; 1
    1972:	40 e0       	ldi	r20, 0x00	; 0
    1974:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>


}
    1978:	cf 91       	pop	r28
    197a:	df 91       	pop	r29
    197c:	08 95       	ret

0000197e <DcMotor_Rotate>:
void DcMotor_Rotate ( DcMotor_State state,uint8 speed)
{
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	00 d0       	rcall	.+0      	; 0x1984 <DcMotor_Rotate+0x6>
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	89 83       	std	Y+1, r24	; 0x01
    198a:	6a 83       	std	Y+2, r22	; 0x02
	PWM_Timer0_Start(speed);
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <PWM_Timer0_Start>
	if ( state == CW )
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	81 30       	cpi	r24, 0x01	; 1
    1996:	51 f4       	brne	.+20     	; 0x19ac <DcMotor_Rotate+0x2e>
	{
		GPIO_writePin(PORT_MOTOR, PIN1_MOTOR, LOGIC_LOW);
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	40 e0       	ldi	r20, 0x00	; 0
    199e:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
		GPIO_writePin(PORT_MOTOR, PIN2_MOTOR, LOGIC_HIGH);
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	61 e0       	ldi	r22, 0x01	; 1
    19a6:	41 e0       	ldi	r20, 0x01	; 1
    19a8:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>

	}
	if ( state == ACW )
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	82 30       	cpi	r24, 0x02	; 2
    19b0:	51 f4       	brne	.+20     	; 0x19c6 <DcMotor_Rotate+0x48>
		{
			GPIO_writePin(PORT_MOTOR, PIN1_MOTOR, LOGIC_HIGH);
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
			GPIO_writePin(PORT_MOTOR, PIN2_MOTOR, LOGIC_LOW);
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	61 e0       	ldi	r22, 0x01	; 1
    19c0:	40 e0       	ldi	r20, 0x00	; 0
    19c2:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>

		}
	if ( state == STOP )
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	88 23       	and	r24, r24
    19ca:	51 f4       	brne	.+20     	; 0x19e0 <DcMotor_Rotate+0x62>
			{
				GPIO_writePin(PORT_MOTOR, PIN1_MOTOR, LOGIC_LOW);
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	40 e0       	ldi	r20, 0x00	; 0
    19d2:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
				GPIO_writePin(PORT_MOTOR, PIN2_MOTOR, LOGIC_LOW);
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	61 e0       	ldi	r22, 0x01	; 1
    19da:	40 e0       	ldi	r20, 0x00	; 0
    19dc:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>

			}

}
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    19ea:	0f 93       	push	r16
    19ec:	1f 93       	push	r17
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <TWI_init+0xa>
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	9a 83       	std	Y+2, r25	; 0x02
    19fa:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: Using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = (uint8)(F_CPU/((float32)2UL*(Config_Ptr->bit_rate)))-8;
    19fc:	00 e2       	ldi	r16, 0x20	; 32
    19fe:	10 e0       	ldi	r17, 0x00	; 0
    1a00:	e9 81       	ldd	r30, Y+1	; 0x01
    1a02:	fa 81       	ldd	r31, Y+2	; 0x02
    1a04:	81 81       	ldd	r24, Z+1	; 0x01
    1a06:	92 81       	ldd	r25, Z+2	; 0x02
    1a08:	cc 01       	movw	r24, r24
    1a0a:	a0 e0       	ldi	r26, 0x00	; 0
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	bc 01       	movw	r22, r24
    1a10:	cd 01       	movw	r24, r26
    1a12:	0e 94 4f 03 	call	0x69e	; 0x69e <__floatunsisf>
    1a16:	9b 01       	movw	r18, r22
    1a18:	ac 01       	movw	r20, r24
    1a1a:	ca 01       	movw	r24, r20
    1a1c:	b9 01       	movw	r22, r18
    1a1e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	9c 01       	movw	r18, r24
    1a28:	ad 01       	movw	r20, r26
    1a2a:	60 e0       	ldi	r22, 0x00	; 0
    1a2c:	74 e2       	ldi	r23, 0x24	; 36
    1a2e:	84 e7       	ldi	r24, 0x74	; 116
    1a30:	99 e4       	ldi	r25, 0x49	; 73
    1a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__divsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	bc 01       	movw	r22, r24
    1a3c:	cd 01       	movw	r24, r26
    1a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	88 50       	subi	r24, 0x08	; 8
    1a48:	f8 01       	movw	r30, r16
    1a4a:	80 83       	st	Z, r24
	TWSR = 0x00;
    1a4c:	e1 e2       	ldi	r30, 0x21	; 33
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Config_Ptr->address); // my address
    1a52:	a2 e2       	ldi	r26, 0x22	; 34
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e9 81       	ldd	r30, Y+1	; 0x01
    1a58:	fa 81       	ldd	r31, Y+2	; 0x02
    1a5a:	80 81       	ld	r24, Z
    1a5c:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1a5e:	e6 e5       	ldi	r30, 0x56	; 86
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	84 e0       	ldi	r24, 0x04	; 4
    1a64:	80 83       	st	Z, r24
}
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	08 95       	ret

00001a74 <TWI_start>:

void TWI_start(void)
{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1a7c:	e6 e5       	ldi	r30, 0x56	; 86
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	84 ea       	ldi	r24, 0xA4	; 164
    1a82:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1a84:	e6 e5       	ldi	r30, 0x56	; 86
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	88 23       	and	r24, r24
    1a8c:	dc f7       	brge	.-10     	; 0x1a84 <TWI_start+0x10>
}
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <TWI_stop>:

void TWI_stop(void)
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1a9c:	e6 e5       	ldi	r30, 0x56	; 86
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	84 e9       	ldi	r24, 0x94	; 148
    1aa2:	80 83       	st	Z, r24
}
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	0f 92       	push	r0
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1ab6:	e3 e2       	ldi	r30, 0x23	; 35
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1abe:	e6 e5       	ldi	r30, 0x56	; 86
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	84 e8       	ldi	r24, 0x84	; 132
    1ac4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1ac6:	e6 e5       	ldi	r30, 0x56	; 86
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	88 23       	and	r24, r24
    1ace:	dc f7       	brge	.-10     	; 0x1ac6 <TWI_writeByte+0x1c>
}
    1ad0:	0f 90       	pop	r0
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	08 95       	ret

00001ad8 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1ad8:	df 93       	push	r29
    1ada:	cf 93       	push	r28
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1ae0:	e6 e5       	ldi	r30, 0x56	; 86
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	84 ec       	ldi	r24, 0xC4	; 196
    1ae6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1ae8:	e6 e5       	ldi	r30, 0x56	; 86
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	88 23       	and	r24, r24
    1af0:	dc f7       	brge	.-10     	; 0x1ae8 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1af2:	e3 e2       	ldi	r30, 0x23	; 35
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
}
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1b06:	e6 e5       	ldi	r30, 0x56	; 86
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	84 e8       	ldi	r24, 0x84	; 132
    1b0c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1b0e:	e6 e5       	ldi	r30, 0x56	; 86
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	88 23       	and	r24, r24
    1b16:	dc f7       	brge	.-10     	; 0x1b0e <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1b18:	e3 e2       	ldi	r30, 0x23	; 35
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
}
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret

00001b24 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	0f 92       	push	r0
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1b2e:	e1 e2       	ldi	r30, 0x21	; 33
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	88 7f       	andi	r24, 0xF8	; 248
    1b36:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b3a:	0f 90       	pop	r0
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <UART_init+0x6>
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <UART_init+0x8>
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	9c 83       	std	Y+4, r25	; 0x04
    1b50:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1b52:	1a 82       	std	Y+2, r1	; 0x02
    1b54:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1b56:	eb e2       	ldi	r30, 0x2B	; 43
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	82 e0       	ldi	r24, 0x02	; 2
    1b5c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN)|(((Config_Ptr->bit_data)&0b0100)<<UCSZ2);
    1b5e:	aa e2       	ldi	r26, 0x2A	; 42
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	eb 81       	ldd	r30, Y+3	; 0x03
    1b64:	fc 81       	ldd	r31, Y+4	; 0x04
    1b66:	80 81       	ld	r24, Z
    1b68:	88 2f       	mov	r24, r24
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	84 70       	andi	r24, 0x04	; 4
    1b6e:	90 70       	andi	r25, 0x00	; 0
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	88 61       	ori	r24, 0x18	; 24
    1b7a:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (((Config_Ptr->bit_data)&0b0001)<<UCSZ0) | (((Config_Ptr->bit_data)&0b0010)<<UCSZ1);
    1b7c:	a0 e4       	ldi	r26, 0x40	; 64
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	eb 81       	ldd	r30, Y+3	; 0x03
    1b82:	fc 81       	ldd	r31, Y+4	; 0x04
    1b84:	80 81       	ld	r24, Z
    1b86:	88 2f       	mov	r24, r24
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	81 70       	andi	r24, 0x01	; 1
    1b8c:	90 70       	andi	r25, 0x00	; 0
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	28 2f       	mov	r18, r24
    1b94:	20 68       	ori	r18, 0x80	; 128
    1b96:	eb 81       	ldd	r30, Y+3	; 0x03
    1b98:	fc 81       	ldd	r31, Y+4	; 0x04
    1b9a:	80 81       	ld	r24, Z
    1b9c:	88 2f       	mov	r24, r24
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	82 70       	andi	r24, 0x02	; 2
    1ba2:	90 70       	andi	r25, 0x00	; 0
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	82 2b       	or	r24, r18
    1bae:	8c 93       	st	X, r24
	UCSRC |= ((Config_Ptr->stop_bit)<<USBS) | ((Config_Ptr->parity)<<UPM0);
    1bb0:	a0 e4       	ldi	r26, 0x40	; 64
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e0 e4       	ldi	r30, 0x40	; 64
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	38 2f       	mov	r19, r24
    1bbc:	eb 81       	ldd	r30, Y+3	; 0x03
    1bbe:	fc 81       	ldd	r31, Y+4	; 0x04
    1bc0:	82 81       	ldd	r24, Z+2	; 0x02
    1bc2:	88 2f       	mov	r24, r24
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	eb 81       	ldd	r30, Y+3	; 0x03
    1bd6:	fc 81       	ldd	r31, Y+4	; 0x04
    1bd8:	81 81       	ldd	r24, Z+1	; 0x01
    1bda:	88 2f       	mov	r24, r24
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	82 95       	swap	r24
    1be0:	92 95       	swap	r25
    1be2:	90 7f       	andi	r25, 0xF0	; 240
    1be4:	98 27       	eor	r25, r24
    1be6:	80 7f       	andi	r24, 0xF0	; 240
    1be8:	98 27       	eor	r25, r24
    1bea:	82 2b       	or	r24, r18
    1bec:	83 2b       	or	r24, r19
    1bee:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    1bf0:	eb 81       	ldd	r30, Y+3	; 0x03
    1bf2:	fc 81       	ldd	r31, Y+4	; 0x04
    1bf4:	83 81       	ldd	r24, Z+3	; 0x03
    1bf6:	94 81       	ldd	r25, Z+4	; 0x04
    1bf8:	a5 81       	ldd	r26, Z+5	; 0x05
    1bfa:	b6 81       	ldd	r27, Z+6	; 0x06
    1bfc:	88 0f       	add	r24, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	aa 1f       	adc	r26, r26
    1c02:	bb 1f       	adc	r27, r27
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	aa 1f       	adc	r26, r26
    1c0a:	bb 1f       	adc	r27, r27
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	aa 1f       	adc	r26, r26
    1c12:	bb 1f       	adc	r27, r27
    1c14:	9c 01       	movw	r18, r24
    1c16:	ad 01       	movw	r20, r26
    1c18:	80 e4       	ldi	r24, 0x40	; 64
    1c1a:	92 e4       	ldi	r25, 0x42	; 66
    1c1c:	af e0       	ldi	r26, 0x0F	; 15
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	bc 01       	movw	r22, r24
    1c22:	cd 01       	movw	r24, r26
    1c24:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__udivmodsi4>
    1c28:	da 01       	movw	r26, r20
    1c2a:	c9 01       	movw	r24, r18
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	9a 83       	std	Y+2, r25	; 0x02
    1c30:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1c32:	e0 e4       	ldi	r30, 0x40	; 64
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3a:	89 2f       	mov	r24, r25
    1c3c:	99 27       	eor	r25, r25
    1c3e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1c40:	e9 e2       	ldi	r30, 0x29	; 41
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	80 83       	st	Z, r24
}
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	0f 92       	push	r0
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
    1c60:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1c62:	eb e2       	ldi	r30, 0x2B	; 43
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	88 2f       	mov	r24, r24
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	80 72       	andi	r24, 0x20	; 32
    1c6e:	90 70       	andi	r25, 0x00	; 0
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	b9 f3       	breq	.-18     	; 0x1c62 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1c74:	ec e2       	ldi	r30, 0x2C	; 44
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1c7c:	0f 90       	pop	r0
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1c8c:	eb e2       	ldi	r30, 0x2B	; 43
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	88 23       	and	r24, r24
    1c94:	dc f7       	brge	.-10     	; 0x1c8c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1c96:	ec e2       	ldi	r30, 0x2C	; 44
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
}
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <UART_sendString+0x6>
    1ca8:	0f 92       	push	r0
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	9b 83       	std	Y+3, r25	; 0x03
    1cb0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1cb2:	19 82       	std	Y+1, r1	; 0x01
    1cb4:	0e c0       	rjmp	.+28     	; 0x1cd2 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	e2 0f       	add	r30, r18
    1cc4:	f3 1f       	adc	r31, r19
    1cc6:	80 81       	ld	r24, Z
    1cc8:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <UART_sendByte>
		i++;
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	8f 5f       	subi	r24, 0xFF	; 255
    1cd0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	9b 81       	ldd	r25, Y+3	; 0x03
    1cdc:	fc 01       	movw	r30, r24
    1cde:	e2 0f       	add	r30, r18
    1ce0:	f3 1f       	adc	r31, r19
    1ce2:	80 81       	ld	r24, Z
    1ce4:	88 23       	and	r24, r24
    1ce6:	39 f7       	brne	.-50     	; 0x1cb6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1cf4:	0f 93       	push	r16
    1cf6:	1f 93       	push	r17
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <UART_receiveString+0xa>
    1cfe:	0f 92       	push	r0
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	9b 83       	std	Y+3, r25	; 0x03
    1d06:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d08:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	9b 81       	ldd	r25, Y+3	; 0x03
    1d14:	8c 01       	movw	r16, r24
    1d16:	02 0f       	add	r16, r18
    1d18:	13 1f       	adc	r17, r19
    1d1a:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <UART_recieveByte>
    1d1e:	f8 01       	movw	r30, r16
    1d20:	80 83       	st	Z, r24
    1d22:	0f c0       	rjmp	.+30     	; 0x1d42 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	8f 5f       	subi	r24, 0xFF	; 255
    1d28:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	9b 81       	ldd	r25, Y+3	; 0x03
    1d34:	8c 01       	movw	r16, r24
    1d36:	02 0f       	add	r16, r18
    1d38:	13 1f       	adc	r17, r19
    1d3a:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <UART_recieveByte>
    1d3e:	f8 01       	movw	r30, r16
    1d40:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	28 2f       	mov	r18, r24
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	e2 0f       	add	r30, r18
    1d50:	f3 1f       	adc	r31, r19
    1d52:	80 81       	ld	r24, Z
    1d54:	83 32       	cpi	r24, 0x23	; 35
    1d56:	31 f7       	brne	.-52     	; 0x1d24 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	9b 81       	ldd	r25, Y+3	; 0x03
    1d62:	fc 01       	movw	r30, r24
    1d64:	e2 0f       	add	r30, r18
    1d66:	f3 1f       	adc	r31, r19
    1d68:	10 82       	st	Z, r1
}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	1f 91       	pop	r17
    1d76:	0f 91       	pop	r16
    1d78:	08 95       	ret

00001d7a <__udivmodsi4>:
    1d7a:	a1 e2       	ldi	r26, 0x21	; 33
    1d7c:	1a 2e       	mov	r1, r26
    1d7e:	aa 1b       	sub	r26, r26
    1d80:	bb 1b       	sub	r27, r27
    1d82:	fd 01       	movw	r30, r26
    1d84:	0d c0       	rjmp	.+26     	; 0x1da0 <__udivmodsi4_ep>

00001d86 <__udivmodsi4_loop>:
    1d86:	aa 1f       	adc	r26, r26
    1d88:	bb 1f       	adc	r27, r27
    1d8a:	ee 1f       	adc	r30, r30
    1d8c:	ff 1f       	adc	r31, r31
    1d8e:	a2 17       	cp	r26, r18
    1d90:	b3 07       	cpc	r27, r19
    1d92:	e4 07       	cpc	r30, r20
    1d94:	f5 07       	cpc	r31, r21
    1d96:	20 f0       	brcs	.+8      	; 0x1da0 <__udivmodsi4_ep>
    1d98:	a2 1b       	sub	r26, r18
    1d9a:	b3 0b       	sbc	r27, r19
    1d9c:	e4 0b       	sbc	r30, r20
    1d9e:	f5 0b       	sbc	r31, r21

00001da0 <__udivmodsi4_ep>:
    1da0:	66 1f       	adc	r22, r22
    1da2:	77 1f       	adc	r23, r23
    1da4:	88 1f       	adc	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	1a 94       	dec	r1
    1daa:	69 f7       	brne	.-38     	; 0x1d86 <__udivmodsi4_loop>
    1dac:	60 95       	com	r22
    1dae:	70 95       	com	r23
    1db0:	80 95       	com	r24
    1db2:	90 95       	com	r25
    1db4:	9b 01       	movw	r18, r22
    1db6:	ac 01       	movw	r20, r24
    1db8:	bd 01       	movw	r22, r26
    1dba:	cf 01       	movw	r24, r30
    1dbc:	08 95       	ret

00001dbe <__prologue_saves__>:
    1dbe:	2f 92       	push	r2
    1dc0:	3f 92       	push	r3
    1dc2:	4f 92       	push	r4
    1dc4:	5f 92       	push	r5
    1dc6:	6f 92       	push	r6
    1dc8:	7f 92       	push	r7
    1dca:	8f 92       	push	r8
    1dcc:	9f 92       	push	r9
    1dce:	af 92       	push	r10
    1dd0:	bf 92       	push	r11
    1dd2:	cf 92       	push	r12
    1dd4:	df 92       	push	r13
    1dd6:	ef 92       	push	r14
    1dd8:	ff 92       	push	r15
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	ca 1b       	sub	r28, r26
    1de8:	db 0b       	sbc	r29, r27
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	09 94       	ijmp

00001df6 <__epilogue_restores__>:
    1df6:	2a 88       	ldd	r2, Y+18	; 0x12
    1df8:	39 88       	ldd	r3, Y+17	; 0x11
    1dfa:	48 88       	ldd	r4, Y+16	; 0x10
    1dfc:	5f 84       	ldd	r5, Y+15	; 0x0f
    1dfe:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e00:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e02:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e04:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e06:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e08:	b9 84       	ldd	r11, Y+9	; 0x09
    1e0a:	c8 84       	ldd	r12, Y+8	; 0x08
    1e0c:	df 80       	ldd	r13, Y+7	; 0x07
    1e0e:	ee 80       	ldd	r14, Y+6	; 0x06
    1e10:	fd 80       	ldd	r15, Y+5	; 0x05
    1e12:	0c 81       	ldd	r16, Y+4	; 0x04
    1e14:	1b 81       	ldd	r17, Y+3	; 0x03
    1e16:	aa 81       	ldd	r26, Y+2	; 0x02
    1e18:	b9 81       	ldd	r27, Y+1	; 0x01
    1e1a:	ce 0f       	add	r28, r30
    1e1c:	d1 1d       	adc	r29, r1
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	ed 01       	movw	r28, r26
    1e2a:	08 95       	ret

00001e2c <_exit>:
    1e2c:	f8 94       	cli

00001e2e <__stop_program>:
    1e2e:	ff cf       	rjmp	.-2      	; 0x1e2e <__stop_program>
